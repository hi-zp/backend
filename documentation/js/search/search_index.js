var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,2.025,1,2.55]],["body/controllers/AppController.html",[0,1.716,1,2.161,2,1.07,3,0.117,4,0.105,5,0.081,6,1.665,7,0.397,8,0.761,9,2.97,10,3.903,11,2.672,12,3.903,13,3.83,14,3.116,15,4.467,16,3.116,17,3.903,18,1.942,19,2.639,20,0.822,21,3.035,22,0.02,23,3.116,24,0.993,25,1.942,26,1.41,27,1.194,28,1.21,29,3.903,30,1.297,31,3.338,32,1.942,33,2.365,34,3.116,35,1.942,36,3.75,37,1.942,38,3.116,39,3.116,40,1.942,41,4.467,42,1.942,43,1.942,44,3.116,45,1.942,46,3.116,47,1.942,48,1.942,49,3.116,50,1.942,51,3.346,52,1.238,53,1.942,54,3.116,55,1.942,56,1.942,57,3.116,58,1.942,59,3.116,60,0.359,61,1.665,62,2.379,63,2.98,64,1.665,65,1.942,66,0.227,67,2.306,68,1.665,69,2.306,70,1.942,71,2.306,72,1.942,73,1.483,74,1.942,75,1.942,76,1.238,77,0.117,78,0.026,79,0.838,80,2.15,81,1.892,82,1.258,83,1.942,84,1.942,85,1.942,86,1.942,87,1.942,88,3.903,89,3.116,90,3.116,91,1.424,92,1.942,93,3.41,94,3.116,95,4.467,96,3.903,97,0.611,98,1.942,99,1.483,100,1.942,101,3.116,102,1.942,103,1.942,104,1.942,105,1.147,106,1.942,107,1.942,108,0.008,109,0.008]],["title/modules/AppModule.html",[110,0.811,111,2.55]],["body/modules/AppModule.html",[1,3.461,2,2.323,3,0.174,4,0.155,5,0.12,22,0.02,60,0.515,66,0.337,67,3.611,68,2.468,77,0.174,78,0.038,91,2.281,108,0.011,109,0.011,110,1.101,111,5.097,112,1.056,113,1.242,114,1.396,115,1.396,116,1.242,117,2.038,118,1.175,119,2.468,120,2.468,121,2.468,122,3.896,123,3.896,124,3.896,125,3.456,126,3.896,127,3.896,128,3.896,129,3.896,130,3.896,131,2.045,132,1.396,133,1.396,134,2.878,135,2.491,136,2.878,137,2.878,138,2.878,139,2.878,140,2.878,141,2.878,142,1.586,143,4.217,144,2.878,145,2.468,146,2.878,147,2.878,148,2.878,149,2.878,150,2.468,151,2.878,152,2.198,153,2.878,154,2.878,155,2.878,156,2.878,157,2.468,158,2.878]],["title/injectables/AppService.html",[67,2.172,159,0.553]],["body/injectables/AppService.html",[3,0.3,4,0.269,5,0.208,7,0.507,8,1.491,13,5.899,22,0.019,24,0.84,30,1.098,33,2.126,60,0.366,66,0.583,67,3.606,77,0.3,78,0.066,82,1.098,108,0.016,109,0.016,159,0.918,160,1.734,161,4.269,162,4.978,163,4.269,164,4.978]],["title/interfaces/CacheModuleOptions.html",[165,1.422,166,2.55]],["body/interfaces/CacheModuleOptions.html",[3,0.257,4,0.23,5,0.177,7,0.433,20,0.736,22,0.02,28,1.219,60,0.406,66,0.498,77,0.37,78,0.056,82,0.938,97,1.337,108,0.014,109,0.014,110,1.219,117,1.737,118,1.737,125,2.513,152,5.142,165,1.646,166,3.832,167,2.513,168,2.95,169,1.828,170,3.626,171,3.647,172,4.738,173,4.256,174,3.248,175,3.647,176,4.738,177,4.738,178,1.836,179,3.248,180,2.513,181,3.647,182,3.647,183,3.248,184,3.647,185,3.647]],["title/injectables/CacheService.html",[159,0.553,186,2.344]],["body/injectables/CacheService.html",[3,0.183,4,0.164,5,0.126,7,0.308,8,1.07,9,2.889,20,0.892,22,0.02,24,0.95,26,1.649,27,1.179,28,1.242,30,1.134,31,3.211,60,0.414,66,0.355,77,0.183,78,0.04,79,1.89,80,2.412,81,2.123,82,0.669,91,1.385,108,0.011,109,0.011,159,0.659,160,1.056,186,2.791,187,2.599,188,4.379,189,4.408,190,3.032,191,4.828,192,3.791,193,3.032,194,4.379,195,4.379,196,6.956,197,3.032,198,4.828,199,4.379,200,3.032,201,3.032,202,2.73,203,5.502,204,2.219,205,3.032,206,2.599,207,2.315,208,2.102,209,2.599,210,1.791,211,3.032,212,3.032,213,3.032,214,2.599,215,2.791,216,3.032,217,2.599,218,3.032,219,3.032]],["title/interfaces/Cat.html",[165,1.422,220,2.344]],["body/interfaces/Cat.html",[3,0.289,4,0.259,5,0.2,7,0.487,20,0.864,22,0.019,27,1.421,33,2.479,77,0.289,81,3.146,108,0.015,109,0.015,165,1.853,167,2.83,169,1.972,204,2.8,220,3.799,221,4.107,222,5.183,223,5.183]],["title/controllers/CatsController.html",[0,2.025,224,2.55]],["body/controllers/CatsController.html",[0,1.72,2,1.72,3,0.188,4,0.169,5,0.13,7,0.318,8,1.093,9,2.713,20,0.596,21,2.697,22,0.02,24,0.882,26,1.15,27,0.937,28,0.987,30,1.153,31,2.308,36,3.332,60,0.487,61,2.678,62,3.416,63,2.385,66,0.366,77,0.188,78,0.041,79,1.348,80,2.464,81,2.169,82,1.153,97,1.407,108,0.012,109,0.012,150,2.678,178,1.348,186,3.332,204,2.464,215,2.852,220,1.991,224,3.102,225,2.678,226,2.385,227,4.895,228,3.102,229,3.958,230,5.227,231,3.123,232,4.359,233,3.123,234,3.123,235,3.123,236,3.123,237,4.474,238,3.123,239,3.123,240,3.123,241,2.165,242,3.123,243,2.165,244,3.123,245,3.102,246,3.123,247,3.123,248,3.088,249,2.678,250,3.123,251,3.123,252,2.678,253,3.123,254,3.123,255,3.123,256,3.123,257,3.123,258,5.227,259,3.123,260,3.123,261,3.123,262,2.385,263,3.123]],["title/modules/CatsModule.html",[110,0.811,122,2.344]],["body/modules/CatsModule.html",[2,3.183,3,0.275,4,0.246,5,0.19,22,0.019,60,0.466,66,0.534,77,0.275,78,0.06,108,0.015,109,0.015,110,1.399,112,1.673,113,1.968,114,2.211,115,2.211,116,1.968,117,2.59,118,1.862,122,4.481,131,2.802,132,2.211,133,2.211,224,4.398,248,4.153,249,3.91,264,3.91,265,3.91,266,4.56,267,4.56]],["title/injectables/CatsService.html",[159,0.553,248,2.172]],["body/injectables/CatsService.html",[3,0.24,4,0.214,5,0.166,7,0.404,8,1.291,20,0.704,22,0.02,24,1.001,26,1.021,27,1.106,28,0.876,30,1.165,52,2.532,60,0.388,66,0.465,77,0.24,78,0.053,80,3.27,81,2.878,82,0.876,108,0.014,109,0.014,159,0.795,160,1.383,163,4.529,169,1.748,202,1.926,220,4.53,222,3.033,223,3.033,227,5.089,228,3.663,229,4.387,248,3.121,252,3.406,262,3.033,268,3.406,269,5.282,270,3.972,271,3.972,272,2.347,273,3.972,274,3.972,275,3.972,276,3.406]],["title/interfaces/Config.html",[165,1.422,277,2.807]],["body/interfaces/Config.html",[3,0.256,4,0.229,5,0.177,7,0.431,20,0.864,22,0.02,60,0.494,77,0.256,108,0.014,109,0.014,165,1.639,167,2.504,169,1.824,210,2.504,277,4.209,278,3.634,279,4.288,280,4.664,281,4.288,282,4.664,283,7.394,284,3.634,285,3.634,286,3.634,287,3.634]],["title/modules/CoreModule.html",[110,0.811,123,2.344]],["body/modules/CoreModule.html",[3,0.285,4,0.255,5,0.197,22,0.02,60,0.496,66,0.554,77,0.285,78,0.063,108,0.015,109,0.015,110,1.304,112,1.736,117,1.932,123,3.769,288,4.73,289,6.45,290,3.612,291,4.1,292,4.73,293,3.769,294,4.73,295,5.07,296,5.913]],["title/classes/CreateCatDto.html",[78,0.049,232,2.55]],["body/classes/CreateCatDto.html",[3,0.258,4,0.231,5,0.178,7,0.434,20,0.819,21,3.172,22,0.019,24,1.037,27,1.287,33,2.266,60,0.314,77,0.258,78,0.073,81,3.494,108,0.014,109,0.014,169,1.833,204,2.391,222,4.695,223,4.695,232,3.841,297,1.951,298,5.579,299,3.661,300,6.149,301,4.269,302,6.742,303,4.269,304,4.269,305,2.721]],["title/classes/CustomHttpException.html",[78,0.049,306,2.55]],["body/classes/CustomHttpException.html",[3,0.229,4,0.205,5,0.159,7,0.387,20,0.683,22,0.019,24,0.865,26,0.976,27,0.796,28,0.838,33,2.26,60,0.377,66,0.445,77,0.309,78,0.05,79,1.64,82,1.507,97,1.195,108,0.013,109,0.013,169,1.697,180,3.03,272,2.245,297,1.736,306,3.556,307,2.901,308,4.432,309,5.218,310,5.128,311,4.309,312,5.128,313,2.422,314,3.556,315,2.901,316,2.901,317,3.258,318,3.8,319,3.258,320,2.635,321,3.556,322,3.258,323,5.733,324,3.258,325,3.258,326,3.258,327,3.258,328,3.258,329,3.258,330,3.258,331,3.258,332,2.901,333,2.635,334,3.258,335,3.258,336,3.258]],["title/classes/DateScalar.html",[78,0.049,337,2.55]],["body/classes/DateScalar.html",[3,0.205,4,0.184,5,0.142,7,0.346,8,1.161,20,0.884,22,0.02,24,1.001,26,1.408,27,1.147,28,1.208,30,1.208,33,1.185,60,0.349,77,0.205,78,0.045,82,1.308,108,0.012,109,0.012,142,1.874,169,1.573,178,2.052,202,3.026,204,2.693,272,2.01,297,1.555,337,3.296,338,2.918,339,1.941,340,5.479,341,3.492,342,4.754,343,4.754,344,4.754,345,5.973,346,4.754,347,5.479,348,3.403,349,4.754,350,5.931,351,3.403,352,3.403,353,4.754,354,3.403,355,4.754,356,3.403,357,3.403,358,2.918,359,3.403,360,3.403,361,4.754,362,3.403,363,3.403,364,3.403,365,3.403,366,3.403,367,3.403]],["title/injectables/ExceptionInterceptor.html",[159,0.553,368,2.807]],["body/injectables/ExceptionInterceptor.html",[3,0.247,4,0.221,5,0.171,7,0.417,8,1.318,20,0.546,22,0.02,24,0.692,26,1.054,27,0.859,28,0.904,30,0.904,60,0.443,66,0.48,77,0.247,78,0.054,82,0.904,108,0.014,109,0.014,159,0.811,160,1.428,178,1.77,308,4.119,313,2.614,314,2.843,339,1.674,368,4.119,369,3.516,370,3.741,371,4.119,372,4.083,373,4.083,374,4.442,375,4.101,376,2.116,377,4.181,378,3.741,379,5.395,380,2.614,381,4.101,382,2.843,383,3.516,384,4.101,385,4.101,386,3.516,387,4.101,388,4.101]],["title/classes/GlobalExceptionFilter.html",[78,0.049,389,2.807]],["body/classes/GlobalExceptionFilter.html",[3,0.152,4,0.136,5,0.105,7,0.257,8,0.935,20,0.738,22,0.02,24,0.869,26,1.187,27,0.967,28,1.019,30,0.844,52,1.611,60,0.428,66,0.448,77,0.152,78,0.033,79,1.091,80,2.545,81,1.226,82,0.844,97,1.832,108,0.01,109,0.01,169,1.266,178,1.652,192,3.442,202,1.226,210,1.493,272,1.493,297,1.155,306,3.204,308,4.228,309,3.528,311,1.752,313,3.285,314,1.752,320,1.752,321,4.04,332,1.93,333,1.752,339,1.563,386,5.471,389,2.923,390,4.748,391,2.167,392,4.62,393,3.935,394,5.153,395,4.62,396,3.828,397,2.527,398,3.828,399,3.828,400,3.828,401,3.857,402,3.961,403,5.153,404,2.527,405,3.828,406,4.228,407,5.153,408,2.527,409,2.923,410,3.828,411,3.282,412,3.828,413,2.527,414,2.527,415,2.527,416,2.167,417,1.611,418,2.527,419,2.527,420,2.44,421,2.527,422,2.527,423,5.826,424,2.527,425,2.527,426,2.527,427,2.527,428,4.62,429,2.527,430,2.527,431,2.527,432,2.527,433,2.527,434,2.527,435,2.527,436,2.167,437,2.527,438,2.167,439,2.527,440,2.527]],["title/controllers/HealthController.html",[0,2.025,441,2.55]],["body/controllers/HealthController.html",[0,1.858,2,1.858,3,0.203,4,0.182,5,0.141,7,0.343,8,1.154,21,1.74,22,0.02,24,0.569,30,0.744,60,0.401,66,0.395,77,0.203,78,0.045,79,1.456,80,3.551,82,0.744,108,0.012,109,0.012,226,2.575,441,3.276,442,2.892,443,5.908,444,5.908,445,3.372,446,3.372,447,4.724,448,4.724,449,4.724,450,4.724,451,4.724,452,4.724,453,2.575,454,2.437,455,2.575,456,3.372,457,2.339,458,3.372,459,3.607,460,5.908,461,3.372,462,3.372,463,3.372,464,3.372,465,3.372,466,4.051,467,4.724,468,4.724,469,3.372,470,3.372,471,3.372,472,4.724,473,3.372,474,3.372,475,3.607,476,4.724,477,3.372,478,3.372,479,6.619,480,3.372,481,3.372,482,3.372,483,3.372,484,3.372,485,3.372]],["title/modules/HealthModule.html",[110,0.811,124,2.344]],["body/modules/HealthModule.html",[2,2.924,3,0.241,4,0.216,5,0.167,22,0.02,60,0.499,66,0.468,77,0.241,78,0.053,108,0.014,109,0.014,110,1.314,112,1.468,113,1.726,114,1.94,115,1.94,116,1.726,117,1.633,118,1.633,124,4.325,131,2.573,132,1.94,133,1.94,135,3.135,217,3.43,393,4.052,441,4.13,453,3.054,486,3.43,487,3.43,488,3.738,489,4,490,4,491,5.307,492,3.43,493,4,494,3.054,495,3.68,496,4,497,4,498,5.307,499,3.054,500,4,501,3.054,502,4,503,4,504,4,505,4]],["title/classes/HttpError.html",[78,0.049,506,2.807]],["body/classes/HttpError.html",[3,0.222,4,0.199,5,0.153,7,0.374,19,2.963,20,0.882,22,0.02,24,0.963,26,0.945,27,0.77,28,0.811,33,2.235,60,0.368,77,0.222,78,0.049,79,1.587,97,1.156,108,0.013,109,0.013,169,1.659,180,2.963,183,2.808,204,2.769,297,1.68,309,5.056,311,4.251,313,3.638,317,3.153,319,3.153,321,4.699,333,2.55,339,2.048,401,4.319,457,3.478,506,3.829,507,3.153,508,4.894,509,5.015,510,5.015,511,3.677,512,5.015,513,3.677]],["title/interfaces/ICacheStore.html",[165,1.422,208,2.55]],["body/interfaces/ICacheStore.html",[3,0.304,4,0.272,5,0.21,7,0.513,19,3.635,20,0.884,22,0.019,24,0.851,77,0.304,108,0.016,109,0.016,165,1.951,167,2.98,169,2.035,198,5.275,208,4.266,229,4.792,514,4.325,515,5.044,516,5.044,517,5.044,518,5.044]],["title/injectables/LoggerMiddleware.html",[159,0.553,519,2.807]],["body/injectables/LoggerMiddleware.html",[3,0.276,4,0.247,5,0.191,7,0.466,8,1.415,20,0.61,22,0.019,24,0.772,26,1.177,27,0.959,28,1.01,30,1.01,51,5.449,52,4.05,60,0.336,66,0.536,77,0.276,78,0.061,108,0.015,109,0.015,159,0.871,160,1.595,339,1.869,373,4.257,519,4.423,520,3.926,521,5.793,522,5.793,523,4.578,524,4.578,525,3.496,526,5.793,527,4.578]],["title/injectables/LoggingInterceptor.html",[159,0.553,291,2.55]],["body/injectables/LoggingInterceptor.html",[3,0.256,4,0.229,5,0.177,7,0.431,8,1.347,20,0.565,22,0.019,24,0.715,26,1.089,27,0.887,28,0.935,30,0.935,60,0.45,66,0.496,77,0.256,78,0.056,82,0.935,97,1.332,108,0.014,109,0.014,159,0.829,160,1.476,276,4.727,291,3.822,339,1.73,370,3.822,371,4.209,372,4.136,373,4.136,374,4.499,376,2.186,377,4.248,378,3.822,380,2.701,382,2.939,383,3.634,528,3.634,529,4.238,530,4.238,531,4.238,532,4.238,533,4.238,534,4.238,535,4.238]],["title/modules/NestCacheModule.html",[110,0.811,125,2.172]],["body/modules/NestCacheModule.html",[3,0.255,4,0.228,5,0.176,8,1.031,20,0.563,22,0.02,24,0.712,26,1.085,27,0.884,28,0.931,30,0.931,60,0.404,66,0.494,77,0.369,78,0.056,82,0.931,97,1.328,108,0.014,109,0.014,110,1.213,112,1.549,117,1.724,118,1.724,125,3.249,152,4.199,165,1.633,166,2.928,168,2.928,170,2.494,171,3.62,172,5.244,173,4.241,174,3.224,175,3.62,176,4.715,177,4.715,178,1.822,179,3.224,180,2.494,181,4.715,182,4.715,183,3.224,184,3.62,185,3.62,536,4.222,537,4.222,538,3.62]],["title/modules/NestConfigModule.html",[110,0.811,126,2.344]],["body/modules/NestConfigModule.html",[3,0.202,4,0.181,5,0.14,22,0.02,60,0.496,66,0.392,77,0.202,78,0.044,91,2.693,97,1.054,108,0.012,109,0.012,110,1.199,112,1.23,113,1.447,114,1.626,115,1.626,116,1.447,117,1.921,118,2.219,126,3.956,131,2.281,132,1.626,133,1.626,135,1.981,192,3.985,210,1.981,279,2.999,280,4.086,281,3.756,282,4.086,284,2.875,285,2.875,286,2.875,287,2.875,539,2.875,540,2.875,541,2.56,542,2.875,543,4.034,544,2.325,545,2.875,546,3.592,547,3.592,548,3.592,549,3.592,550,4.739,551,2.875,552,3.353,553,3.353,554,3.353,555,3.353,556,3.353,557,3.353,558,3.353,559,3.353,560,3.353,561,3.353,562,3.353,563,3.353,564,4.66,565,3.353,566,2.875]],["title/modules/NestPinoModule.html",[110,0.811,127,2.344]],["body/modules/NestPinoModule.html",[3,0.326,4,0.15,5,0.172,22,0.02,27,0.584,60,0.397,63,3.144,66,0.326,77,0.168,78,0.037,82,0.615,91,2.761,97,1.295,108,0.011,109,0.011,110,0.908,112,1.023,118,1.138,127,2.625,135,2.433,192,2.894,210,1.647,316,2.128,376,1.438,401,2.625,406,2.128,457,1.932,475,2.128,499,3.74,501,2.128,538,4.639,542,3.531,544,1.932,545,2.39,564,2.39,567,2.128,568,2.787,569,4.118,570,2.39,571,3.531,572,2.787,573,4.2,574,2.787,575,3.74,576,2.39,577,2.39,578,2.39,579,4.408,580,2.39,581,2.39,582,2.39,583,2.39,584,2.787,585,2.39,586,2.39,587,2.787,588,2.787,589,2.787,590,2.787,591,2.787,592,2.787,593,2.787,594,2.787,595,2.787,596,2.787,597,2.787,598,2.787,599,3.531,600,2.787,601,2.787,602,2.787,603,2.787,604,2.787,605,2.787,606,2.787,607,2.787,608,4.118,609,5.41,610,4.898,611,5.41,612,4.898,613,2.787,614,4.898,615,4.898,616,4.118,617,4.118,618,2.787,619,2.787,620,2.787,621,2.787,622,2.787,623,2.787,624,2.39]],["title/classes/NewRecipeInput.html",[78,0.049,625,2.344]],["body/classes/NewRecipeInput.html",[3,0.245,4,0.219,5,0.169,7,0.413,20,0.799,21,3.095,22,0.019,24,1.012,28,1.181,33,2.42,60,0.394,77,0.245,78,0.071,91,1.854,93,4.58,108,0.014,109,0.014,142,2.235,169,1.772,297,1.854,305,2.586,341,3.823,625,3.415,626,5.47,627,3.478,628,5.143,629,3.478,630,4.057,631,5.357,632,4.057,633,4.09,634,4.057,635,4.057,636,4.057,637,4.58,638,5.357,639,5.357,640,4.057,641,4.057,642,4.057,643,3.478,644,4.057]],["title/injectables/ParseIntPipe.html",[159,0.553,245,2.55]],["body/injectables/ParseIntPipe.html",[3,0.257,4,0.23,5,0.177,7,0.433,8,1.35,9,2.649,20,0.567,22,0.019,24,0.718,26,1.093,27,0.891,28,0.938,30,0.938,33,2.138,60,0.406,66,0.647,77,0.257,78,0.056,82,0.938,97,1.337,108,0.014,109,0.014,159,0.831,160,1.482,178,1.836,202,2.063,245,3.832,262,3.248,339,1.737,409,3.248,645,4.738,646,3.647,647,4.219,648,4.738,649,4.686,650,5.571,651,4.254,652,2.95,653,4.738,654,5.526,655,4.254,656,4.254,657,3.248,658,3.647,659,3.647]],["title/modules/PostModule.html",[110,0.811,128,2.344]],["body/modules/PostModule.html",[3,0.257,4,0.23,5,0.177,22,0.019,60,0.451,66,0.498,71,4.349,77,0.257,78,0.056,108,0.014,109,0.014,110,1.354,112,1.561,113,1.836,114,2.063,115,2.063,116,1.836,117,2.506,118,2.506,128,4.59,131,2.68,132,2.063,133,2.063,135,3.265,488,3.802,494,3.248,660,3.647,661,4.254,662,3.647,663,3.647,664,4.254,665,4.254]],["title/injectables/PostService.html",[71,2.172,159,0.553]],["body/injectables/PostService.html",[3,0.165,4,0.148,5,0.114,7,0.278,8,0.992,9,3.023,11,3.481,19,3.166,20,0.884,22,0.02,24,1.012,26,1.542,27,1.256,28,1.323,30,1.263,31,3.423,60,0.356,62,4.092,66,0.32,71,2.398,76,1.742,77,0.165,78,0.036,79,1.18,82,1.263,97,1.276,105,3.383,108,0.011,109,0.011,159,0.611,160,0.952,204,1.752,417,1.742,454,2.765,455,2.087,459,3.697,666,2.344,667,4.059,668,4.059,669,4.059,670,2.344,671,2.733,672,4.059,673,4.842,674,2.733,675,4.059,676,6.381,677,2.733,678,2.733,679,2.733,680,4.842,681,4.059,682,2.733,683,4.595,684,4.059,685,2.733,686,2.733,687,3.697,688,3.697,689,4.152,690,2.733,691,4.152,692,2.733,693,2.733,694,2.733,695,2.733,696,2.733,697,2.733]],["title/modules/PrismaModule.html",[110,0.811,488,2.025]],["body/modules/PrismaModule.html",[3,0.273,4,0.244,5,0.189,22,0.019,60,0.422,66,0.53,77,0.273,78,0.06,108,0.015,109,0.015,110,1.394,112,1.66,113,1.952,114,2.194,115,2.194,116,1.952,117,2.58,118,2.58,131,2.788,132,2.194,133,2.194,454,3.831,488,3.926,698,3.879,699,3.879,700,3.879,701,4.524,702,4.524]],["title/injectables/PrismaService.html",[159,0.553,454,1.897]],["body/injectables/PrismaService.html",[3,0.285,4,0.255,5,0.197,7,0.481,8,1.445,9,2.784,22,0.019,24,0.798,30,1.043,60,0.434,66,0.554,76,3.015,77,0.285,78,0.063,108,0.015,109,0.015,159,0.889,160,1.648,180,3.493,215,3.015,339,1.932,454,3.051,703,4.056,704,6.45,705,7.095,706,4.73,707,4.73]],["title/classes/Recipe.html",[78,0.049,708,2.344]],["body/classes/Recipe.html",[3,0.23,4,0.206,5,0.159,7,0.388,20,0.866,21,3.352,22,0.02,24,1.096,28,1.133,33,2.455,36,4.266,60,0.28,77,0.23,78,0.05,91,2.349,93,4.439,108,0.013,109,0.013,142,2.1,169,1.7,297,1.742,341,3.966,345,4.407,628,4.985,629,3.269,633,4.751,637,5.11,643,3.269,708,3.706,709,3.269,710,5.814,711,3.812,712,3.812,713,3.812,714,3.812,715,3.812,716,5.139]],["title/classes/RecipesArgs.html",[78,0.049,717,2.344]],["body/classes/RecipesArgs.html",[3,0.255,4,0.228,5,0.176,7,0.43,20,0.733,21,2.837,22,0.02,24,0.928,60,0.404,77,0.255,78,0.073,108,0.014,109,0.014,142,2.326,169,1.819,202,2.667,204,2.373,272,3.249,297,1.929,305,2.691,633,4.947,637,3.224,687,4.67,688,4.67,717,3.505,718,3.62,719,4.199,720,4.222,721,4.222,722,5.499,723,4.222,724,4.222,725,5.499,726,6.116,727,4.222,728,4.222,729,4.222,730,4.222,731,4.222]],["title/modules/RecipesModule.html",[110,0.811,129,2.344]],["body/modules/RecipesModule.html",[3,0.272,4,0.243,5,0.188,22,0.019,60,0.488,66,0.527,77,0.272,78,0.06,108,0.015,109,0.015,110,1.391,112,1.653,113,1.945,114,2.185,115,2.185,116,1.945,117,2.576,118,1.84,129,4.467,131,2.781,132,2.185,133,2.185,337,3.976,732,3.864,733,3.864,734,4.14,735,4.506,736,4.506,737,3.976,738,4.506,739,3.864]],["title/classes/RecipesResolver.html",[78,0.049,737,2.55]],["body/classes/RecipesResolver.html",[3,0.147,4,0.131,5,0.101,7,0.247,8,0.908,9,2.724,20,0.764,21,2.808,22,0.02,24,0.968,26,1.475,27,1.201,28,1.265,30,1.2,31,2.96,33,1.998,36,3.219,60,0.439,66,0.284,77,0.147,78,0.032,79,1.049,81,1.178,82,1.2,97,1.168,108,0.01,109,0.01,142,1.339,157,2.084,170,2.195,178,1.049,215,2.368,297,1.111,376,1.254,411,2.084,417,1.549,625,3.219,652,1.685,657,1.856,708,4.439,717,3.657,734,3.39,737,2.576,739,2.084,740,2.084,741,4.51,742,5.05,743,3.715,744,3.715,745,2.43,746,2.43,747,2.43,748,6.642,749,5.05,750,2.43,751,3.715,752,2.43,753,5.05,754,2.43,755,2.43,756,3.715,757,2.43,758,2.43,759,2.43,760,2.43,761,2.43,762,2.43,763,2.43,764,2.43,765,2.43,766,2.084,767,2.084,768,2.084,769,2.084,770,2.084,771,2.43,772,2.43,773,2.43,774,2.43,775,2.43,776,2.43,777,2.43,778,2.43,779,2.43,780,2.43,781,2.43,782,2.43,783,2.43,784,2.43,785,2.43,786,2.43]],["title/injectables/RecipesService.html",[159,0.553,734,2.172]],["body/injectables/RecipesService.html",[3,0.192,4,0.172,5,0.133,7,0.324,8,1.108,9,3.03,20,0.767,22,0.02,24,0.972,26,1.48,27,1.206,28,1.27,30,1.27,31,3.434,33,2.204,36,2.891,60,0.423,64,3.889,66,0.373,77,0.192,78,0.042,82,1.27,91,1.455,105,1.881,108,0.012,109,0.012,159,0.682,160,1.109,228,3.145,229,3.145,625,3.671,708,2.891,717,3.88,734,2.68,767,2.73,768,2.73,769,2.73,770,2.73,787,2.73,788,4.536,789,4.536,790,4.536,791,3.184,792,4.536,793,4.536,794,4.536,795,4.536,796,3.464,797,4.536,798,4.536,799,4.536,800,4.536,801,3.184,802,4.536,803,3.184,804,4.536,805,3.184]],["title/interfaces/Response.html",[165,1.422,420,2.344]],["body/interfaces/Response.html",[3,0.267,4,0.239,5,0.184,7,0.45,20,0.589,22,0.02,60,0.459,66,0.517,77,0.342,78,0.058,82,0.974,105,4.026,108,0.015,109,0.015,159,0.852,165,1.709,167,2.61,169,1.874,293,2.816,339,1.804,370,3.064,372,3.61,373,2.816,374,3.927,376,2.28,377,3.927,378,3.927,380,2.816,382,3.064,420,3.61,806,3.374,807,5.359,808,3.374,809,3.789]],["title/guards/RolesGuard.html",[243,2.55,810,2.807]],["body/guards/RolesGuard.html",[3,0.232,4,0.207,5,0.16,7,0.391,8,1.261,20,0.688,22,0.02,24,0.871,26,1.327,27,1.081,28,1.139,30,0.846,60,0.379,66,0.449,73,3.942,77,0.232,78,0.051,79,1.657,81,1.861,82,1.139,91,1.754,97,1.962,108,0.013,109,0.013,159,0.777,170,3.05,241,3.58,243,3.58,290,2.931,339,1.567,372,3.977,376,1.98,406,2.931,417,2.447,811,3.838,812,3.291,813,6.24,814,3.838,815,6.706,816,3.838,817,5.163,818,3.838,819,3.838,820,3.838,821,3.838,822,3.838,823,5.163,824,3.838,825,3.838,826,3.838,827,3.838,828,3.838]],["title/injectables/TerminusLogger.html",[159,0.553,495,2.55]],["body/injectables/TerminusLogger.html",[3,0.216,4,0.193,5,0.149,7,0.364,8,1.201,20,0.749,22,0.019,24,0.949,26,1.445,27,1.177,28,1.24,30,1.24,33,2.286,52,4.184,60,0.263,66,0.418,77,0.216,78,0.047,108,0.013,109,0.013,159,0.74,160,1.245,180,2.905,206,5.194,313,3.861,376,3.387,401,4.367,495,3.41,566,5.628,652,4.2,796,2.728,829,5.194,830,3.064,831,5.623,832,6.351,833,3.573,834,5.623,835,3.573,836,5.623,837,3.573,838,4.918,839,3.573,840,3.573,841,3.573,842,3.573]],["title/injectables/TransformInterceptor.html",[159,0.553,293,2.344]],["body/injectables/TransformInterceptor.html",[3,0.254,4,0.227,5,0.176,7,0.428,8,1.34,20,0.56,22,0.02,24,0.71,26,1.081,27,0.881,28,0.928,30,0.928,60,0.449,66,0.492,77,0.331,78,0.056,82,0.928,105,3.241,108,0.014,109,0.014,159,0.825,160,1.465,165,1.627,293,3.497,339,1.718,370,4.233,371,3.212,372,4.124,373,3.891,374,4.486,376,2.83,377,4.233,378,3.804,380,2.681,382,2.917,420,2.681,806,3.212,807,3.607,808,3.212,809,3.607,843,4.206]],["title/modules/UserModule.html",[110,0.811,130,2.344]],["body/modules/UserModule.html",[3,0.257,4,0.23,5,0.177,22,0.019,60,0.451,66,0.498,69,4.349,77,0.257,78,0.056,108,0.014,109,0.014,110,1.354,112,1.561,113,1.836,114,2.063,115,2.063,116,1.836,117,2.506,118,2.506,130,4.59,131,2.68,132,2.063,133,2.063,135,3.265,488,3.802,494,3.248,844,3.647,845,4.254,846,3.647,847,3.647,848,4.254,849,4.254]],["title/injectables/UserService.html",[69,2.172,159,0.553]],["body/injectables/UserService.html",[3,0.165,4,0.148,5,0.114,7,0.278,8,0.992,9,3.023,19,3.166,20,0.884,22,0.02,24,1.012,26,1.542,27,1.256,28,1.323,30,1.263,31,3.423,60,0.356,66,0.32,69,2.398,73,4.092,76,1.742,77,0.165,78,0.036,79,1.18,82,1.263,97,1.276,105,3.383,108,0.011,109,0.011,159,0.611,160,0.952,204,1.752,417,1.742,454,2.765,455,2.087,459,3.697,670,2.344,683,4.595,687,3.697,688,3.697,689,4.152,691,4.152,850,2.344,851,4.059,852,4.059,853,4.059,854,4.059,855,2.733,856,4.059,857,4.842,858,2.733,859,4.059,860,6.381,861,2.733,862,4.059,863,2.733,864,2.733,865,2.733,866,4.842,867,4.059,868,2.733,869,2.733,870,2.733,871,2.733,872,2.733,873,2.733,874,2.733,875,2.733,876,2.733]],["title/injectables/ValidationPipe.html",[159,0.553,877,2.807]],["body/injectables/ValidationPipe.html",[3,0.208,4,0.187,5,0.144,7,0.351,8,1.174,9,2.384,20,0.888,22,0.02,24,0.81,26,1.235,27,1.006,28,1.059,30,1.059,33,1.203,60,0.406,66,0.404,77,0.208,78,0.073,80,3.042,82,1.218,97,1.877,108,0.012,109,0.012,159,0.723,160,1.203,170,3.263,178,1.491,202,2.895,204,1.491,209,2.962,215,2.202,305,2.202,316,2.637,339,1.41,409,2.637,647,3.668,648,4.119,649,4.558,650,5.119,652,2.395,653,4.119,657,2.637,658,2.962,659,2.962,719,2.637,877,3.668,878,2.962,879,4.804,880,4.804,881,3.454,882,5.97,883,3.454,884,3.454,885,2.962,886,3.454,887,3.454,888,4.119,889,3.454,890,3.454,891,3.454,892,3.454,893,3.454]],["title/coverage.html",[894,3.829]],["body/coverage.html",[0,2.185,1,1.379,5,0.083,6,1.706,20,0.265,22,0.02,67,1.175,69,1.175,71,1.175,78,0.078,108,0.008,109,0.008,116,0.858,159,0.979,161,1.706,165,1.915,166,1.379,168,2.203,173,1.379,178,0.858,186,1.268,187,1.706,208,1.379,220,1.268,221,1.706,224,1.379,225,1.706,232,1.379,241,1.379,243,1.379,245,1.379,248,1.175,268,1.706,277,1.519,278,1.706,279,1.268,280,1.379,281,1.268,282,1.379,291,1.379,293,1.268,298,1.706,299,1.706,306,1.379,307,2.426,315,1.519,320,1.379,337,1.379,338,1.706,368,1.519,369,1.706,389,1.519,390,1.706,391,1.706,420,1.268,441,1.379,442,1.706,454,1.026,495,1.379,506,1.519,507,1.706,514,1.706,519,1.519,520,1.706,525,2.426,528,1.706,541,1.519,544,1.379,546,1.519,547,1.519,548,1.519,549,1.519,550,1.519,567,2.426,575,1.519,579,1.519,625,1.268,626,1.706,627,1.706,645,1.706,646,1.706,666,1.706,703,1.706,708,1.268,709,1.706,717,1.268,718,1.706,719,5.732,734,1.175,737,1.379,740,1.706,787,1.706,806,2.426,810,1.519,812,1.706,829,1.706,830,1.706,850,1.706,877,1.519,878,1.706,894,1.519,895,1.989,896,1.989,897,1.989,898,1.989,899,6.211,900,5.539,901,2.724,902,6.091,903,1.706,904,7.129,905,1.706,906,4.525,907,1.706,908,1.706,909,1.706,910,1.706,911,1.706,912,1.706,913,1.706,914,1.706,915,4.529,916,1.706,917,1.706,918,2.724,919,1.706,920,4.529,921,1.706,922,2.724,923,2.724,924,2.724,925,2.724,926,1.706,927,1.706,928,1.989,929,1.989,930,1.706,931,3.966,932,1.989,933,1.989,934,1.989,935,1.989,936,1.989]],["title/dependencies.html",[113,1.908,937,2.634]],["body/dependencies.html",[22,0.02,66,0.437,76,2.382,78,0.067,108,0.013,109,0.013,113,1.613,142,2.059,145,3.205,207,2.854,210,2.208,281,2.382,290,2.854,305,2.382,358,3.205,380,2.382,416,3.205,453,2.854,457,2.592,492,3.205,501,2.854,543,3.205,570,3.205,571,4.935,649,2.854,766,3.205,885,3.205,938,3.737,939,3.737,940,3.737,941,3.737,942,3.737,943,3.737,944,3.737,945,3.737,946,3.737,947,3.737,948,3.737,949,6.172,950,3.737,951,5.071,952,5.071,953,3.737,954,3.737,955,3.737,956,3.737,957,3.737,958,3.737,959,3.737,960,3.737,961,3.737,962,3.737,963,3.737,964,3.737,965,3.737,966,3.737,967,3.737,968,3.737,969,3.737,970,3.737,971,3.737,972,3.737,973,3.737,974,3.737,975,3.737,976,3.737,977,3.737,978,3.737,979,3.737,980,3.737,981,3.737,982,3.737,983,3.737]],["title/miscellaneous/enumerations.html",[984,1.585,985,3.791]],["body/miscellaneous/enumerations.html",[7,0.485,22,0.019,108,0.015,109,0.015,202,3.564,311,4.121,984,2.461,985,4.09,986,4.09,987,5.096,988,4.09,989,5.944,990,5.944,991,5.944,992,5.944,993,5.944,994,5.944,995,5.944,996,5.944,997,5.944]],["title/miscellaneous/functions.html",[984,1.585,998,3.791]],["body/miscellaneous/functions.html",[7,0.537,22,0.018,30,1.164,31,3.262,108,0.016,109,0.016,116,2.922,393,4.828,926,4.526,927,5.805,930,4.526,984,2.723,998,4.526,999,5.278,1000,5.278,1001,5.278,1002,6.323]],["title/index.html",[7,0.313,1003,3.072,1004,3.072]],["body/index.html",[4,0.202,5,0.156,22,0.019,99,2.854,108,0.013,109,0.013,228,2.592,279,2.382,341,2.382,436,3.205,796,2.854,894,2.854,1005,3.737,1006,3.737,1007,5.071,1008,3.737,1009,3.737,1010,3.737,1011,3.737,1012,3.737,1013,5.755,1014,3.737,1015,3.737,1016,3.737,1017,3.737,1018,6.172,1019,6.805,1020,3.737,1021,5.071,1022,5.071,1023,3.737,1024,3.737,1025,3.737,1026,3.205,1027,3.737,1028,3.737,1029,3.737,1030,3.205,1031,6.653,1032,3.205,1033,3.737,1034,5.071,1035,3.737,1036,3.205,1037,3.737,1038,3.737,1039,5.071,1040,4.348,1041,3.737,1042,3.737,1043,3.737,1044,5.071,1045,5.071,1046,3.737,1047,3.737,1048,3.737,1049,3.737,1050,3.737,1051,3.205,1052,3.737,1053,3.737,1054,3.737,1055,3.737,1056,3.737,1057,3.737,1058,3.737,1059,3.737,1060,3.737,1061,3.737,1062,3.737,1063,3.737,1064,3.737,1065,3.737,1066,3.737,1067,3.205]],["title/modules.html",[112,1.84]],["body/modules.html",[22,0.015,108,0.015,109,0.015,111,3.2,112,1.693,122,2.942,123,2.942,124,2.942,125,2.727,126,2.942,127,2.942,128,2.942,129,2.942,130,2.942,488,2.542,1051,6.21,1068,7.243,1069,7.243,1070,7.407,1071,6.378,1072,6.378]],["title/overview.html",[1073,4.3]],["body/overview.html",[2,1.706,22,0.019,67,3.074,69,3.816,71,3.816,108,0.012,109,0.012,110,0.683,111,5.108,112,1.136,113,1.337,114,1.502,115,1.502,116,1.337,117,1.265,118,1.265,119,2.656,120,2.656,121,2.656,122,3.839,123,3.317,124,3.839,125,3.074,126,3.625,127,3.317,128,4.212,129,3.839,130,4.212,131,2.157,132,1.502,133,1.502,160,1.079,167,1.83,192,3.36,248,3.074,264,2.656,265,2.656,297,1.415,454,3.332,486,2.656,487,2.656,488,3.64,539,2.656,540,2.656,660,2.656,662,2.656,663,2.656,698,2.656,699,2.656,700,2.656,732,2.656,733,2.656,734,3.074,810,2.365,844,2.656,846,2.656,847,2.656,1073,2.656,1074,3.097,1075,3.097,1076,3.097,1077,3.097,1078,3.097,1079,3.097]],["title/properties.html",[169,1.463,937,2.634]],["body/properties.html",[22,0.019,99,4.246,108,0.017,109,0.017,169,1.84,341,3.545,1067,4.769,1080,4.769,1081,5.561,1082,5.561]],["title/miscellaneous/typealiases.html",[984,1.585,1083,4.421]],["body/miscellaneous/typealiases.html",[7,0.563,19,3.27,20,0.866,22,0.017,108,0.017,109,0.017,508,5.576,984,2.855,986,4.745,987,5.576,988,4.745,1084,5.534]],["title/miscellaneous/variables.html",[984,1.585,1085,3.791]],["body/miscellaneous/variables.html",[5,0.058,7,0.14,9,0.596,20,0.754,22,0.02,27,0.289,30,0.518,33,1.261,82,1.276,91,2.522,97,1.388,108,0.006,109,0.006,168,0.957,170,1.388,173,1.629,174,1.054,178,1.906,179,1.054,186,0.88,189,2.014,191,2.629,192,2.138,202,3.288,203,1.183,204,0.596,207,1.793,214,2.629,226,1.054,241,2.51,272,3.987,279,1.497,280,2.51,281,1.954,282,2.814,295,1.183,307,1.054,314,0.957,315,1.793,320,1.629,321,1.629,322,1.183,323,3.786,324,1.183,325,2.014,326,1.183,327,2.014,328,1.183,329,2.014,330,1.183,331,2.014,332,1.054,333,1.629,334,1.183,335,2.014,336,2.014,401,1.954,402,1.183,438,2.014,466,2.014,475,1.054,499,2.763,525,2.763,541,1.054,544,1.629,546,1.793,547,1.793,548,1.793,549,1.793,550,2.763,551,2.014,567,1.054,573,1.183,575,2.341,576,1.183,577,1.183,578,1.183,579,1.793,580,1.183,581,1.183,582,1.183,583,1.183,585,1.183,586,1.183,599,1.183,624,1.183,647,1.054,808,1.054,888,4.04,901,1.183,902,2.014,903,2.014,905,2.014,906,1.183,907,2.014,908,2.014,909,2.014,910,2.014,911,2.014,912,2.014,913,1.183,914,1.183,916,1.183,917,2.014,918,1.183,919,2.629,921,1.183,922,1.183,923,1.183,924,1.183,925,1.183,984,0.712,1026,1.183,1030,2.629,1032,1.183,1036,2.629,1040,1.183,1080,1.183,1085,1.183,1086,2.349,1087,2.349,1088,1.38,1089,2.349,1090,2.349,1091,1.38,1092,2.349,1093,1.38,1094,1.38,1095,4.415,1096,1.38,1097,2.349,1098,1.38,1099,2.349,1100,1.38,1101,1.38,1102,2.349,1103,1.38,1104,1.38,1105,1.38,1106,1.38,1107,1.38,1108,1.38,1109,1.38,1110,1.38,1111,1.38,1112,1.38,1113,1.38,1114,1.38,1115,1.38,1116,1.38,1117,1.38,1118,1.38,1119,3.066,1120,1.38,1121,1.38,1122,1.38,1123,1.38,1124,2.349,1125,1.38,1126,2.349,1127,1.38,1128,1.38,1129,1.38,1130,1.38,1131,1.38,1132,1.38,1133,4.711,1134,1.38,1135,1.38,1136,1.38,1137,1.38,1138,1.38,1139,2.349,1140,1.38,1141,1.38,1142,1.38,1143,2.349,1144,2.349,1145,1.38,1146,1.38,1147,1.38,1148,1.38,1149,1.38,1150,1.38,1151,1.38,1152,1.38,1153,1.38,1154,1.38,1155,1.38,1156,1.38,1157,1.38,1158,1.38,1159,1.38,1160,1.38,1161,3.066,1162,3.619,1163,1.38,1164,1.38,1165,1.38,1166,1.38,1167,3.066,1168,1.38,1169,1.38,1170,1.38,1171,1.38,1172,1.38,1173,1.38,1174,1.38,1175,1.38,1176,2.349,1177,1.38,1178,1.38,1179,1.38,1180,1.38,1181,1.38,1182,1.38,1183,1.38,1184,1.38,1185,2.349,1186,2.349,1187,4.415,1188,2.349,1189,2.349,1190,2.349,1191,2.349,1192,2.349,1193,1.38,1194,2.349,1195,1.38,1196,1.38,1197,1.38,1198,2.349,1199,1.38,1200,1.38,1201,2.349,1202,1.38,1203,1.38,1204,1.38,1205,1.38,1206,1.38,1207,1.38,1208,1.38,1209,1.38,1210,1.38,1211,1.38,1212,1.38,1213,1.38,1214,1.38,1215,1.38,1216,1.38,1217,1.38,1218,1.38,1219,1.38,1220,1.38,1221,1.38,1222,1.38,1223,1.38,1224,1.38,1225,1.38,1226,1.38,1227,1.38,1228,1.38,1229,1.38,1230,1.38,1231,1.38]]],"invertedIndex":[["",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"interfaces/CacheModuleOptions.html":{},"injectables/CacheService.html":{},"interfaces/Cat.html":{},"controllers/CatsController.html":{},"modules/CatsModule.html":{},"injectables/CatsService.html":{},"interfaces/Config.html":{},"modules/CoreModule.html":{},"classes/CreateCatDto.html":{},"classes/CustomHttpException.html":{},"classes/DateScalar.html":{},"injectables/ExceptionInterceptor.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/HttpError.html":{},"interfaces/ICacheStore.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"modules/NestCacheModule.html":{},"modules/NestConfigModule.html":{},"modules/NestPinoModule.html":{},"classes/NewRecipeInput.html":{},"injectables/ParseIntPipe.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Recipe.html":{},"classes/RecipesArgs.html":{},"modules/RecipesModule.html":{},"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TerminusLogger.html":{},"injectables/TransformInterceptor.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":719,"title":{},"body":{"classes/RecipesArgs.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1081,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":963,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":979,"title":{},"body":{"dependencies.html":{}}}],["0.5",{"_index":474,"title":{},"body":{"controllers/HealthController.html":{}}}],["0.5.1",{"_index":962,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":904,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":898,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":899,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":915,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":900,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":920,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":932,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":931,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":1078,"title":{},"body":{"overview.html":{}}}],["1.6.8",{"_index":959,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":929,"title":{},"body":{"coverage.html":{}}}],["1/5",{"_index":934,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":262,"title":{},"body":{"controllers/CatsController.html":{},"injectables/CatsService.html":{},"injectables/ParseIntPipe.html":{}}}],["10.2.3",{"_index":956,"title":{},"body":{"dependencies.html":{}}}],["10.3.7",{"_index":949,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":928,"title":{},"body":{"coverage.html":{}}}],["1000",{"_index":217,"title":{},"body":{"injectables/CacheService.html":{},"modules/HealthModule.html":{}}}],["1024",{"_index":479,"title":{},"body":{"controllers/HealthController.html":{}}}],["11",{"_index":1074,"title":{},"body":{"overview.html":{}}}],["11.0.0",{"_index":976,"title":{},"body":{"dependencies.html":{}}}],["11.0.6",{"_index":966,"title":{},"body":{"dependencies.html":{}}}],["11.1.1",{"_index":939,"title":{},"body":{"dependencies.html":{}}}],["11.2.0",{"_index":969,"title":{},"body":{"dependencies.html":{}}}],["12.1.1",{"_index":951,"title":{},"body":{"dependencies.html":{}}}],["14",{"_index":1076,"title":{},"body":{"overview.html":{}}}],["14.0.0",{"_index":973,"title":{},"body":{"dependencies.html":{}}}],["16.8.1",{"_index":970,"title":{},"body":{"dependencies.html":{}}}],["17.12.2",{"_index":971,"title":{},"body":{"dependencies.html":{}}}],["2.8.4",{"_index":943,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":933,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":481,"title":{},"body":{"controllers/HealthController.html":{}}}],["25",{"_index":722,"title":{},"body":{"classes/RecipesArgs.html":{}}}],["250",{"_index":476,"title":{},"body":{"controllers/HealthController.html":{}}}],["255",{"_index":631,"title":{},"body":{"classes/NewRecipeInput.html":{}}}],["3",{"_index":1075,"title":{},"body":{"overview.html":{}}}],["3.0.0",{"_index":947,"title":{},"body":{"dependencies.html":{}}}],["3.0.2",{"_index":948,"title":{},"body":{"dependencies.html":{}}}],["3.2.1",{"_index":950,"title":{},"body":{"dependencies.html":{}}}],["3.6.7",{"_index":945,"title":{},"body":{"dependencies.html":{}}}],["3000",{"_index":483,"title":{},"body":{"controllers/HealthController.html":{}}}],["4.0.0",{"_index":974,"title":{},"body":{"dependencies.html":{}}}],["4.1.2",{"_index":961,"title":{},"body":{"dependencies.html":{}}}],["4.5.4",{"_index":972,"title":{},"body":{"dependencies.html":{}}}],["4.6.13",{"_index":977,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":1196,"title":{},"body":{"miscellaneous/variables.html":{}}}],["401",{"_index":1197,"title":{},"body":{"miscellaneous/variables.html":{}}}],["403",{"_index":1198,"title":{},"body":{"miscellaneous/variables.html":{}}}],["404",{"_index":1200,"title":{},"body":{"miscellaneous/variables.html":{}}}],["5",{"_index":1079,"title":{},"body":{"overview.html":{}}}],["5.1.0",{"_index":983,"title":{},"body":{"dependencies.html":{}}}],["5.11.0",{"_index":957,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":469,"title":{},"body":{"controllers/HealthController.html":{}}}],["500",{"_index":1201,"title":{},"body":{"miscellaneous/variables.html":{}}}],["503",{"_index":1202,"title":{},"body":{"miscellaneous/variables.html":{}}}],["504",{"_index":1204,"title":{},"body":{"miscellaneous/variables.html":{}}}],["7.0.2",{"_index":941,"title":{},"body":{"dependencies.html":{}}}],["7.3.1",{"_index":955,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":980,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":1077,"title":{},"body":{"overview.html":{}}}],["9.0.0",{"_index":975,"title":{},"body":{"dependencies.html":{}}}],["_",{"_index":557,"title":{},"body":{"modules/NestConfigModule.html":{}}}],["_configservice",{"_index":587,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["_request",{"_index":595,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["_response",{"_index":596,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["abortearly",{"_index":563,"title":{},"body":{"modules/NestConfigModule.html":{}}}],["above",{"_index":618,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["adapter",{"_index":1163,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addrecipe",{"_index":741,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["addrecipe(newrecipedata",{"_index":747,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["age",{"_index":222,"title":{},"body":{"interfaces/Cat.html":{},"injectables/CatsService.html":{},"classes/CreateCatDto.html":{}}}],["aliases",{"_index":1084,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allowed_hosts",{"_index":1135,"title":{},"body":{"miscellaneous/variables.html":{}}}],["allowedorigins",{"_index":1110,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amazing",{"_index":1052,"title":{},"body":{"index.html":{}}}],["amqps?):\\/\\/(?:[^:@]+:[^:@]+@)?[^/:?]+(?::\\d",{"_index":1208,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api",{"_index":593,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["api_url",{"_index":1125,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app",{"_index":279,"title":{},"body":{"interfaces/Config.html":{},"modules/NestConfigModule.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["app.config",{"_index":284,"title":{},"body":{"interfaces/Config.html":{},"modules/NestConfigModule.html":{}}}],["app.controller",{"_index":136,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":68,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_environments",{"_index":903,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["app_interceptor",{"_index":289,"title":{},"body":{"modules/CoreModule.html":{}}}],["app_name",{"_index":1132,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app_port",{"_index":1123,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app_prefix",{"_index":1127,"title":{},"body":{"miscellaneous/variables.html":{}}}],["appconfigvalidationschema",{"_index":546,"title":{},"body":{"modules/NestConfigModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":1191,"title":{},"body":{"miscellaneous/variables.html":{}}}],["applications",{"_index":1012,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":111,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":67,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["apputils",{"_index":917,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["args",{"_index":762,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["args('newrecipedata",{"_index":777,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["argstype",{"_index":725,"title":{},"body":{"classes/RecipesArgs.html":{}}}],["argumentmetadata",{"_index":650,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["argumentshost",{"_index":403,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["array",{"_index":892,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["ast",{"_index":352,"title":{},"body":{"classes/DateScalar.html":{}}}],["ast.kind",{"_index":364,"title":{},"body":{"classes/DateScalar.html":{}}}],["async",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/CacheService.html":{},"controllers/CatsController.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["author",{"_index":99,"title":{},"body":{"controllers/AppController.html":{},"index.html":{},"properties.html":{}}}],["authoremail",{"_index":96,"title":{},"body":{"controllers/AppController.html":{}}}],["autoschemafile",{"_index":155,"title":{},"body":{"modules/AppModule.html":{}}}],["available",{"_index":1072,"title":{},"body":{"modules.html":{}}}],["await",{"_index":215,"title":{},"body":{"injectables/CacheService.html":{},"controllers/CatsController.html":{},"injectables/PrismaService.html":{},"classes/RecipesResolver.html":{},"injectables/ValidationPipe.html":{}}}],["axios",{"_index":958,"title":{},"body":{"dependencies.html":{}}}],["b(\\d+)\\s*(ms|s|m|h|d)\\b",{"_index":1205,"title":{},"body":{"miscellaneous/variables.html":{}}}],["backend",{"_index":592,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["backers",{"_index":1053,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":409,"title":{},"body":{"classes/GlobalExceptionFilter.html":{},"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["badrequestexception('validation",{"_index":658,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["basepinooptions",{"_index":579,"title":{},"body":{"modules/NestPinoModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["body",{"_index":63,"title":{},"body":{"controllers/AppController.html":{},"controllers/CatsController.html":{},"modules/NestPinoModule.html":{}}}],["boolean",{"_index":170,"title":{},"body":{"interfaces/CacheModuleOptions.html":{},"modules/NestCacheModule.html":{},"classes/RecipesResolver.html":{},"guards/RolesGuard.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["bootstrap",{"_index":116,"title":{},"body":{"modules/AppModule.html":{},"modules/CatsModule.html":{},"modules/HealthModule.html":{},"modules/NestConfigModule.html":{},"modules/PostModule.html":{},"modules/PrismaModule.html":{},"modules/RecipesModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["breed",{"_index":223,"title":{},"body":{"interfaces/Cat.html":{},"injectables/CatsService.html":{},"classes/CreateCatDto.html":{}}}],["browse",{"_index":1070,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1068,"title":{},"body":{"modules.html":{}}}],["building",{"_index":1008,"title":{},"body":{"index.html":{}}}],["business",{"_index":794,"title":{},"body":{"injectables/RecipesService.html":{}}}],["cache",{"_index":280,"title":{},"body":{"interfaces/Config.html":{},"modules/NestConfigModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["cache.config",{"_index":286,"title":{},"body":{"interfaces/Config.html":{},"modules/NestConfigModule.html":{}}}],["cache.provider",{"_index":174,"title":{},"body":{"interfaces/CacheModuleOptions.html":{},"modules/NestCacheModule.html":{},"miscellaneous/variables.html":{}}}],["cache_provider",{"_index":1153,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cache_ttl",{"_index":1156,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cacheconfigvalidationschema",{"_index":548,"title":{},"body":{"modules/NestConfigModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["cached",{"_index":258,"title":{},"body":{"controllers/CatsController.html":{}}}],["cachemanager",{"_index":194,"title":{},"body":{"injectables/CacheService.html":{}}}],["cachemoduleclass",{"_index":176,"title":{},"body":{"interfaces/CacheModuleOptions.html":{},"modules/NestCacheModule.html":{}}}],["cachemoduleoptions",{"_index":166,"title":{"interfaces/CacheModuleOptions.html":{}},"body":{"interfaces/CacheModuleOptions.html":{},"modules/NestCacheModule.html":{},"coverage.html":{}}}],["cacheprovider",{"_index":173,"title":{},"body":{"interfaces/CacheModuleOptions.html":{},"modules/NestCacheModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["cacheservice",{"_index":186,"title":{"injectables/CacheService.html":{}},"body":{"injectables/CacheService.html":{},"controllers/CatsController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["cacheservice(keyv",{"_index":1182,"title":{},"body":{"miscellaneous/variables.html":{}}}],["callhandler",{"_index":374,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["canactivate",{"_index":813,"title":{},"body":{"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":817,"title":{},"body":{"guards/RolesGuard.html":{}}}],["case",{"_index":323,"title":{},"body":{"classes/CustomHttpException.html":{},"miscellaneous/variables.html":{}}}],["cat",{"_index":220,"title":{"interfaces/Cat.html":{}},"body":{"interfaces/Cat.html":{},"controllers/CatsController.html":{},"injectables/CatsService.html":{},"coverage.html":{}}}],["cat.dto",{"_index":251,"title":{},"body":{"controllers/CatsController.html":{}}}],["cat.dto.ts",{"_index":299,"title":{},"body":{"classes/CreateCatDto.html":{},"coverage.html":{}}}],["cat.dto.ts:11",{"_index":303,"title":{},"body":{"classes/CreateCatDto.html":{}}}],["cat.dto.ts:5",{"_index":304,"title":{},"body":{"classes/CreateCatDto.html":{}}}],["cat.dto.ts:8",{"_index":301,"title":{},"body":{"classes/CreateCatDto.html":{}}}],["catch",{"_index":394,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["catch(exception",{"_index":400,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["catcherror",{"_index":381,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["catcherror(err",{"_index":385,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["cats",{"_index":227,"title":{},"body":{"controllers/CatsController.html":{},"injectables/CatsService.html":{}}}],["cats.controller",{"_index":267,"title":{},"body":{"modules/CatsModule.html":{}}}],["cats.service",{"_index":249,"title":{},"body":{"controllers/CatsController.html":{},"modules/CatsModule.html":{}}}],["cats/cats.module",{"_index":138,"title":{},"body":{"modules/AppModule.html":{}}}],["catscontroller",{"_index":224,"title":{"controllers/CatsController.html":{}},"body":{"controllers/CatsController.html":{},"modules/CatsModule.html":{},"coverage.html":{}}}],["catsmodule",{"_index":122,"title":{"modules/CatsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CatsModule.html":{},"modules.html":{},"overview.html":{}}}],["catsservice",{"_index":248,"title":{"injectables/CatsService.html":{}},"body":{"controllers/CatsController.html":{},"modules/CatsModule.html":{},"injectables/CatsService.html":{},"coverage.html":{},"overview.html":{}}}],["censor",{"_index":604,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["chalk",{"_index":960,"title":{},"body":{"dependencies.html":{}}}],["check",{"_index":444,"title":{},"body":{"controllers/HealthController.html":{}}}],["checking",{"_index":1186,"title":{},"body":{"miscellaneous/variables.html":{}}}],["class",{"_index":78,"title":{"classes/CreateCatDto.html":{},"classes/CustomHttpException.html":{},"classes/DateScalar.html":{},"classes/GlobalExceptionFilter.html":{},"classes/HttpError.html":{},"classes/NewRecipeInput.html":{},"classes/Recipe.html":{},"classes/RecipesArgs.html":{},"classes/RecipesResolver.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"interfaces/CacheModuleOptions.html":{},"injectables/CacheService.html":{},"controllers/CatsController.html":{},"modules/CatsModule.html":{},"injectables/CatsService.html":{},"modules/CoreModule.html":{},"classes/CreateCatDto.html":{},"classes/CustomHttpException.html":{},"classes/DateScalar.html":{},"injectables/ExceptionInterceptor.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/HttpError.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"modules/NestCacheModule.html":{},"modules/NestConfigModule.html":{},"modules/NestPinoModule.html":{},"classes/NewRecipeInput.html":{},"injectables/ParseIntPipe.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Recipe.html":{},"classes/RecipesArgs.html":{},"modules/RecipesModule.html":{},"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TerminusLogger.html":{},"injectables/TransformInterceptor.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":297,"title":{},"body":{"classes/CreateCatDto.html":{},"classes/CustomHttpException.html":{},"classes/DateScalar.html":{},"classes/GlobalExceptionFilter.html":{},"classes/HttpError.html":{},"classes/NewRecipeInput.html":{},"classes/Recipe.html":{},"classes/RecipesArgs.html":{},"classes/RecipesResolver.html":{},"overview.html":{}}}],["client",{"_index":361,"title":{},"body":{"classes/DateScalar.html":{}}}],["client_url",{"_index":1134,"title":{},"body":{"miscellaneous/variables.html":{}}}],["clienturl",{"_index":1108,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cluster_appmodule",{"_index":119,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":120,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":121,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_catsmodule",{"_index":264,"title":{},"body":{"modules/CatsModule.html":{},"overview.html":{}}}],["cluster_catsmodule_providers",{"_index":265,"title":{},"body":{"modules/CatsModule.html":{},"overview.html":{}}}],["cluster_healthmodule",{"_index":486,"title":{},"body":{"modules/HealthModule.html":{},"overview.html":{}}}],["cluster_healthmodule_imports",{"_index":487,"title":{},"body":{"modules/HealthModule.html":{},"overview.html":{}}}],["cluster_nestconfigmodule",{"_index":539,"title":{},"body":{"modules/NestConfigModule.html":{},"overview.html":{}}}],["cluster_nestconfigmodule_exports",{"_index":540,"title":{},"body":{"modules/NestConfigModule.html":{},"overview.html":{}}}],["cluster_postmodule",{"_index":660,"title":{},"body":{"modules/PostModule.html":{},"overview.html":{}}}],["cluster_postmodule_exports",{"_index":662,"title":{},"body":{"modules/PostModule.html":{},"overview.html":{}}}],["cluster_postmodule_imports",{"_index":661,"title":{},"body":{"modules/PostModule.html":{}}}],["cluster_postmodule_providers",{"_index":663,"title":{},"body":{"modules/PostModule.html":{},"overview.html":{}}}],["cluster_prismamodule",{"_index":698,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_exports",{"_index":700,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_providers",{"_index":699,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_recipesmodule",{"_index":732,"title":{},"body":{"modules/RecipesModule.html":{},"overview.html":{}}}],["cluster_recipesmodule_providers",{"_index":733,"title":{},"body":{"modules/RecipesModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":844,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":847,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_imports",{"_index":845,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":846,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["code",{"_index":309,"title":{},"body":{"classes/CustomHttpException.html":{},"classes/GlobalExceptionFilter.html":{},"classes/HttpError.html":{}}}],["colorize",{"_index":620,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["common/decorators/roles.decorator",{"_index":242,"title":{},"body":{"controllers/CatsController.html":{}}}],["common/errors",{"_index":414,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["common/exception",{"_index":413,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["common/guards/roles.guard",{"_index":244,"title":{},"body":{"controllers/CatsController.html":{}}}],["common/helpers",{"_index":545,"title":{},"body":{"modules/NestConfigModule.html":{},"modules/NestPinoModule.html":{}}}],["common/pipes/parse",{"_index":246,"title":{},"body":{"controllers/CatsController.html":{}}}],["common/scalars/date.scalar",{"_index":736,"title":{},"body":{"modules/RecipesModule.html":{}}}],["compliant",{"_index":606,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["compose",{"_index":1025,"title":{},"body":{"index.html":{}}}],["config",{"_index":277,"title":{"interfaces/Config.html":{}},"body":{"interfaces/Config.html":{},"coverage.html":{}}}],["configmodule",{"_index":542,"title":{},"body":{"modules/NestConfigModule.html":{},"modules/NestPinoModule.html":{}}}],["configmodule.forroot",{"_index":552,"title":{},"body":{"modules/NestConfigModule.html":{}}}],["configservice",{"_index":192,"title":{},"body":{"injectables/CacheService.html":{},"classes/GlobalExceptionFilter.html":{},"modules/NestConfigModule.html":{},"modules/NestPinoModule.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["configservice.get('cache",{"_index":1158,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configservice.get('redis",{"_index":1160,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configservice.get('sqlite",{"_index":1159,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configtype",{"_index":283,"title":{},"body":{"interfaces/Config.html":{}}}],["configurablemodulebuilder",{"_index":171,"title":{},"body":{"interfaces/CacheModuleOptions.html":{},"modules/NestCacheModule.html":{}}}],["configurablemodulebuilder().build",{"_index":179,"title":{},"body":{"interfaces/CacheModuleOptions.html":{},"modules/NestCacheModule.html":{},"miscellaneous/variables.html":{}}}],["configurablemoduleclass",{"_index":175,"title":{},"body":{"interfaces/CacheModuleOptions.html":{},"modules/NestCacheModule.html":{}}}],["connect",{"_index":100,"title":{},"body":{"controllers/AppController.html":{}}}],["connection",{"_index":1180,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console",{"_index":619,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["console.log('before",{"_index":531,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["console.log(`after",{"_index":534,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["console.log(`request",{"_index":527,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["consolelogger",{"_index":831,"title":{},"body":{"injectables/TerminusLogger.html":{}}}],["const",{"_index":97,"title":{},"body":{"controllers/AppController.html":{},"interfaces/CacheModuleOptions.html":{},"controllers/CatsController.html":{},"classes/CustomHttpException.html":{},"classes/GlobalExceptionFilter.html":{},"classes/HttpError.html":{},"injectables/LoggingInterceptor.html":{},"modules/NestCacheModule.html":{},"modules/NestConfigModule.html":{},"modules/NestPinoModule.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostService.html":{},"classes/RecipesResolver.html":{},"guards/RolesGuard.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":79,"title":{},"body":{"controllers/AppController.html":{},"injectables/CacheService.html":{},"controllers/CatsController.html":{},"classes/CustomHttpException.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/HealthController.html":{},"classes/HttpError.html":{},"injectables/PostService.html":{},"classes/RecipesResolver.html":{},"guards/RolesGuard.html":{},"injectables/UserService.html":{}}}],["constructor(cachemanager",{"_index":190,"title":{},"body":{"injectables/CacheService.html":{}}}],["constructor(configservice",{"_index":397,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["constructor(error",{"_index":509,"title":{},"body":{"classes/HttpError.html":{}}}],["constructor(message",{"_index":310,"title":{},"body":{"classes/CustomHttpException.html":{}}}],["constructor(prisma",{"_index":670,"title":{},"body":{"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["constructor(private",{"_index":417,"title":{},"body":{"classes/GlobalExceptionFilter.html":{},"injectables/PostService.html":{},"classes/RecipesResolver.html":{},"guards/RolesGuard.html":{},"injectables/UserService.html":{}}}],["constructor(recipesservice",{"_index":745,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["constructor(reflector",{"_index":814,"title":{},"body":{"guards/RolesGuard.html":{}}}],["contains",{"_index":94,"title":{},"body":{"controllers/AppController.html":{}}}],["content",{"_index":95,"title":{},"body":{"controllers/AppController.html":{}}}],["context",{"_index":376,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"modules/NestPinoModule.html":{},"classes/RecipesResolver.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TerminusLogger.html":{},"injectables/TransformInterceptor.html":{}}}],["context('pubsub",{"_index":778,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["context.gethandler",{"_index":820,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":821,"title":{},"body":{"guards/RolesGuard.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/CatsController.html":{},"controllers/HealthController.html":{}},"body":{"controllers/AppController.html":{},"controllers/CatsController.html":{},"controllers/HealthController.html":{},"coverage.html":{}}}],["controller('cats",{"_index":254,"title":{},"body":{"controllers/CatsController.html":{}}}],["controller('health",{"_index":456,"title":{},"body":{"controllers/HealthController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/CatsController.html":{},"modules/CatsModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"overview.html":{}}}],["core/cache",{"_index":150,"title":{},"body":{"modules/AppModule.html":{},"controllers/CatsController.html":{}}}],["core/config",{"_index":148,"title":{},"body":{"modules/AppModule.html":{}}}],["core/core.module",{"_index":137,"title":{},"body":{"modules/AppModule.html":{}}}],["core/pino",{"_index":149,"title":{},"body":{"modules/AppModule.html":{}}}],["coremodule",{"_index":123,"title":{"modules/CoreModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CoreModule.html":{},"modules.html":{},"overview.html":{}}}],["coverage",{"_index":894,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":228,"title":{},"body":{"controllers/CatsController.html":{},"injectables/CatsService.html":{},"injectables/RecipesService.html":{},"index.html":{}}}],["create(@body",{"_index":256,"title":{},"body":{"controllers/CatsController.html":{}}}],["create(cat",{"_index":269,"title":{},"body":{"injectables/CatsService.html":{}}}],["create(createcatdto",{"_index":231,"title":{},"body":{"controllers/CatsController.html":{}}}],["create(data",{"_index":790,"title":{},"body":{"injectables/RecipesService.html":{}}}],["createcatdto",{"_index":232,"title":{"classes/CreateCatDto.html":{}},"body":{"controllers/CatsController.html":{},"classes/CreateCatDto.html":{},"coverage.html":{}}}],["createdraft",{"_index":10,"title":{},"body":{"controllers/AppController.html":{}}}],["createdraft(postdata",{"_index":18,"title":{},"body":{"controllers/AppController.html":{}}}],["createlogger",{"_index":927,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["createpost",{"_index":667,"title":{},"body":{"injectables/PostService.html":{}}}],["createpost(data",{"_index":672,"title":{},"body":{"injectables/PostService.html":{}}}],["creates",{"_index":1001,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createuser",{"_index":851,"title":{},"body":{"injectables/UserService.html":{}}}],["createuser(data",{"_index":856,"title":{},"body":{"injectables/UserService.html":{}}}],["creationdate",{"_index":710,"title":{},"body":{"classes/Recipe.html":{}}}],["ctx",{"_index":418,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["ctx.getrequest",{"_index":422,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["ctx.getresponse",{"_index":421,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["cursor",{"_index":689,"title":{},"body":{"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["custom",{"_index":346,"title":{},"body":{"classes/DateScalar.html":{}}}],["customexception",{"_index":425,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["customexception.code",{"_index":429,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["customexception.getstatus",{"_index":426,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["customhttpexception",{"_index":306,"title":{"classes/CustomHttpException.html":{}},"body":{"classes/CustomHttpException.html":{},"classes/GlobalExceptionFilter.html":{},"coverage.html":{}}}],["customprops",{"_index":594,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["customscalar",{"_index":340,"title":{},"body":{"classes/DateScalar.html":{}}}],["d._",{"_index":1212,"title":{},"body":{"miscellaneous/variables.html":{}}}],["data",{"_index":105,"title":{},"body":{"controllers/AppController.html":{},"injectables/PostService.html":{},"injectables/RecipesService.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserService.html":{}}}],["database_connection_unavailable",{"_index":995,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["date",{"_index":345,"title":{},"body":{"classes/DateScalar.html":{},"classes/Recipe.html":{}}}],["date(ast.value",{"_index":366,"title":{},"body":{"classes/DateScalar.html":{}}}],["date(date.now()).toisostring",{"_index":591,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["date(value",{"_index":360,"title":{},"body":{"classes/DateScalar.html":{}}}],["date.now",{"_index":276,"title":{},"body":{"injectables/CatsService.html":{},"injectables/LoggingInterceptor.html":{}}}],["datescalar",{"_index":337,"title":{"classes/DateScalar.html":{}},"body":{"classes/DateScalar.html":{},"modules/RecipesModule.html":{},"coverage.html":{}}}],["debug",{"_index":565,"title":{},"body":{"modules/NestConfigModule.html":{}}}],["declarations",{"_index":115,"title":{},"body":{"modules/AppModule.html":{},"modules/CatsModule.html":{},"modules/HealthModule.html":{},"modules/NestConfigModule.html":{},"modules/PostModule.html":{},"modules/PrismaModule.html":{},"modules/RecipesModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decorators",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"controllers/CatsController.html":{},"classes/CreateCatDto.html":{},"controllers/HealthController.html":{},"classes/NewRecipeInput.html":{},"classes/Recipe.html":{},"classes/RecipesArgs.html":{},"classes/RecipesResolver.html":{}}}],["default",{"_index":272,"title":{},"body":{"injectables/CatsService.html":{},"classes/CustomHttpException.html":{},"classes/DateScalar.html":{},"classes/GlobalExceptionFilter.html":{},"classes/RecipesArgs.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/CacheService.html":{},"controllers/CatsController.html":{},"injectables/CatsService.html":{},"classes/CreateCatDto.html":{},"classes/CustomHttpException.html":{},"classes/DateScalar.html":{},"injectables/ExceptionInterceptor.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/HealthController.html":{},"classes/HttpError.html":{},"interfaces/ICacheStore.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"modules/NestCacheModule.html":{},"classes/NewRecipeInput.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"classes/Recipe.html":{},"classes/RecipesArgs.html":{},"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{},"guards/RolesGuard.html":{},"injectables/TerminusLogger.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{}}}],["del",{"_index":188,"title":{},"body":{"injectables/CacheService.html":{}}}],["del(key",{"_index":195,"title":{},"body":{"injectables/CacheService.html":{}}}],["delete",{"_index":65,"title":{},"body":{"controllers/AppController.html":{}}}],["delete('post/:id",{"_index":34,"title":{},"body":{"controllers/AppController.html":{}}}],["deletepost",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"injectables/PostService.html":{}}}],["deletepost(@param('id",{"_index":106,"title":{},"body":{"controllers/AppController.html":{}}}],["deletepost(id",{"_index":32,"title":{},"body":{"controllers/AppController.html":{}}}],["deletepost(where",{"_index":675,"title":{},"body":{"injectables/PostService.html":{}}}],["deleteuser",{"_index":852,"title":{},"body":{"injectables/UserService.html":{}}}],["deleteuser(where",{"_index":859,"title":{},"body":{"injectables/UserService.html":{}}}],["demonstration",{"_index":798,"title":{},"body":{"injectables/RecipesService.html":{}}}],["dependencies",{"_index":113,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/CatsModule.html":{},"modules/HealthModule.html":{},"modules/NestConfigModule.html":{},"modules/PostModule.html":{},"modules/PrismaModule.html":{},"modules/RecipesModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":341,"title":{},"body":{"classes/DateScalar.html":{},"classes/NewRecipeInput.html":{},"classes/Recipe.html":{},"index.html":{},"properties.html":{}}}],["destination",{"_index":612,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["determine",{"_index":1190,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dev",{"_index":1139,"title":{},"body":{"miscellaneous/variables.html":{}}}],["development",{"_index":1030,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["disk",{"_index":460,"title":{},"body":{"controllers/HealthController.html":{}}}],["diskhealthindicator",{"_index":451,"title":{},"body":{"controllers/HealthController.html":{}}}],["doc",{"_index":624,"title":{},"body":{"modules/NestPinoModule.html":{},"miscellaneous/variables.html":{}}}],["docker",{"_index":1024,"title":{},"body":{"index.html":{}}}],["docs",{"_index":464,"title":{},"body":{"controllers/HealthController.html":{}}}],["documentation",{"_index":895,"title":{},"body":{"coverage.html":{}}}],["dotenv",{"_index":964,"title":{},"body":{"dependencies.html":{}}}],["driver",{"_index":154,"title":{},"body":{"modules/AppModule.html":{}}}],["drunning",{"_index":1029,"title":{},"body":{"index.html":{}}}],["dto/create",{"_index":250,"title":{},"body":{"controllers/CatsController.html":{}}}],["dto/new",{"_index":767,"title":{},"body":{"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{}}}],["dto/recipes.args",{"_index":769,"title":{},"body":{"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{}}}],["dynamicmodule",{"_index":172,"title":{},"body":{"interfaces/CacheModuleOptions.html":{},"modules/NestCacheModule.html":{}}}],["e2e",{"_index":1041,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":1009,"title":{},"body":{"index.html":{}}}],["email",{"_index":101,"title":{},"body":{"controllers/AppController.html":{}}}],["enabledebugmessages",{"_index":1149,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enumerations",{"_index":985,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":1026,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["env/.env.dev",{"_index":1027,"title":{},"body":{"index.html":{}}}],["envfile",{"_index":919,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["envfilepath",{"_index":553,"title":{},"body":{"modules/NestConfigModule.html":{}}}],["environment",{"_index":1187,"title":{},"body":{"miscellaneous/variables.html":{}}}],["error",{"_index":401,"title":{},"body":{"classes/GlobalExceptionFilter.html":{},"classes/HttpError.html":{},"modules/NestPinoModule.html":{},"injectables/TerminusLogger.html":{},"miscellaneous/variables.html":{}}}],["error(message",{"_index":832,"title":{},"body":{"injectables/TerminusLogger.html":{}}}],["errorcodetostatusmap",{"_index":315,"title":{},"body":{"classes/CustomHttpException.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["errorcodetostatusmap[code",{"_index":318,"title":{},"body":{"classes/CustomHttpException.html":{}}}],["errorlogstyle",{"_index":500,"title":{},"body":{"modules/HealthModule.html":{}}}],["errors",{"_index":316,"title":{},"body":{"classes/CustomHttpException.html":{},"modules/NestPinoModule.html":{},"injectables/ValidationPipe.html":{}}}],["errors.length",{"_index":891,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["example",{"_index":1018,"title":{},"body":{"index.html":{}}}],["exceed",{"_index":468,"title":{},"body":{"controllers/HealthController.html":{}}}],["exception",{"_index":386,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"classes/GlobalExceptionFilter.html":{}}}],["exception.filter.ts",{"_index":391,"title":{},"body":{"classes/GlobalExceptionFilter.html":{},"coverage.html":{}}}],["exception.filter.ts:19",{"_index":398,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["exception.filter.ts:23",{"_index":404,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["exception.filter.ts:63",{"_index":408,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["exception.getstatus",{"_index":430,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["exception.message",{"_index":428,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["exception.stack",{"_index":440,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["exceptionfilter",{"_index":392,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["exceptioninterceptor",{"_index":368,"title":{"injectables/ExceptionInterceptor.html":{}},"body":{"injectables/ExceptionInterceptor.html":{},"coverage.html":{}}}],["exclude",{"_index":621,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["executioncontext",{"_index":372,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TransformInterceptor.html":{}}}],["exhaustive",{"_index":1175,"title":{},"body":{"miscellaneous/variables.html":{}}}],["expand",{"_index":965,"title":{},"body":{"dependencies.html":{}}}],["expandvariables",{"_index":559,"title":{},"body":{"modules/NestConfigModule.html":{}}}],["export",{"_index":77,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"interfaces/CacheModuleOptions.html":{},"injectables/CacheService.html":{},"interfaces/Cat.html":{},"controllers/CatsController.html":{},"modules/CatsModule.html":{},"injectables/CatsService.html":{},"interfaces/Config.html":{},"modules/CoreModule.html":{},"classes/CreateCatDto.html":{},"classes/CustomHttpException.html":{},"classes/DateScalar.html":{},"injectables/ExceptionInterceptor.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/HttpError.html":{},"interfaces/ICacheStore.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"modules/NestCacheModule.html":{},"modules/NestConfigModule.html":{},"modules/NestPinoModule.html":{},"classes/NewRecipeInput.html":{},"injectables/ParseIntPipe.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Recipe.html":{},"classes/RecipesArgs.html":{},"modules/RecipesModule.html":{},"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TerminusLogger.html":{},"injectables/TransformInterceptor.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{}}}],["exports",{"_index":118,"title":{},"body":{"modules/AppModule.html":{},"interfaces/CacheModuleOptions.html":{},"modules/CatsModule.html":{},"modules/HealthModule.html":{},"modules/NestCacheModule.html":{},"modules/NestConfigModule.html":{},"modules/NestPinoModule.html":{},"modules/PostModule.html":{},"modules/PrismaModule.html":{},"modules/RecipesModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["express",{"_index":953,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":180,"title":{},"body":{"interfaces/CacheModuleOptions.html":{},"classes/CustomHttpException.html":{},"classes/HttpError.html":{},"modules/NestCacheModule.html":{},"injectables/PrismaService.html":{},"injectables/TerminusLogger.html":{}}}],["extra",{"_index":968,"title":{},"body":{"dependencies.html":{}}}],["f]{32}@o\\d+\\.ingest\\.sentry\\.io\\/\\d",{"_index":1211,"title":{},"body":{"miscellaneous/variables.html":{}}}],["failed",{"_index":659,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["false",{"_index":499,"title":{},"body":{"modules/HealthModule.html":{},"modules/NestPinoModule.html":{},"miscellaneous/variables.html":{}}}],["fastify",{"_index":416,"title":{},"body":{"classes/GlobalExceptionFilter.html":{},"dependencies.html":{}}}],["fastify/helmet",{"_index":938,"title":{},"body":{"dependencies.html":{}}}],["fastify/static",{"_index":940,"title":{},"body":{"dependencies.html":{}}}],["fastifyreply",{"_index":415,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["fastifyrequest",{"_index":407,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["field",{"_index":637,"title":{},"body":{"classes/NewRecipeInput.html":{},"classes/Recipe.html":{},"classes/RecipesArgs.html":{}}}],["field()@maxlength(30",{"_index":635,"title":{},"body":{"classes/NewRecipeInput.html":{}}}],["field(type",{"_index":633,"title":{},"body":{"classes/NewRecipeInput.html":{},"classes/Recipe.html":{},"classes/RecipesArgs.html":{}}}],["field({nullable",{"_index":629,"title":{},"body":{"classes/NewRecipeInput.html":{},"classes/Recipe.html":{}}}],["fields",{"_index":572,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"interfaces/CacheModuleOptions.html":{},"injectables/CacheService.html":{},"interfaces/Cat.html":{},"controllers/CatsController.html":{},"modules/CatsModule.html":{},"injectables/CatsService.html":{},"interfaces/Config.html":{},"modules/CoreModule.html":{},"classes/CreateCatDto.html":{},"classes/CustomHttpException.html":{},"classes/DateScalar.html":{},"injectables/ExceptionInterceptor.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/HttpError.html":{},"interfaces/ICacheStore.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"modules/NestCacheModule.html":{},"modules/NestConfigModule.html":{},"modules/NestPinoModule.html":{},"classes/NewRecipeInput.html":{},"injectables/ParseIntPipe.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Recipe.html":{},"classes/RecipesArgs.html":{},"modules/RecipesModule.html":{},"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TerminusLogger.html":{},"injectables/TransformInterceptor.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["filter(_",{"_index":556,"title":{},"body":{"modules/NestConfigModule.html":{}}}],["findall",{"_index":229,"title":{},"body":{"controllers/CatsController.html":{},"injectables/CatsService.html":{},"interfaces/ICacheStore.html":{},"injectables/RecipesService.html":{}}}],["findall(recipesargs",{"_index":800,"title":{},"body":{"injectables/RecipesService.html":{}}}],["findone",{"_index":230,"title":{},"body":{"controllers/CatsController.html":{}}}],["findone(id",{"_index":236,"title":{},"body":{"controllers/CatsController.html":{}}}],["findone:${string",{"_index":518,"title":{},"body":{"interfaces/ICacheStore.html":{}}}],["findonebyid",{"_index":788,"title":{},"body":{"injectables/RecipesService.html":{}}}],["findonebyid(id",{"_index":802,"title":{},"body":{"injectables/RecipesService.html":{}}}],["followed",{"_index":1131,"title":{},"body":{"miscellaneous/variables.html":{}}}],["forbiddenexception",{"_index":410,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["forbidunknownvalues",{"_index":1147,"title":{},"body":{"miscellaneous/variables.html":{}}}],["foundational",{"_index":1021,"title":{},"body":{"index.html":{}}}],["framework",{"_index":1007,"title":{},"body":{"index.html":{}}}],["fs",{"_index":967,"title":{},"body":{"dependencies.html":{}}}],["fse.ensurefilesync(uri",{"_index":1169,"title":{},"body":{"miscellaneous/variables.html":{}}}],["full",{"_index":470,"title":{},"body":{"controllers/HealthController.html":{}}}],["function",{"_index":525,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["functions",{"_index":998,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["gateway_timeout",{"_index":996,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["gb",{"_index":477,"title":{},"body":{"controllers/HealthController.html":{}}}],["gdpr",{"_index":605,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["get('/res",{"_index":49,"title":{},"body":{"controllers/AppController.html":{}}}],["get(':id",{"_index":237,"title":{},"body":{"controllers/CatsController.html":{}}}],["get('feed",{"_index":46,"title":{},"body":{"controllers/AppController.html":{}}}],["get('filtered",{"_index":38,"title":{},"body":{"controllers/AppController.html":{}}}],["get('post/:id",{"_index":44,"title":{},"body":{"controllers/AppController.html":{}}}],["get()@healthcheck",{"_index":445,"title":{},"body":{"controllers/HealthController.html":{}}}],["get(key",{"_index":199,"title":{},"body":{"injectables/CacheService.html":{}}}],["getdefaultcodebystatus",{"_index":320,"title":{},"body":{"classes/CustomHttpException.html":{},"classes/GlobalExceptionFilter.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getdefaultcodebystatus(status",{"_index":433,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["getenvfile",{"_index":1184,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getfilteredposts",{"_index":12,"title":{},"body":{"controllers/AppController.html":{}}}],["getfilteredposts(searchstring",{"_index":37,"title":{},"body":{"controllers/AppController.html":{}}}],["gethello",{"_index":13,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getpostbyid",{"_index":14,"title":{},"body":{"controllers/AppController.html":{}}}],["getpostbyid(@param('id",{"_index":86,"title":{},"body":{"controllers/AppController.html":{}}}],["getpostbyid(id",{"_index":43,"title":{},"body":{"controllers/AppController.html":{}}}],["getpublishedposts",{"_index":15,"title":{},"body":{"controllers/AppController.html":{}}}],["getting",{"_index":1003,"title":{"index.html":{}},"body":{}}],["global",{"_index":152,"title":{},"body":{"modules/AppModule.html":{},"interfaces/CacheModuleOptions.html":{},"modules/NestCacheModule.html":{}}}],["globalexceptionfilter",{"_index":389,"title":{"classes/GlobalExceptionFilter.html":{}},"body":{"classes/GlobalExceptionFilter.html":{},"coverage.html":{}}}],["gracefulshutdowntimeoutms",{"_index":505,"title":{},"body":{"modules/HealthModule.html":{}}}],["graph",{"_index":1071,"title":{},"body":{"modules.html":{}}}],["graphiql",{"_index":158,"title":{},"body":{"modules/AppModule.html":{}}}],["graphql",{"_index":358,"title":{},"body":{"classes/DateScalar.html":{},"dependencies.html":{}}}],["graphqlmodule",{"_index":141,"title":{},"body":{"modules/AppModule.html":{}}}],["graphqlmodule.forroot",{"_index":153,"title":{},"body":{"modules/AppModule.html":{}}}],["grow",{"_index":1048,"title":{},"body":{"index.html":{}}}],["guard",{"_index":810,"title":{"guards/RolesGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":811,"title":{},"body":{"guards/RolesGuard.html":{}}}],["handle",{"_index":383,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"injectables/LoggingInterceptor.html":{}}}],["hasrole",{"_index":823,"title":{},"body":{"guards/RolesGuard.html":{}}}],["health",{"_index":443,"title":{},"body":{"controllers/HealthController.html":{}}}],["health.controller",{"_index":493,"title":{},"body":{"modules/HealthModule.html":{}}}],["health/health.module",{"_index":147,"title":{},"body":{"modules/AppModule.html":{}}}],["healthcheck",{"_index":449,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckservice",{"_index":447,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcontroller",{"_index":441,"title":{"controllers/HealthController.html":{}},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"coverage.html":{}}}],["healthmodule",{"_index":124,"title":{"modules/HealthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HealthModule.html":{},"modules.html":{},"overview.html":{}}}],["hello",{"_index":163,"title":{},"body":{"injectables/AppService.html":{},"injectables/CatsService.html":{}}}],["helperservice",{"_index":544,"title":{},"body":{"modules/NestConfigModule.html":{},"modules/NestPinoModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["helperservice.getenvfile",{"_index":554,"title":{},"body":{"modules/NestConfigModule.html":{}}}],["helperservice.isdev",{"_index":1150,"title":{},"body":{"miscellaneous/variables.html":{}}}],["helperservice.isprod",{"_index":564,"title":{},"body":{"modules/NestConfigModule.html":{},"modules/NestPinoModule.html":{}}}],["here",{"_index":796,"title":{},"body":{"injectables/RecipesService.html":{},"injectables/TerminusLogger.html":{},"index.html":{}}}],["host",{"_index":402,"title":{},"body":{"classes/GlobalExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["host.switchtohttp",{"_index":419,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["http",{"_index":457,"title":{},"body":{"controllers/HealthController.html":{},"classes/HttpError.html":{},"modules/NestPinoModule.html":{},"dependencies.html":{}}}],["httperror",{"_index":506,"title":{"classes/HttpError.html":{}},"body":{"classes/HttpError.html":{},"coverage.html":{}}}],["httperrorcode",{"_index":311,"title":{},"body":{"classes/CustomHttpException.html":{},"classes/GlobalExceptionFilter.html":{},"classes/HttpError.html":{},"miscellaneous/enumerations.html":{}}}],["httperrorcode.database_connection_unavailable",{"_index":335,"title":{},"body":{"classes/CustomHttpException.html":{},"miscellaneous/variables.html":{}}}],["httperrorcode.gateway_timeout",{"_index":1203,"title":{},"body":{"miscellaneous/variables.html":{}}}],["httperrorcode.internal_server_error",{"_index":333,"title":{},"body":{"classes/CustomHttpException.html":{},"classes/GlobalExceptionFilter.html":{},"classes/HttpError.html":{},"miscellaneous/variables.html":{}}}],["httperrorcode.not_found",{"_index":331,"title":{},"body":{"classes/CustomHttpException.html":{},"miscellaneous/variables.html":{}}}],["httperrorcode.restricted_resource",{"_index":329,"title":{},"body":{"classes/CustomHttpException.html":{},"miscellaneous/variables.html":{}}}],["httperrorcode.unauthorized",{"_index":327,"title":{},"body":{"classes/CustomHttpException.html":{},"miscellaneous/variables.html":{}}}],["httperrorcode.unauthorized_share",{"_index":1199,"title":{},"body":{"miscellaneous/variables.html":{}}}],["httperrorcode.unknown_error_code",{"_index":336,"title":{},"body":{"classes/CustomHttpException.html":{},"miscellaneous/variables.html":{}}}],["httperrorcode.validation_error",{"_index":325,"title":{},"body":{"classes/CustomHttpException.html":{},"miscellaneous/variables.html":{}}}],["httpexception",{"_index":308,"title":{},"body":{"classes/CustomHttpException.html":{},"injectables/ExceptionInterceptor.html":{},"classes/GlobalExceptionFilter.html":{}}}],["httphealthindicator",{"_index":448,"title":{},"body":{"controllers/HealthController.html":{}}}],["httpmodule",{"_index":491,"title":{},"body":{"modules/HealthModule.html":{}}}],["https://docs.nestjs.com",{"_index":465,"title":{},"body":{"controllers/HealthController.html":{}}}],["https://docs.nestjs.com/recipes/terminus#graceful",{"_index":502,"title":{},"body":{"modules/HealthModule.html":{}}}],["https://nestjs.com",{"_index":1064,"title":{},"body":{"index.html":{}}}],["https:\\/\\/[\\da",{"_index":1210,"title":{},"body":{"miscellaneous/variables.html":{}}}],["httpstatus",{"_index":314,"title":{},"body":{"classes/CustomHttpException.html":{},"injectables/ExceptionInterceptor.html":{},"classes/GlobalExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["httpstatus.bad_gateway",{"_index":388,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["httpstatus.bad_request",{"_index":324,"title":{},"body":{"classes/CustomHttpException.html":{},"miscellaneous/variables.html":{}}}],["httpstatus.forbidden",{"_index":328,"title":{},"body":{"classes/CustomHttpException.html":{},"miscellaneous/variables.html":{}}}],["httpstatus.internal_server_error",{"_index":332,"title":{},"body":{"classes/CustomHttpException.html":{},"classes/GlobalExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["httpstatus.not_found",{"_index":330,"title":{},"body":{"classes/CustomHttpException.html":{},"miscellaneous/variables.html":{}}}],["httpstatus.service_unavailable",{"_index":334,"title":{},"body":{"classes/CustomHttpException.html":{},"miscellaneous/variables.html":{}}}],["httpstatus.unauthorized",{"_index":326,"title":{},"body":{"classes/CustomHttpException.html":{},"miscellaneous/variables.html":{}}}],["icachestore",{"_index":208,"title":{"interfaces/ICacheStore.html":{}},"body":{"injectables/CacheService.html":{},"interfaces/ICacheStore.html":{},"coverage.html":{}}}],["icachestore[tkey",{"_index":212,"title":{},"body":{"injectables/CacheService.html":{}}}],["id",{"_index":36,"title":{},"body":{"controllers/AppController.html":{},"controllers/CatsController.html":{},"classes/Recipe.html":{},"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{}}}],["identifier",{"_index":896,"title":{},"body":{"coverage.html":{}}}],["ignore",{"_index":581,"title":{},"body":{"modules/NestPinoModule.html":{},"miscellaneous/variables.html":{}}}],["ihttperror",{"_index":508,"title":{},"body":{"classes/HttpError.html":{},"miscellaneous/typealiases.html":{}}}],["image",{"_index":1023,"title":{},"body":{"index.html":{}}}],["implements",{"_index":339,"title":{},"body":{"classes/DateScalar.html":{},"injectables/ExceptionInterceptor.html":{},"classes/GlobalExceptionFilter.html":{},"classes/HttpError.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ParseIntPipe.html":{},"injectables/PrismaService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TransformInterceptor.html":{},"injectables/ValidationPipe.html":{}}}],["import",{"_index":60,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"interfaces/CacheModuleOptions.html":{},"injectables/CacheService.html":{},"controllers/CatsController.html":{},"modules/CatsModule.html":{},"injectables/CatsService.html":{},"interfaces/Config.html":{},"modules/CoreModule.html":{},"classes/CreateCatDto.html":{},"classes/CustomHttpException.html":{},"classes/DateScalar.html":{},"injectables/ExceptionInterceptor.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/HttpError.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"modules/NestCacheModule.html":{},"modules/NestConfigModule.html":{},"modules/NestPinoModule.html":{},"classes/NewRecipeInput.html":{},"injectables/ParseIntPipe.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Recipe.html":{},"classes/RecipesArgs.html":{},"modules/RecipesModule.html":{},"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TerminusLogger.html":{},"injectables/TransformInterceptor.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{}}}],["imports",{"_index":135,"title":{},"body":{"modules/AppModule.html":{},"modules/HealthModule.html":{},"modules/NestConfigModule.html":{},"modules/NestPinoModule.html":{},"modules/PostModule.html":{},"modules/UserModule.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"interfaces/CacheModuleOptions.html":{},"injectables/CacheService.html":{},"interfaces/Cat.html":{},"controllers/CatsController.html":{},"injectables/CatsService.html":{},"interfaces/Config.html":{},"classes/CreateCatDto.html":{},"classes/CustomHttpException.html":{},"classes/DateScalar.html":{},"injectables/ExceptionInterceptor.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/HealthController.html":{},"classes/HttpError.html":{},"interfaces/ICacheStore.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"classes/NewRecipeInput.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"classes/Recipe.html":{},"classes/RecipesArgs.html":{},"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TerminusLogger.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["index(@res",{"_index":84,"title":{},"body":{"controllers/AppController.html":{}}}],["index(res",{"_index":48,"title":{},"body":{"controllers/AppController.html":{}}}],["indexable",{"_index":515,"title":{},"body":{"interfaces/ICacheStore.html":{}}}],["infer",{"_index":214,"title":{},"body":{"injectables/CacheService.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"interfaces/CacheModuleOptions.html":{},"injectables/CacheService.html":{},"interfaces/Cat.html":{},"controllers/CatsController.html":{},"modules/CatsModule.html":{},"injectables/CatsService.html":{},"interfaces/Config.html":{},"modules/CoreModule.html":{},"classes/CreateCatDto.html":{},"classes/CustomHttpException.html":{},"classes/DateScalar.html":{},"injectables/ExceptionInterceptor.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/HttpError.html":{},"interfaces/ICacheStore.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"modules/NestCacheModule.html":{},"modules/NestConfigModule.html":{},"modules/NestPinoModule.html":{},"classes/NewRecipeInput.html":{},"injectables/ParseIntPipe.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Recipe.html":{},"classes/RecipesArgs.html":{},"modules/RecipesModule.html":{},"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TerminusLogger.html":{},"injectables/TransformInterceptor.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{}}}],["ingredients",{"_index":628,"title":{},"body":{"classes/NewRecipeInput.html":{},"classes/Recipe.html":{}}}],["inject",{"_index":585,"title":{},"body":{"modules/NestPinoModule.html":{},"miscellaneous/variables.html":{}}}],["injectable",{"_index":159,"title":{"injectables/AppService.html":{},"injectables/CacheService.html":{},"injectables/CatsService.html":{},"injectables/ExceptionInterceptor.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"injectables/RecipesService.html":{},"injectables/TerminusLogger.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{}},"body":{"injectables/AppService.html":{},"injectables/CacheService.html":{},"injectables/CatsService.html":{},"injectables/ExceptionInterceptor.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"injectables/RecipesService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TerminusLogger.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["injectables",{"_index":160,"title":{},"body":{"injectables/AppService.html":{},"injectables/CacheService.html":{},"injectables/CatsService.html":{},"injectables/ExceptionInterceptor.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"injectables/RecipesService.html":{},"injectables/TerminusLogger.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"overview.html":{}}}],["inputtype",{"_index":638,"title":{},"body":{"classes/NewRecipeInput.html":{}}}],["installation",{"_index":1017,"title":{},"body":{"index.html":{}}}],["installpreparing",{"_index":1020,"title":{},"body":{"index.html":{}}}],["instance",{"_index":1002,"title":{},"body":{"miscellaneous/functions.html":{}}}],["instanceof",{"_index":423,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["int",{"_index":726,"title":{},"body":{"classes/RecipesArgs.html":{}}}],["int)@min(0",{"_index":720,"title":{},"body":{"classes/RecipesArgs.html":{}}}],["int)@min(1)@max(50",{"_index":723,"title":{},"body":{"classes/RecipesArgs.html":{}}}],["int.pipe",{"_index":247,"title":{},"body":{"controllers/CatsController.html":{}}}],["int.pipe.ts",{"_index":646,"title":{},"body":{"injectables/ParseIntPipe.html":{},"coverage.html":{}}}],["int.pipe.ts:6",{"_index":651,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["intercept",{"_index":370,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["intercept(context",{"_index":371,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["interceptor",{"_index":387,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["interceptors/logging.interceptor",{"_index":292,"title":{},"body":{"modules/CoreModule.html":{}}}],["interceptors/transform.interceptor",{"_index":294,"title":{},"body":{"modules/CoreModule.html":{}}}],["interface",{"_index":165,"title":{"interfaces/CacheModuleOptions.html":{},"interfaces/Cat.html":{},"interfaces/Config.html":{},"interfaces/ICacheStore.html":{},"interfaces/Response.html":{}},"body":{"interfaces/CacheModuleOptions.html":{},"interfaces/Cat.html":{},"interfaces/Config.html":{},"interfaces/ICacheStore.html":{},"modules/NestCacheModule.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["interfaces",{"_index":167,"title":{},"body":{"interfaces/CacheModuleOptions.html":{},"interfaces/Cat.html":{},"interfaces/Config.html":{},"interfaces/ICacheStore.html":{},"interfaces/Response.html":{},"overview.html":{}}}],["interfaces/cat.interface",{"_index":252,"title":{},"body":{"controllers/CatsController.html":{},"injectables/CatsService.html":{}}}],["internal",{"_index":435,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["internal_server_error",{"_index":994,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["isdev",{"_index":1185,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isglobal",{"_index":558,"title":{},"body":{"modules/NestConfigModule.html":{}}}],["isint",{"_index":300,"title":{},"body":{"classes/CreateCatDto.html":{}}}],["isnan(val",{"_index":656,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["isoptional",{"_index":639,"title":{},"body":{"classes/NewRecipeInput.html":{}}}],["isprod",{"_index":1194,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isstring",{"_index":302,"title":{},"body":{"classes/CreateCatDto.html":{}}}],["item",{"_index":826,"title":{},"body":{"guards/RolesGuard.html":{}}}],["joi",{"_index":543,"title":{},"body":{"modules/NestConfigModule.html":{},"dependencies.html":{}}}],["joi.number().integer().min(1).required",{"_index":1157,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.number().port().required",{"_index":1124,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.object",{"_index":561,"title":{},"body":{"modules/NestConfigModule.html":{}}}],["joi.string",{"_index":1120,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.string().optional",{"_index":1136,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.string().pattern(redis_uri_regex).required",{"_index":1223,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.string().required",{"_index":1133,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.string().required().pattern(/^v\\d+/).required().messages",{"_index":1128,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.string().uri().required",{"_index":1126,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.string().valid('redis",{"_index":1154,"title":{},"body":{"miscellaneous/variables.html":{}}}],["join",{"_index":1055,"title":{},"body":{"index.html":{}}}],["jwt_expiry_regex",{"_index":907,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["kamil",{"_index":1061,"title":{},"body":{"index.html":{}}}],["key",{"_index":198,"title":{},"body":{"injectables/CacheService.html":{},"interfaces/ICacheStore.html":{}}}],["keyv",{"_index":207,"title":{},"body":{"injectables/CacheService.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["keyv.on('error",{"_index":1178,"title":{},"body":{"miscellaneous/variables.html":{}}}],["keyv.opts.namespace",{"_index":1181,"title":{},"body":{"miscellaneous/variables.html":{}}}],["keyv/redis",{"_index":942,"title":{},"body":{"dependencies.html":{}}}],["keyv/sqlite",{"_index":944,"title":{},"body":{"dependencies.html":{}}}],["keyvredis(redis.url",{"_index":1173,"title":{},"body":{"miscellaneous/variables.html":{}}}],["keyvsqlite",{"_index":1171,"title":{},"body":{"miscellaneous/variables.html":{}}}],["kind",{"_index":357,"title":{},"body":{"classes/DateScalar.html":{}}}],["kind.int",{"_index":365,"title":{},"body":{"classes/DateScalar.html":{}}}],["left",{"_index":797,"title":{},"body":{"injectables/RecipesService.html":{}}}],["legend",{"_index":114,"title":{},"body":{"modules/AppModule.html":{},"modules/CatsModule.html":{},"modules/HealthModule.html":{},"modules/NestConfigModule.html":{},"modules/PostModule.html":{},"modules/PrismaModule.html":{},"modules/RecipesModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["length",{"_index":640,"title":{},"body":{"classes/NewRecipeInput.html":{}}}],["length(30",{"_index":644,"title":{},"body":{"classes/NewRecipeInput.html":{}}}],["level",{"_index":611,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["license",{"_index":1067,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1045,"title":{},"body":{"index.html":{}}}],["literal",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"classes/HttpError.html":{},"interfaces/ICacheStore.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"miscellaneous/typealiases.html":{}}}],["load",{"_index":555,"title":{},"body":{"modules/NestConfigModule.html":{}}}],["log",{"_index":616,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["logerror",{"_index":396,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["logerror(exception",{"_index":405,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["logged",{"_index":842,"title":{},"body":{"injectables/TerminusLogger.html":{}}}],["logger",{"_index":393,"title":{},"body":{"classes/GlobalExceptionFilter.html":{},"modules/HealthModule.html":{},"miscellaneous/functions.html":{}}}],["logger(globalexceptionfilter.name",{"_index":399,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["logger.error(error",{"_index":1179,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logger.log(`[cache",{"_index":1161,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logger.service",{"_index":497,"title":{},"body":{"modules/HealthModule.html":{}}}],["logger.service.ts",{"_index":830,"title":{},"body":{"injectables/TerminusLogger.html":{},"coverage.html":{}}}],["logger.service.ts:5",{"_index":833,"title":{},"body":{"injectables/TerminusLogger.html":{}}}],["logger.service.ts:6",{"_index":835,"title":{},"body":{"injectables/TerminusLogger.html":{}}}],["logger.service.ts:7",{"_index":837,"title":{},"body":{"injectables/TerminusLogger.html":{}}}],["loggermiddleware",{"_index":519,"title":{"injectables/LoggerMiddleware.html":{}},"body":{"injectables/LoggerMiddleware.html":{},"coverage.html":{}}}],["loggermodule",{"_index":569,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["loggermodule.forrootasync",{"_index":584,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["logginginterceptor",{"_index":291,"title":{"injectables/LoggingInterceptor.html":{}},"body":{"modules/CoreModule.html":{},"injectables/LoggingInterceptor.html":{},"coverage.html":{}}}],["logic",{"_index":795,"title":{},"body":{"injectables/RecipesService.html":{}}}],["logs",{"_index":574,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["logs/error.log",{"_index":617,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["logs/info.log",{"_index":613,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["manager",{"_index":1162,"title":{},"body":{"miscellaneous/variables.html":{}}}],["map",{"_index":808,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"miscellaneous/variables.html":{}}}],["match(cache.provider",{"_index":1164,"title":{},"body":{"miscellaneous/variables.html":{}}}],["matching",{"_index":109,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"interfaces/CacheModuleOptions.html":{},"injectables/CacheService.html":{},"interfaces/Cat.html":{},"controllers/CatsController.html":{},"modules/CatsModule.html":{},"injectables/CatsService.html":{},"interfaces/Config.html":{},"modules/CoreModule.html":{},"classes/CreateCatDto.html":{},"classes/CustomHttpException.html":{},"classes/DateScalar.html":{},"injectables/ExceptionInterceptor.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/HttpError.html":{},"interfaces/ICacheStore.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"modules/NestCacheModule.html":{},"modules/NestConfigModule.html":{},"modules/NestPinoModule.html":{},"classes/NewRecipeInput.html":{},"injectables/ParseIntPipe.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Recipe.html":{},"classes/RecipesArgs.html":{},"modules/RecipesModule.html":{},"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TerminusLogger.html":{},"injectables/TransformInterceptor.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["max",{"_index":727,"title":{},"body":{"classes/RecipesArgs.html":{}}}],["max(50",{"_index":731,"title":{},"body":{"classes/RecipesArgs.html":{}}}],["maxlength",{"_index":641,"title":{},"body":{"classes/NewRecipeInput.html":{}}}],["maxlength(30",{"_index":642,"title":{},"body":{"classes/NewRecipeInput.html":{}}}],["memory",{"_index":461,"title":{},"body":{"controllers/HealthController.html":{}}}],["memory').required",{"_index":1155,"title":{},"body":{"miscellaneous/variables.html":{}}}],["memoryhealthindicator",{"_index":452,"title":{},"body":{"controllers/HealthController.html":{}}}],["mercurius",{"_index":766,"title":{},"body":{"classes/RecipesResolver.html":{},"dependencies.html":{}}}],["mercuriusdriver",{"_index":143,"title":{},"body":{"modules/AppModule.html":{}}}],["mercuriusdriverconfig",{"_index":144,"title":{},"body":{"modules/AppModule.html":{}}}],["mercuriusjs/gateway",{"_index":946,"title":{},"body":{"dependencies.html":{}}}],["message",{"_index":313,"title":{},"body":{"classes/CustomHttpException.html":{},"injectables/ExceptionInterceptor.html":{},"classes/GlobalExceptionFilter.html":{},"classes/HttpError.html":{},"injectables/TerminusLogger.html":{}}}],["messages",{"_index":841,"title":{},"body":{"injectables/TerminusLogger.html":{}}}],["metadata",{"_index":649,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{}}}],["metatype",{"_index":882,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["method",{"_index":622,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/CacheService.html":{},"controllers/CatsController.html":{},"injectables/CatsService.html":{},"classes/DateScalar.html":{},"injectables/ExceptionInterceptor.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/HealthController.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"modules/NestCacheModule.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{},"guards/RolesGuard.html":{},"injectables/TerminusLogger.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{}}}],["min",{"_index":728,"title":{},"body":{"classes/RecipesArgs.html":{}}}],["min(0",{"_index":729,"title":{},"body":{"classes/RecipesArgs.html":{}}}],["min(1",{"_index":730,"title":{},"body":{"classes/RecipesArgs.html":{}}}],["miscellaneous",{"_index":984,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1044,"title":{},"body":{"index.html":{}}}],["mkdir",{"_index":614,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["mock",{"_index":792,"title":{},"body":{"injectables/RecipesService.html":{}}}],["mode",{"_index":1034,"title":{},"body":{"index.html":{}}}],["models/recipe.model",{"_index":770,"title":{},"body":{"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{}}}],["module",{"_index":110,"title":{"modules/AppModule.html":{},"modules/CatsModule.html":{},"modules/CoreModule.html":{},"modules/HealthModule.html":{},"modules/NestCacheModule.html":{},"modules/NestConfigModule.html":{},"modules/NestPinoModule.html":{},"modules/PostModule.html":{},"modules/PrismaModule.html":{},"modules/RecipesModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"interfaces/CacheModuleOptions.html":{},"modules/CatsModule.html":{},"modules/CoreModule.html":{},"modules/HealthModule.html":{},"modules/NestCacheModule.html":{},"modules/NestConfigModule.html":{},"modules/NestPinoModule.html":{},"modules/PostModule.html":{},"modules/PrismaModule.html":{},"modules/RecipesModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["modules",{"_index":112,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/CatsModule.html":{},"modules/CoreModule.html":{},"modules/HealthModule.html":{},"modules/NestCacheModule.html":{},"modules/NestConfigModule.html":{},"modules/NestPinoModule.html":{},"modules/PostModule.html":{},"modules/PrismaModule.html":{},"modules/RecipesModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":1058,"title":{},"body":{"index.html":{}}}],["mutation",{"_index":763,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["mutation(returns",{"_index":749,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["myśliwiec",{"_index":1062,"title":{},"body":{"index.html":{}}}],["name",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"injectables/CacheService.html":{},"interfaces/Cat.html":{},"controllers/CatsController.html":{},"injectables/CatsService.html":{},"classes/CreateCatDto.html":{},"classes/CustomHttpException.html":{},"classes/DateScalar.html":{},"injectables/ExceptionInterceptor.html":{},"classes/GlobalExceptionFilter.html":{},"classes/HttpError.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"modules/NestCacheModule.html":{},"modules/NestPinoModule.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostService.html":{},"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{},"guards/RolesGuard.html":{},"injectables/TerminusLogger.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["namespace",{"_index":1176,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nest",{"_index":1013,"title":{},"body":{"index.html":{}}}],["nestcachemodule",{"_index":125,"title":{"modules/NestCacheModule.html":{}},"body":{"modules/AppModule.html":{},"interfaces/CacheModuleOptions.html":{},"modules/NestCacheModule.html":{},"modules.html":{},"overview.html":{}}}],["nestcachemodule.register",{"_index":151,"title":{},"body":{"modules/AppModule.html":{}}}],["nestconfigmodule",{"_index":126,"title":{"modules/NestConfigModule.html":{}},"body":{"modules/AppModule.html":{},"modules/NestConfigModule.html":{},"modules.html":{},"overview.html":{}}}],["nestframework",{"_index":1066,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":378,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["nestjs",{"_index":570,"title":{},"body":{"modules/NestPinoModule.html":{},"dependencies.html":{}}}],["nestjs/axios",{"_index":492,"title":{},"body":{"modules/HealthModule.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":66,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"interfaces/CacheModuleOptions.html":{},"injectables/CacheService.html":{},"controllers/CatsController.html":{},"modules/CatsModule.html":{},"injectables/CatsService.html":{},"modules/CoreModule.html":{},"classes/CustomHttpException.html":{},"injectables/ExceptionInterceptor.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"modules/NestCacheModule.html":{},"modules/NestConfigModule.html":{},"modules/NestPinoModule.html":{},"injectables/ParseIntPipe.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/RecipesModule.html":{},"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TerminusLogger.html":{},"injectables/TransformInterceptor.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":210,"title":{},"body":{"injectables/CacheService.html":{},"interfaces/Config.html":{},"classes/GlobalExceptionFilter.html":{},"modules/NestConfigModule.html":{},"modules/NestPinoModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":290,"title":{},"body":{"modules/CoreModule.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/graphql",{"_index":142,"title":{},"body":{"modules/AppModule.html":{},"classes/DateScalar.html":{},"classes/NewRecipeInput.html":{},"classes/Recipe.html":{},"classes/RecipesArgs.html":{},"classes/RecipesResolver.html":{},"dependencies.html":{}}}],["nestjs/mercurius",{"_index":145,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":952,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":954,"title":{},"body":{"dependencies.html":{}}}],["nestjs/terminus",{"_index":453,"title":{},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"dependencies.html":{}}}],["nestmiddleware",{"_index":526,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["nestpinomodule",{"_index":127,"title":{"modules/NestPinoModule.html":{}},"body":{"modules/AppModule.html":{},"modules/NestPinoModule.html":{},"modules.html":{},"overview.html":{}}}],["new",{"_index":178,"title":{},"body":{"interfaces/CacheModuleOptions.html":{},"controllers/CatsController.html":{},"classes/DateScalar.html":{},"injectables/ExceptionInterceptor.html":{},"classes/GlobalExceptionFilter.html":{},"modules/NestCacheModule.html":{},"injectables/ParseIntPipe.html":{},"classes/RecipesResolver.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newrecipedata",{"_index":751,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["newrecipeinput",{"_index":625,"title":{"classes/NewRecipeInput.html":{}},"body":{"classes/NewRecipeInput.html":{},"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{},"coverage.html":{}}}],["next",{"_index":373,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["next.handle().pipe(map(data",{"_index":809,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["node.js",{"_index":1006,"title":{},"body":{"index.html":{}}}],["node_env",{"_index":1119,"title":{},"body":{"miscellaneous/variables.html":{}}}],["not_found",{"_index":993,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["notfoundexception",{"_index":411,"title":{},"body":{"classes/GlobalExceptionFilter.html":{},"classes/RecipesResolver.html":{}}}],["notfoundexception(id",{"_index":774,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["now",{"_index":532,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["now}ms",{"_index":535,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["null",{"_index":367,"title":{},"body":{"classes/DateScalar.html":{}}}],["nullable",{"_index":643,"title":{},"body":{"classes/NewRecipeInput.html":{},"classes/Recipe.html":{}}}],["number",{"_index":204,"title":{},"body":{"injectables/CacheService.html":{},"interfaces/Cat.html":{},"controllers/CatsController.html":{},"classes/CreateCatDto.html":{},"classes/DateScalar.html":{},"classes/HttpError.html":{},"injectables/PostService.html":{},"classes/RecipesArgs.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["number(id",{"_index":88,"title":{},"body":{"controllers/AppController.html":{}}}],["object",{"_index":888,"title":{},"body":{"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["objecttype",{"_index":716,"title":{},"body":{"classes/Recipe.html":{}}}],["observable",{"_index":377,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["onmoduleinit",{"_index":705,"title":{},"body":{"injectables/PrismaService.html":{}}}],["open",{"_index":1046,"title":{},"body":{"index.html":{}}}],["optional",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"interfaces/CacheModuleOptions.html":{},"injectables/CacheService.html":{},"controllers/CatsController.html":{},"injectables/CatsService.html":{},"classes/CustomHttpException.html":{},"classes/DateScalar.html":{},"injectables/ExceptionInterceptor.html":{},"classes/GlobalExceptionFilter.html":{},"classes/HttpError.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"modules/NestCacheModule.html":{},"classes/NewRecipeInput.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostService.html":{},"classes/Recipe.html":{},"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{},"guards/RolesGuard.html":{},"injectables/TerminusLogger.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{}}}],["optionalparams",{"_index":834,"title":{},"body":{"injectables/TerminusLogger.html":{}}}],["options",{"_index":538,"title":{},"body":{"modules/NestCacheModule.html":{},"modules/NestPinoModule.html":{}}}],["options.global",{"_index":184,"title":{},"body":{"interfaces/CacheModuleOptions.html":{},"modules/NestCacheModule.html":{}}}],["options_type",{"_index":177,"title":{},"body":{"interfaces/CacheModuleOptions.html":{},"modules/NestCacheModule.html":{}}}],["orderby",{"_index":691,"title":{},"body":{"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["otherwise",{"_index":1189,"title":{},"body":{"miscellaneous/variables.html":{}}}],["out",{"_index":133,"title":{},"body":{"modules/AppModule.html":{},"modules/CatsModule.html":{},"modules/HealthModule.html":{},"modules/NestConfigModule.html":{},"modules/PostModule.html":{},"modules/PrismaModule.html":{},"modules/RecipesModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overview",{"_index":1073,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["overwrite",{"_index":840,"title":{},"body":{"injectables/TerminusLogger.html":{}}}],["package",{"_index":937,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":61,"title":{},"body":{"controllers/AppController.html":{},"controllers/CatsController.html":{}}}],["param('id",{"_index":263,"title":{},"body":{"controllers/CatsController.html":{}}}],["param('searchstring",{"_index":92,"title":{},"body":{"controllers/AppController.html":{}}}],["parameters",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"injectables/CacheService.html":{},"controllers/CatsController.html":{},"injectables/CatsService.html":{},"classes/CustomHttpException.html":{},"classes/DateScalar.html":{},"injectables/ExceptionInterceptor.html":{},"classes/GlobalExceptionFilter.html":{},"classes/HttpError.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"modules/NestCacheModule.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostService.html":{},"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{},"guards/RolesGuard.html":{},"injectables/TerminusLogger.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{}}}],["params",{"_index":683,"title":{},"body":{"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["parseint(value",{"_index":655,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["parseintpipe",{"_index":245,"title":{"injectables/ParseIntPipe.html":{}},"body":{"controllers/CatsController.html":{},"injectables/ParseIntPipe.html":{},"coverage.html":{}}}],["parseliteral",{"_index":342,"title":{},"body":{"classes/DateScalar.html":{}}}],["parseliteral(ast",{"_index":349,"title":{},"body":{"classes/DateScalar.html":{}}}],["parsevalue",{"_index":343,"title":{},"body":{"classes/DateScalar.html":{}}}],["parsevalue(value",{"_index":353,"title":{},"body":{"classes/DateScalar.html":{}}}],["password",{"_index":1218,"title":{},"body":{"miscellaneous/variables.html":{}}}],["password_regex",{"_index":908,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["path",{"_index":475,"title":{},"body":{"controllers/HealthController.html":{},"modules/NestPinoModule.html":{},"miscellaneous/variables.html":{}}}],["path.resolve(uri",{"_index":1170,"title":{},"body":{"miscellaneous/variables.html":{}}}],["paths",{"_index":603,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["pattern",{"_index":982,"title":{},"body":{"dependencies.html":{}}}],["payload",{"_index":782,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["pid,hostname",{"_index":582,"title":{},"body":{"modules/NestPinoModule.html":{},"miscellaneous/variables.html":{}}}],["pino",{"_index":571,"title":{},"body":{"modules/NestPinoModule.html":{},"dependencies.html":{}}}],["pino/file",{"_index":610,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["pinohttp",{"_index":588,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["pipe",{"_index":384,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["pipe(tap",{"_index":533,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["pipetransform",{"_index":653,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["plaintoclass",{"_index":884,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["plaintoclass(metatype",{"_index":889,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["please",{"_index":1056,"title":{},"body":{"index.html":{}}}],["port",{"_index":1102,"title":{},"body":{"miscellaneous/variables.html":{}}}],["post",{"_index":62,"title":{},"body":{"controllers/AppController.html":{},"controllers/CatsController.html":{},"injectables/PostService.html":{}}}],["post('post",{"_index":23,"title":{},"body":{"controllers/AppController.html":{}}}],["post('user",{"_index":57,"title":{},"body":{"controllers/AppController.html":{}}}],["post()@roles('admin",{"_index":233,"title":{},"body":{"controllers/CatsController.html":{}}}],["post(postwhereuniqueinput",{"_index":678,"title":{},"body":{"injectables/PostService.html":{}}}],["post.service",{"_index":665,"title":{},"body":{"modules/PostModule.html":{}}}],["post/post.module",{"_index":139,"title":{},"body":{"modules/AppModule.html":{}}}],["post/post.service",{"_index":72,"title":{},"body":{"controllers/AppController.html":{}}}],["postdata",{"_index":29,"title":{},"body":{"controllers/AppController.html":{}}}],["postmodel",{"_index":75,"title":{},"body":{"controllers/AppController.html":{}}}],["postmodule",{"_index":128,"title":{"modules/PostModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostModule.html":{},"modules.html":{},"overview.html":{}}}],["posts",{"_index":668,"title":{},"body":{"injectables/PostService.html":{}}}],["posts(params",{"_index":681,"title":{},"body":{"injectables/PostService.html":{}}}],["posts/:searchstring",{"_index":39,"title":{},"body":{"controllers/AppController.html":{}}}],["postservice",{"_index":71,"title":{"injectables/PostService.html":{}},"body":{"controllers/AppController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"coverage.html":{},"overview.html":{}}}],["postwhereuniqueinput",{"_index":680,"title":{},"body":{"injectables/PostService.html":{}}}],["prefix",{"_index":226,"title":{},"body":{"controllers/CatsController.html":{},"controllers/HealthController.html":{},"miscellaneous/variables.html":{}}}],["pretty",{"_index":501,"title":{},"body":{"modules/HealthModule.html":{},"modules/NestPinoModule.html":{},"dependencies.html":{}}}],["prisma",{"_index":459,"title":{},"body":{"controllers/HealthController.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["prisma.postcreateinput",{"_index":673,"title":{},"body":{"injectables/PostService.html":{}}}],["prisma.postorderbywithrelationinput",{"_index":692,"title":{},"body":{"injectables/PostService.html":{}}}],["prisma.postupdateinput",{"_index":695,"title":{},"body":{"injectables/PostService.html":{}}}],["prisma.postwhereinput",{"_index":690,"title":{},"body":{"injectables/PostService.html":{}}}],["prisma.postwhereuniqueinput",{"_index":676,"title":{},"body":{"injectables/PostService.html":{}}}],["prisma.service",{"_index":702,"title":{},"body":{"modules/PrismaModule.html":{}}}],["prisma.usercreateinput",{"_index":857,"title":{},"body":{"injectables/UserService.html":{}}}],["prisma.userorderbywithrelationinput",{"_index":871,"title":{},"body":{"injectables/UserService.html":{}}}],["prisma.userupdateinput",{"_index":874,"title":{},"body":{"injectables/UserService.html":{}}}],["prisma.userwhereinput",{"_index":870,"title":{},"body":{"injectables/UserService.html":{}}}],["prisma.userwhereuniqueinput",{"_index":860,"title":{},"body":{"injectables/UserService.html":{}}}],["prisma/client",{"_index":76,"title":{},"body":{"controllers/AppController.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["prisma/prisma.module",{"_index":494,"title":{},"body":{"modules/HealthModule.html":{},"modules/PostModule.html":{},"modules/UserModule.html":{}}}],["prisma/prisma.service",{"_index":455,"title":{},"body":{"controllers/HealthController.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["prismaclient",{"_index":704,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismahealth",{"_index":458,"title":{},"body":{"controllers/HealthController.html":{}}}],["prismahealthindicator",{"_index":450,"title":{},"body":{"controllers/HealthController.html":{}}}],["prismamodule",{"_index":488,"title":{"modules/PrismaModule.html":{}},"body":{"modules/HealthModule.html":{},"modules/PostModule.html":{},"modules/PrismaModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["prismaservice",{"_index":454,"title":{"injectables/PrismaService.html":{}},"body":{"controllers/HealthController.html":{},"injectables/PostService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["private",{"_index":80,"title":{},"body":{"controllers/AppController.html":{},"injectables/CacheService.html":{},"controllers/CatsController.html":{},"injectables/CatsService.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/HealthController.html":{},"injectables/ValidationPipe.html":{}}}],["process.cwd()}/env/.env.${process.env.node_env",{"_index":1183,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.allowed_origins",{"_index":1111,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.allowed_origins.split",{"_index":1112,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.api_url",{"_index":1106,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.app_name",{"_index":1107,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.app_port",{"_index":1103,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.app_prefix",{"_index":1104,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.cache_provider",{"_index":551,"title":{},"body":{"modules/NestConfigModule.html":{},"miscellaneous/variables.html":{}}}],["process.env.cache_ttl",{"_index":1152,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.client_url",{"_index":1109,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.node_env",{"_index":1105,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.node_env.startswith('dev",{"_index":1193,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.node_env.startswith('prod",{"_index":1195,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.redis_host",{"_index":1220,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.redis_password",{"_index":1219,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.redis_port",{"_index":1221,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.redis_uri",{"_index":1215,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.redis_username",{"_index":1217,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.sentry_dsn",{"_index":1114,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.sqlite_url",{"_index":1230,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.swagger_password",{"_index":1118,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.swagger_user",{"_index":1116,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prod",{"_index":1143,"title":{},"body":{"miscellaneous/variables.html":{}}}],["production",{"_index":1036,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["progressive",{"_index":1005,"title":{},"body":{"index.html":{}}}],["project",{"_index":1047,"title":{},"body":{"index.html":{}}}],["promise",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"injectables/CacheService.html":{},"controllers/CatsController.html":{},"injectables/PostService.html":{},"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["properties",{"_index":169,"title":{"properties.html":{}},"body":{"interfaces/CacheModuleOptions.html":{},"interfaces/Cat.html":{},"injectables/CatsService.html":{},"interfaces/Config.html":{},"classes/CreateCatDto.html":{},"classes/CustomHttpException.html":{},"classes/DateScalar.html":{},"classes/GlobalExceptionFilter.html":{},"classes/HttpError.html":{},"interfaces/ICacheStore.html":{},"classes/NewRecipeInput.html":{},"classes/Recipe.html":{},"classes/RecipesArgs.html":{},"interfaces/Response.html":{},"properties.html":{}}}],["protected",{"_index":395,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["provide",{"_index":295,"title":{},"body":{"modules/CoreModule.html":{},"miscellaneous/variables.html":{}}}],["provider",{"_index":550,"title":{},"body":{"modules/NestConfigModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["providers",{"_index":117,"title":{},"body":{"modules/AppModule.html":{},"interfaces/CacheModuleOptions.html":{},"modules/CatsModule.html":{},"modules/CoreModule.html":{},"modules/HealthModule.html":{},"modules/NestCacheModule.html":{},"modules/NestConfigModule.html":{},"modules/PostModule.html":{},"modules/PrismaModule.html":{},"modules/RecipesModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["published",{"_index":90,"title":{},"body":{"controllers/AppController.html":{}}}],["publishpost",{"_index":16,"title":{},"body":{"controllers/AppController.html":{}}}],["publishpost(@param('id",{"_index":103,"title":{},"body":{"controllers/AppController.html":{}}}],["publishpost(id",{"_index":53,"title":{},"body":{"controllers/AppController.html":{}}}],["pubsub",{"_index":748,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["pubsub.publish",{"_index":780,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["pubsub.subscribe('recipeadded",{"_index":786,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["purposes",{"_index":799,"title":{},"body":{"injectables/RecipesService.html":{}}}],["put",{"_index":64,"title":{},"body":{"controllers/AppController.html":{},"injectables/RecipesService.html":{}}}],["put('publish/:id",{"_index":54,"title":{},"body":{"controllers/AppController.html":{}}}],["query",{"_index":764,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["query(returns",{"_index":753,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["rabbit_mq_uri_regex",{"_index":909,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["raw",{"_index":600,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["read",{"_index":1057,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":81,"title":{},"body":{"controllers/AppController.html":{},"injectables/CacheService.html":{},"interfaces/Cat.html":{},"controllers/CatsController.html":{},"injectables/CatsService.html":{},"classes/CreateCatDto.html":{},"classes/GlobalExceptionFilter.html":{},"classes/RecipesResolver.html":{},"guards/RolesGuard.html":{}}}],["real",{"_index":793,"title":{},"body":{"injectables/RecipesService.html":{}}}],["recipe",{"_index":708,"title":{"classes/Recipe.html":{}},"body":{"classes/Recipe.html":{},"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{},"coverage.html":{}}}],["recipe(@args('id",{"_index":772,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["recipe(id",{"_index":752,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["recipe.input",{"_index":768,"title":{},"body":{"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{}}}],["recipe.input.ts",{"_index":627,"title":{},"body":{"classes/NewRecipeInput.html":{},"coverage.html":{}}}],["recipe.input.ts:13",{"_index":632,"title":{},"body":{"classes/NewRecipeInput.html":{}}}],["recipe.input.ts:16",{"_index":634,"title":{},"body":{"classes/NewRecipeInput.html":{}}}],["recipe.input.ts:8",{"_index":636,"title":{},"body":{"classes/NewRecipeInput.html":{}}}],["recipeadded",{"_index":742,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["recipeadded(@context('pubsub",{"_index":785,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["recipeadded(pubsub",{"_index":755,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["recipes",{"_index":743,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["recipes(@args",{"_index":775,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["recipes(recipesargs",{"_index":758,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["recipes.resolver",{"_index":738,"title":{},"body":{"modules/RecipesModule.html":{}}}],["recipes.service",{"_index":739,"title":{},"body":{"modules/RecipesModule.html":{},"classes/RecipesResolver.html":{}}}],["recipes/recipes.module",{"_index":146,"title":{},"body":{"modules/AppModule.html":{}}}],["recipesargs",{"_index":717,"title":{"classes/RecipesArgs.html":{}},"body":{"classes/RecipesArgs.html":{},"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{},"coverage.html":{}}}],["recipesmodule",{"_index":129,"title":{"modules/RecipesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/RecipesModule.html":{},"modules.html":{},"overview.html":{}}}],["recipesresolver",{"_index":737,"title":{"classes/RecipesResolver.html":{}},"body":{"modules/RecipesModule.html":{},"classes/RecipesResolver.html":{},"coverage.html":{}}}],["recipesservice",{"_index":734,"title":{"injectables/RecipesService.html":{}},"body":{"modules/RecipesModule.html":{},"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{},"coverage.html":{},"overview.html":{}}}],["record",{"_index":599,"title":{},"body":{"modules/NestPinoModule.html":{},"miscellaneous/variables.html":{}}}],["redact",{"_index":573,"title":{},"body":{"modules/NestPinoModule.html":{},"miscellaneous/variables.html":{}}}],["redactfields",{"_index":575,"title":{},"body":{"modules/NestPinoModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["redis",{"_index":281,"title":{},"body":{"interfaces/Config.html":{},"modules/NestConfigModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["redis.config",{"_index":285,"title":{},"body":{"interfaces/Config.html":{},"modules/NestConfigModule.html":{}}}],["redis:\\/\\/(?:([^:@]+):([^:@]+)@)?([^/:]+)(?::(\\d+))?(?:\\/(\\d",{"_index":1209,"title":{},"body":{"miscellaneous/variables.html":{}}}],["redis_host",{"_index":1226,"title":{},"body":{"miscellaneous/variables.html":{}}}],["redis_password",{"_index":1225,"title":{},"body":{"miscellaneous/variables.html":{}}}],["redis_port",{"_index":1227,"title":{},"body":{"miscellaneous/variables.html":{}}}],["redis_uri",{"_index":1222,"title":{},"body":{"miscellaneous/variables.html":{}}}],["redis_uri_regex",{"_index":910,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["redis_username",{"_index":1224,"title":{},"body":{"miscellaneous/variables.html":{}}}],["redisconfigvalidationschema",{"_index":547,"title":{},"body":{"modules/NestConfigModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["reflect",{"_index":978,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":815,"title":{},"body":{"guards/RolesGuard.html":{}}}],["register",{"_index":536,"title":{},"body":{"modules/NestCacheModule.html":{}}}],["register(options",{"_index":182,"title":{},"body":{"interfaces/CacheModuleOptions.html":{},"modules/NestCacheModule.html":{}}}],["registeras('app",{"_index":1101,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registeras('cache",{"_index":1151,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registeras('redis",{"_index":1214,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registeras('sqlite",{"_index":1229,"title":{},"body":{"miscellaneous/variables.html":{}}}],["remove",{"_index":789,"title":{},"body":{"injectables/RecipesService.html":{}}}],["remove(id",{"_index":804,"title":{},"body":{"injectables/RecipesService.html":{}}}],["removerecipe",{"_index":744,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["removerecipe(@args('id",{"_index":783,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["removerecipe(id",{"_index":760,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["repository",{"_index":1016,"title":{},"body":{"index.html":{}}}],["req",{"_index":524,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["req(request",{"_index":598,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["req.body.confirmpassword",{"_index":578,"title":{},"body":{"modules/NestPinoModule.html":{},"miscellaneous/variables.html":{}}}],["req.body.password",{"_index":577,"title":{},"body":{"modules/NestPinoModule.html":{},"miscellaneous/variables.html":{}}}],["req.headers.authorization",{"_index":576,"title":{},"body":{"modules/NestPinoModule.html":{},"miscellaneous/variables.html":{}}}],["request",{"_index":406,"title":{},"body":{"classes/GlobalExceptionFilter.html":{},"modules/NestPinoModule.html":{},"guards/RolesGuard.html":{}}}],["request.body",{"_index":601,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["request.raw.body",{"_index":602,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["request.user",{"_index":822,"title":{},"body":{"guards/RolesGuard.html":{}}}],["request?.url",{"_index":439,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["requestmethod",{"_index":568,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["requestmethod.all",{"_index":623,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["required",{"_index":1122,"title":{},"body":{"miscellaneous/variables.html":{}}}],["res",{"_index":51,"title":{},"body":{"controllers/AppController.html":{},"injectables/LoggerMiddleware.html":{}}}],["res.status(302).redirect('/login",{"_index":85,"title":{},"body":{"controllers/AppController.html":{}}}],["reset",{"_index":132,"title":{},"body":{"modules/AppModule.html":{},"modules/CatsModule.html":{},"modules/HealthModule.html":{},"modules/NestConfigModule.html":{},"modules/PostModule.html":{},"modules/PrismaModule.html":{},"modules/RecipesModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["resolver",{"_index":765,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["resolver(of",{"_index":771,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["response",{"_index":420,"title":{"interfaces/Response.html":{}},"body":{"classes/GlobalExceptionFilter.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["response.status(httpstatus.internal_server_error).send",{"_index":434,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["response.status(status).send",{"_index":427,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["response.types",{"_index":512,"title":{},"body":{"classes/HttpError.html":{}}}],["response.types.ts",{"_index":987,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["rest",{"_index":836,"title":{},"body":{"injectables/TerminusLogger.html":{}}}],["restricted_resource",{"_index":992,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["results",{"_index":108,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"interfaces/CacheModuleOptions.html":{},"injectables/CacheService.html":{},"interfaces/Cat.html":{},"controllers/CatsController.html":{},"modules/CatsModule.html":{},"injectables/CatsService.html":{},"interfaces/Config.html":{},"modules/CoreModule.html":{},"classes/CreateCatDto.html":{},"classes/CustomHttpException.html":{},"classes/DateScalar.html":{},"injectables/ExceptionInterceptor.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/HttpError.html":{},"interfaces/ICacheStore.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"modules/NestCacheModule.html":{},"modules/NestConfigModule.html":{},"modules/NestPinoModule.html":{},"classes/NewRecipeInput.html":{},"injectables/ParseIntPipe.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Recipe.html":{},"classes/RecipesArgs.html":{},"modules/RecipesModule.html":{},"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TerminusLogger.html":{},"injectables/TransformInterceptor.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":82,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"interfaces/CacheModuleOptions.html":{},"injectables/CacheService.html":{},"controllers/CatsController.html":{},"injectables/CatsService.html":{},"classes/CustomHttpException.html":{},"classes/DateScalar.html":{},"injectables/ExceptionInterceptor.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/HealthController.html":{},"injectables/LoggingInterceptor.html":{},"modules/NestCacheModule.html":{},"modules/NestPinoModule.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostService.html":{},"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/CacheService.html":{},"controllers/CatsController.html":{},"injectables/CatsService.html":{},"classes/DateScalar.html":{},"injectables/ExceptionInterceptor.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/HealthController.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"modules/NestCacheModule.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{},"guards/RolesGuard.html":{},"injectables/TerminusLogger.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["role",{"_index":827,"title":{},"body":{"guards/RolesGuard.html":{}}}],["roles",{"_index":241,"title":{},"body":{"controllers/CatsController.html":{},"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles('admin",{"_index":255,"title":{},"body":{"controllers/CatsController.html":{}}}],["roles.find(item",{"_index":825,"title":{},"body":{"guards/RolesGuard.html":{}}}],["rolesguard",{"_index":243,"title":{"guards/RolesGuard.html":{}},"body":{"controllers/CatsController.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["run",{"_index":1031,"title":{},"body":{"index.html":{}}}],["running",{"_index":1192,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rxjs",{"_index":380,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":382,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["scalable",{"_index":1010,"title":{},"body":{"index.html":{}}}],["scalar",{"_index":347,"title":{},"body":{"classes/DateScalar.html":{}}}],["scalar('date",{"_index":359,"title":{},"body":{"classes/DateScalar.html":{}}}],["schema.gql",{"_index":156,"title":{},"body":{"modules/AppModule.html":{}}}],["scope",{"_index":838,"title":{},"body":{"injectables/TerminusLogger.html":{}}}],["scope.transient",{"_index":839,"title":{},"body":{"injectables/TerminusLogger.html":{}}}],["searchstring",{"_index":41,"title":{},"body":{"controllers/AppController.html":{}}}],["send",{"_index":432,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["sent",{"_index":363,"title":{},"body":{"classes/DateScalar.html":{}}}],["sentry_dsn_regex",{"_index":911,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["sentrydsn",{"_index":1113,"title":{},"body":{"miscellaneous/variables.html":{}}}],["serialize",{"_index":344,"title":{},"body":{"classes/DateScalar.html":{}}}],["serialize(value",{"_index":355,"title":{},"body":{"classes/DateScalar.html":{}}}],["serializers",{"_index":597,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["server",{"_index":436,"title":{},"body":{"classes/GlobalExceptionFilter.html":{},"index.html":{}}}],["service",{"_index":1022,"title":{},"body":{"index.html":{}}}],["set",{"_index":189,"title":{},"body":{"injectables/CacheService.html":{},"miscellaneous/variables.html":{}}}],["set(key",{"_index":201,"title":{},"body":{"injectables/CacheService.html":{}}}],["setmetadata('roles",{"_index":1228,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shutdown",{"_index":503,"title":{},"body":{"modules/HealthModule.html":{}}}],["side",{"_index":1011,"title":{},"body":{"index.html":{}}}],["signupuser",{"_index":17,"title":{},"body":{"controllers/AppController.html":{}}}],["signupuser(userdata",{"_index":56,"title":{},"body":{"controllers/AppController.html":{}}}],["singleline",{"_index":583,"title":{},"body":{"modules/NestPinoModule.html":{},"miscellaneous/variables.html":{}}}],["size",{"_index":471,"title":{},"body":{"controllers/HealthController.html":{}}}],["skip",{"_index":687,"title":{},"body":{"injectables/PostService.html":{},"classes/RecipesArgs.html":{},"injectables/UserService.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"interfaces/CacheModuleOptions.html":{},"injectables/CacheService.html":{},"interfaces/Cat.html":{},"controllers/CatsController.html":{},"modules/CatsModule.html":{},"injectables/CatsService.html":{},"interfaces/Config.html":{},"modules/CoreModule.html":{},"classes/CreateCatDto.html":{},"classes/CustomHttpException.html":{},"classes/DateScalar.html":{},"injectables/ExceptionInterceptor.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/HttpError.html":{},"interfaces/ICacheStore.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"modules/NestCacheModule.html":{},"modules/NestConfigModule.html":{},"modules/NestPinoModule.html":{},"classes/NewRecipeInput.html":{},"injectables/ParseIntPipe.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Recipe.html":{},"classes/RecipesArgs.html":{},"modules/RecipesModule.html":{},"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TerminusLogger.html":{},"injectables/TransformInterceptor.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"index.html":{}}}],["sponsors",{"_index":1050,"title":{},"body":{"index.html":{}}}],["sqlite",{"_index":282,"title":{},"body":{"interfaces/Config.html":{},"modules/NestConfigModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["sqlite.config",{"_index":287,"title":{},"body":{"interfaces/Config.html":{},"modules/NestConfigModule.html":{}}}],["sqlite.uri.replace(/^sqlite",{"_index":1168,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sqlite_url",{"_index":1231,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sqliteconfigvalidationschema",{"_index":549,"title":{},"body":{"modules/NestConfigModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/.../app.config.ts",{"_index":1086,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../app.logger.ts",{"_index":1000,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../app.utils.ts",{"_index":1088,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../cache.config.ts",{"_index":1090,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../cache.module.ts",{"_index":1100,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../cache.provider.ts",{"_index":1091,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../config.module.ts",{"_index":1096,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../constant.ts",{"_index":1093,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../custom.exception.ts",{"_index":1094,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../helpers.utils.ts",{"_index":1092,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../http",{"_index":986,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../index.ts",{"_index":1087,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":999,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../pino.module.ts",{"_index":1089,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../redis.config.ts",{"_index":1097,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../regex.constants.ts",{"_index":1095,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../roles.decorator.ts",{"_index":1098,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../sqlite.config.ts",{"_index":1099,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:25",{"_index":42,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:30",{"_index":50,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:35",{"_index":45,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:40",{"_index":47,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:47",{"_index":40,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:65",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:79",{"_index":58,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:86",{"_index":55,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:94",{"_index":35,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":134,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":161,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":162,"title":{},"body":{"injectables/AppService.html":{}}}],["src/cats/cats.controller.ts",{"_index":225,"title":{},"body":{"controllers/CatsController.html":{},"coverage.html":{}}}],["src/cats/cats.controller.ts:20",{"_index":234,"title":{},"body":{"controllers/CatsController.html":{}}}],["src/cats/cats.controller.ts:25",{"_index":235,"title":{},"body":{"controllers/CatsController.html":{}}}],["src/cats/cats.controller.ts:36",{"_index":238,"title":{},"body":{"controllers/CatsController.html":{}}}],["src/cats/cats.module.ts",{"_index":266,"title":{},"body":{"modules/CatsModule.html":{}}}],["src/cats/cats.service.ts",{"_index":268,"title":{},"body":{"injectables/CatsService.html":{},"coverage.html":{}}}],["src/cats/cats.service.ts:12",{"_index":271,"title":{},"body":{"injectables/CatsService.html":{}}}],["src/cats/cats.service.ts:6",{"_index":273,"title":{},"body":{"injectables/CatsService.html":{}}}],["src/cats/cats.service.ts:8",{"_index":270,"title":{},"body":{"injectables/CatsService.html":{}}}],["src/cats/dto/create",{"_index":298,"title":{},"body":{"classes/CreateCatDto.html":{},"coverage.html":{}}}],["src/cats/interfaces/cat.interface.ts",{"_index":221,"title":{},"body":{"interfaces/Cat.html":{},"coverage.html":{}}}],["src/common/constant/index.ts",{"_index":901,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/constant/regex.constants.ts",{"_index":906,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/decorators/roles.decorator.ts",{"_index":913,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/errors/constant.ts",{"_index":914,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/errors/http",{"_index":988,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/common/errors/http.error.ts",{"_index":507,"title":{},"body":{"classes/HttpError.html":{},"coverage.html":{}}}],["src/common/errors/http.error.ts:5",{"_index":511,"title":{},"body":{"classes/HttpError.html":{}}}],["src/common/errors/http.error.ts:6",{"_index":510,"title":{},"body":{"classes/HttpError.html":{}}}],["src/common/exception/custom.exception.ts",{"_index":307,"title":{},"body":{"classes/CustomHttpException.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/exception/custom.exception.ts:5",{"_index":312,"title":{},"body":{"classes/CustomHttpException.html":{}}}],["src/common/guards/roles.guard.ts",{"_index":812,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/common/guards/roles.guard.ts:5",{"_index":816,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/common/guards/roles.guard.ts:8",{"_index":818,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/common/helpers/app.utils.ts",{"_index":916,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/helpers/helpers.utils.ts",{"_index":918,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/interceptors/exception.interceptor.ts",{"_index":369,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"coverage.html":{}}}],["src/common/interceptors/exception.interceptor.ts:14",{"_index":375,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["src/common/middleware/logger.middleware.ts",{"_index":520,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"coverage.html":{}}}],["src/common/middleware/logger.middleware.ts:5",{"_index":523,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["src/common/pipes/parse",{"_index":645,"title":{},"body":{"injectables/ParseIntPipe.html":{},"coverage.html":{}}}],["src/common/pipes/validation.pipe.ts",{"_index":878,"title":{},"body":{"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["src/common/pipes/validation.pipe.ts:13",{"_index":883,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["src/common/pipes/validation.pipe.ts:26",{"_index":881,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["src/common/scalars/date.scalar.ts",{"_index":338,"title":{},"body":{"classes/DateScalar.html":{},"coverage.html":{}}}],["src/common/scalars/date.scalar.ts:12",{"_index":356,"title":{},"body":{"classes/DateScalar.html":{}}}],["src/common/scalars/date.scalar.ts:16",{"_index":351,"title":{},"body":{"classes/DateScalar.html":{}}}],["src/common/scalars/date.scalar.ts:6",{"_index":348,"title":{},"body":{"classes/DateScalar.html":{}}}],["src/common/scalars/date.scalar.ts:8",{"_index":354,"title":{},"body":{"classes/DateScalar.html":{}}}],["src/core/cache/cache.module.ts",{"_index":168,"title":{},"body":{"interfaces/CacheModuleOptions.html":{},"modules/NestCacheModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/cache/cache.module.ts:16",{"_index":537,"title":{},"body":{"modules/NestCacheModule.html":{}}}],["src/core/cache/cache.provider.ts",{"_index":921,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/cache/cache.service.ts",{"_index":187,"title":{},"body":{"injectables/CacheService.html":{},"coverage.html":{}}}],["src/core/cache/cache.service.ts:13",{"_index":200,"title":{},"body":{"injectables/CacheService.html":{}}}],["src/core/cache/cache.service.ts:17",{"_index":205,"title":{},"body":{"injectables/CacheService.html":{}}}],["src/core/cache/cache.service.ts:26",{"_index":197,"title":{},"body":{"injectables/CacheService.html":{}}}],["src/core/cache/cache.service.ts:7",{"_index":193,"title":{},"body":{"injectables/CacheService.html":{}}}],["src/core/cache/types.ts",{"_index":514,"title":{},"body":{"interfaces/ICacheStore.html":{},"coverage.html":{}}}],["src/core/cache/types.ts:2",{"_index":517,"title":{},"body":{"interfaces/ICacheStore.html":{}}}],["src/core/config/app.config.ts",{"_index":922,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/config/cache.config.ts",{"_index":923,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/config/config.interface.ts",{"_index":278,"title":{},"body":{"interfaces/Config.html":{},"coverage.html":{}}}],["src/core/config/config.module.ts",{"_index":541,"title":{},"body":{"modules/NestConfigModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/config/redis.config.ts",{"_index":924,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/config/sqlite.config.ts",{"_index":925,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/core.module.ts",{"_index":288,"title":{},"body":{"modules/CoreModule.html":{}}}],["src/core/filters/global",{"_index":390,"title":{},"body":{"classes/GlobalExceptionFilter.html":{},"coverage.html":{}}}],["src/core/interceptors/logging.interceptor.ts",{"_index":528,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"coverage.html":{}}}],["src/core/interceptors/logging.interceptor.ts:12",{"_index":529,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["src/core/interceptors/transform.interceptor.ts",{"_index":806,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["src/core/interceptors/transform.interceptor.ts:18",{"_index":843,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["src/core/pino/app.logger.ts",{"_index":926,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/core/pino/pino.module.ts",{"_index":567,"title":{},"body":{"modules/NestPinoModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/health/health.controller.ts",{"_index":442,"title":{},"body":{"controllers/HealthController.html":{},"coverage.html":{}}}],["src/health/health.controller.ts:18",{"_index":446,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.module.ts",{"_index":489,"title":{},"body":{"modules/HealthModule.html":{}}}],["src/health/terminus",{"_index":829,"title":{},"body":{"injectables/TerminusLogger.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":930,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/post/post.module.ts",{"_index":664,"title":{},"body":{"modules/PostModule.html":{}}}],["src/post/post.service.ts",{"_index":666,"title":{},"body":{"injectables/PostService.html":{},"coverage.html":{}}}],["src/post/post.service.ts:17",{"_index":682,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:34",{"_index":674,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:40",{"_index":685,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:51",{"_index":677,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:6",{"_index":671,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:9",{"_index":679,"title":{},"body":{"injectables/PostService.html":{}}}],["src/prisma/prisma.module.ts",{"_index":701,"title":{},"body":{"modules/PrismaModule.html":{}}}],["src/prisma/prisma.service.ts",{"_index":703,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/prisma/prisma.service.ts:6",{"_index":706,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/recipes/dto/new",{"_index":626,"title":{},"body":{"classes/NewRecipeInput.html":{},"coverage.html":{}}}],["src/recipes/dto/recipes.args.ts",{"_index":718,"title":{},"body":{"classes/RecipesArgs.html":{},"coverage.html":{}}}],["src/recipes/dto/recipes.args.ts:13",{"_index":724,"title":{},"body":{"classes/RecipesArgs.html":{}}}],["src/recipes/dto/recipes.args.ts:8",{"_index":721,"title":{},"body":{"classes/RecipesArgs.html":{}}}],["src/recipes/models/recipe.model.ts",{"_index":709,"title":{},"body":{"classes/Recipe.html":{},"coverage.html":{}}}],["src/recipes/models/recipe.model.ts:12",{"_index":712,"title":{},"body":{"classes/Recipe.html":{}}}],["src/recipes/models/recipe.model.ts:15",{"_index":711,"title":{},"body":{"classes/Recipe.html":{}}}],["src/recipes/models/recipe.model.ts:18",{"_index":714,"title":{},"body":{"classes/Recipe.html":{}}}],["src/recipes/models/recipe.model.ts:6",{"_index":713,"title":{},"body":{"classes/Recipe.html":{}}}],["src/recipes/models/recipe.model.ts:9",{"_index":715,"title":{},"body":{"classes/Recipe.html":{}}}],["src/recipes/recipes.module.ts",{"_index":735,"title":{},"body":{"modules/RecipesModule.html":{}}}],["src/recipes/recipes.resolver.ts",{"_index":740,"title":{},"body":{"classes/RecipesResolver.html":{},"coverage.html":{}}}],["src/recipes/recipes.resolver.ts:17",{"_index":746,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["src/recipes/recipes.resolver.ts:21",{"_index":754,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["src/recipes/recipes.resolver.ts:30",{"_index":759,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["src/recipes/recipes.resolver.ts:35",{"_index":750,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["src/recipes/recipes.resolver.ts:45",{"_index":761,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["src/recipes/recipes.resolver.ts:50",{"_index":757,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["src/recipes/recipes.service.ts",{"_index":787,"title":{},"body":{"injectables/RecipesService.html":{},"coverage.html":{}}}],["src/recipes/recipes.service.ts:14",{"_index":791,"title":{},"body":{"injectables/RecipesService.html":{}}}],["src/recipes/recipes.service.ts:18",{"_index":803,"title":{},"body":{"injectables/RecipesService.html":{}}}],["src/recipes/recipes.service.ts:22",{"_index":801,"title":{},"body":{"injectables/RecipesService.html":{}}}],["src/recipes/recipes.service.ts:26",{"_index":805,"title":{},"body":{"injectables/RecipesService.html":{}}}],["src/user/user.module.ts",{"_index":848,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service.ts",{"_index":850,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:17",{"_index":868,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:34",{"_index":858,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:40",{"_index":863,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:51",{"_index":861,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:6",{"_index":855,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:9",{"_index":865,"title":{},"body":{"injectables/UserService.html":{}}}],["stack",{"_index":566,"title":{},"body":{"modules/NestConfigModule.html":{},"injectables/TerminusLogger.html":{}}}],["stage",{"_index":1140,"title":{},"body":{"miscellaneous/variables.html":{}}}],["staging",{"_index":1141,"title":{},"body":{"miscellaneous/variables.html":{}}}],["start",{"_index":1032,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["start:dev",{"_index":1035,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":1037,"title":{},"body":{"index.html":{}}}],["started",{"_index":1004,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1015,"title":{},"body":{"index.html":{}}}],["starts",{"_index":1188,"title":{},"body":{"miscellaneous/variables.html":{}}}],["statements",{"_index":897,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":181,"title":{},"body":{"interfaces/CacheModuleOptions.html":{},"modules/NestCacheModule.html":{}}}],["status",{"_index":321,"title":{},"body":{"classes/CustomHttpException.html":{},"classes/GlobalExceptionFilter.html":{},"classes/HttpError.html":{},"miscellaneous/variables.html":{}}}],["status(status",{"_index":431,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["stay",{"_index":1059,"title":{},"body":{"index.html":{}}}],["stopatfirsterror",{"_index":1146,"title":{},"body":{"miscellaneous/variables.html":{}}}],["storage",{"_index":467,"title":{},"body":{"controllers/HealthController.html":{}}}],["store",{"_index":191,"title":{},"body":{"injectables/CacheService.html":{},"miscellaneous/variables.html":{}}}],["string",{"_index":33,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"interfaces/Cat.html":{},"classes/CreateCatDto.html":{},"classes/CustomHttpException.html":{},"classes/DateScalar.html":{},"classes/HttpError.html":{},"classes/NewRecipeInput.html":{},"injectables/ParseIntPipe.html":{},"classes/Recipe.html":{},"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{},"injectables/TerminusLogger.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["string.pattern.base",{"_index":1129,"title":{},"body":{"miscellaneous/variables.html":{}}}],["subscription",{"_index":157,"title":{},"body":{"modules/AppModule.html":{},"classes/RecipesResolver.html":{}}}],["subscription(returns",{"_index":756,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["super(message",{"_index":317,"title":{},"body":{"classes/CustomHttpException.html":{},"classes/HttpError.html":{}}}],["super.register(options",{"_index":185,"title":{},"body":{"interfaces/CacheModuleOptions.html":{},"modules/NestCacheModule.html":{}}}],["support",{"_index":1051,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":1069,"title":{},"body":{"modules.html":{}}}],["swagger_api_endpoint",{"_index":905,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["swagger_password",{"_index":1138,"title":{},"body":{"miscellaneous/variables.html":{}}}],["swagger_user",{"_index":1137,"title":{},"body":{"miscellaneous/variables.html":{}}}],["swaggerpass",{"_index":1117,"title":{},"body":{"miscellaneous/variables.html":{}}}],["swaggeruser",{"_index":1115,"title":{},"body":{"miscellaneous/variables.html":{}}}],["switch",{"_index":322,"title":{},"body":{"classes/CustomHttpException.html":{},"miscellaneous/variables.html":{}}}],["sync",{"_index":615,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["t",{"_index":807,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["table",{"_index":936,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":935,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":688,"title":{},"body":{"injectables/PostService.html":{},"classes/RecipesArgs.html":{},"injectables/UserService.html":{}}}],["tap",{"_index":530,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["target",{"_index":609,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["targets",{"_index":608,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["teable_cache",{"_index":1177,"title":{},"body":{"miscellaneous/variables.html":{}}}],["template",{"_index":516,"title":{},"body":{"interfaces/ICacheStore.html":{}}}],["terminus",{"_index":496,"title":{},"body":{"modules/HealthModule.html":{}}}],["terminuslogger",{"_index":495,"title":{"injectables/TerminusLogger.html":{}},"body":{"modules/HealthModule.html":{},"injectables/TerminusLogger.html":{},"coverage.html":{}}}],["terminusmodule",{"_index":490,"title":{},"body":{"modules/HealthModule.html":{}}}],["terminusmodule.forroot",{"_index":498,"title":{},"body":{"modules/HealthModule.html":{}}}],["test",{"_index":1040,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["test:covsupport",{"_index":1043,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1042,"title":{},"body":{"index.html":{}}}],["testing",{"_index":1142,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tests",{"_index":1039,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":1049,"title":{},"body":{"index.html":{}}}],["this.$connect",{"_index":707,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.appservice.gethello",{"_index":83,"title":{},"body":{"controllers/AppController.html":{}}}],["this.cachemanager.delete(key",{"_index":219,"title":{},"body":{"injectables/CacheService.html":{}}}],["this.cachemanager.get(key",{"_index":211,"title":{},"body":{"injectables/CacheService.html":{}}}],["this.cachemanager.set(key",{"_index":216,"title":{},"body":{"injectables/CacheService.html":{}}}],["this.cacheservice.get('findall",{"_index":259,"title":{},"body":{"controllers/CatsController.html":{}}}],["this.cacheservice.set('findall",{"_index":261,"title":{},"body":{"controllers/CatsController.html":{}}}],["this.cats.concat",{"_index":275,"title":{},"body":{"injectables/CatsService.html":{}}}],["this.cats.push(cat",{"_index":274,"title":{},"body":{"injectables/CatsService.html":{}}}],["this.catsservice.create(createcatdto",{"_index":257,"title":{},"body":{"controllers/CatsController.html":{}}}],["this.catsservice.findall",{"_index":260,"title":{},"body":{"controllers/CatsController.html":{}}}],["this.code",{"_index":319,"title":{},"body":{"classes/CustomHttpException.html":{},"classes/HttpError.html":{}}}],["this.configservice.get('cache.ttl",{"_index":213,"title":{},"body":{"injectables/CacheService.html":{}}}],["this.disk.checkstorage('disk",{"_index":472,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.health.check",{"_index":462,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck('nestjs",{"_index":463,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.logerror(exception",{"_index":424,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["this.logger.error",{"_index":437,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["this.memory.checkheap('memory_heap",{"_index":480,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.memory.checkrss('memory_rss",{"_index":482,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.postservice.createpost",{"_index":98,"title":{},"body":{"controllers/AppController.html":{}}}],["this.postservice.deletepost",{"_index":107,"title":{},"body":{"controllers/AppController.html":{}}}],["this.postservice.post",{"_index":87,"title":{},"body":{"controllers/AppController.html":{}}}],["this.postservice.posts",{"_index":89,"title":{},"body":{"controllers/AppController.html":{}}}],["this.postservice.updatepost",{"_index":104,"title":{},"body":{"controllers/AppController.html":{}}}],["this.prisma",{"_index":485,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.prisma.post.create",{"_index":694,"title":{},"body":{"injectables/PostService.html":{}}}],["this.prisma.post.delete",{"_index":697,"title":{},"body":{"injectables/PostService.html":{}}}],["this.prisma.post.findmany",{"_index":693,"title":{},"body":{"injectables/PostService.html":{}}}],["this.prisma.post.findunique",{"_index":686,"title":{},"body":{"injectables/PostService.html":{}}}],["this.prisma.post.update",{"_index":696,"title":{},"body":{"injectables/PostService.html":{}}}],["this.prisma.user.create",{"_index":873,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma.user.delete",{"_index":876,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma.user.findmany",{"_index":872,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma.user.findunique",{"_index":869,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma.user.update",{"_index":875,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prismahealth.pingcheck('prisma",{"_index":484,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.recipesservice.create(newrecipedata",{"_index":779,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["this.recipesservice.findall(recipesargs",{"_index":776,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["this.recipesservice.findonebyid(id",{"_index":773,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["this.recipesservice.remove(id",{"_index":784,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["this.reflector.get('roles",{"_index":819,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.status",{"_index":513,"title":{},"body":{"classes/HttpError.html":{}}}],["this.tovalidate(metatype",{"_index":887,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["this.userservice.createuser(userdata",{"_index":102,"title":{},"body":{"controllers/AppController.html":{}}}],["threshold",{"_index":478,"title":{},"body":{"controllers/HealthController.html":{}}}],["thresholdpercent",{"_index":473,"title":{},"body":{"controllers/HealthController.html":{}}}],["throw",{"_index":657,"title":{},"body":{"injectables/ParseIntPipe.html":{},"classes/RecipesResolver.html":{},"injectables/ValidationPipe.html":{}}}],["throwerror",{"_index":379,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["timeout",{"_index":504,"title":{},"body":{"modules/HealthModule.html":{}}}],["timestamp",{"_index":589,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["timestamp\":\"${new",{"_index":590,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["title",{"_index":93,"title":{},"body":{"controllers/AppController.html":{},"classes/NewRecipeInput.html":{},"classes/Recipe.html":{}}}],["tkey",{"_index":196,"title":{},"body":{"injectables/CacheService.html":{}}}],["topic",{"_index":781,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["touch",{"_index":1060,"title":{},"body":{"index.html":{}}}],["tovalidate",{"_index":879,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["tovalidate(metatype",{"_index":880,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["transform",{"_index":647,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["transform(value",{"_index":648,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["transformer",{"_index":885,"title":{},"body":{"injectables/ValidationPipe.html":{},"dependencies.html":{}}}],["transforminterceptor",{"_index":293,"title":{"injectables/TransformInterceptor.html":{}},"body":{"modules/CoreModule.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["translatetime",{"_index":580,"title":{},"body":{"modules/NestPinoModule.html":{},"miscellaneous/variables.html":{}}}],["transport",{"_index":607,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["true",{"_index":91,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/CacheService.html":{},"modules/NestConfigModule.html":{},"modules/NestPinoModule.html":{},"classes/NewRecipeInput.html":{},"classes/Recipe.html":{},"injectables/RecipesService.html":{},"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["true})@isoptional()@length(30",{"_index":630,"title":{},"body":{"classes/NewRecipeInput.html":{}}}],["ts",{"_index":981,"title":{},"body":{"dependencies.html":{}}}],["ttl",{"_index":203,"title":{},"body":{"injectables/CacheService.html":{},"miscellaneous/variables.html":{}}}],["twitter",{"_index":1065,"title":{},"body":{"index.html":{}}}],["type",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"interfaces/CacheModuleOptions.html":{},"injectables/CacheService.html":{},"interfaces/Cat.html":{},"controllers/CatsController.html":{},"injectables/CatsService.html":{},"interfaces/Config.html":{},"classes/CreateCatDto.html":{},"classes/CustomHttpException.html":{},"classes/DateScalar.html":{},"injectables/ExceptionInterceptor.html":{},"classes/GlobalExceptionFilter.html":{},"classes/HttpError.html":{},"interfaces/ICacheStore.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"modules/NestCacheModule.html":{},"classes/NewRecipeInput.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostService.html":{},"classes/Recipe.html":{},"classes/RecipesArgs.html":{},"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TerminusLogger.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1083,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":183,"title":{},"body":{"interfaces/CacheModuleOptions.html":{},"classes/HttpError.html":{},"modules/NestCacheModule.html":{}}}],["types",{"_index":209,"title":{},"body":{"injectables/CacheService.html":{},"injectables/ValidationPipe.html":{}}}],["types.find(type",{"_index":893,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["typescript",{"_index":1014,"title":{},"body":{"index.html":{}}}],["unauthorized",{"_index":990,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["unauthorized_share",{"_index":991,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["unauthorizedexception",{"_index":412,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["undefined",{"_index":218,"title":{},"body":{"injectables/CacheService.html":{}}}],["unit",{"_index":1038,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":652,"title":{},"body":{"injectables/ParseIntPipe.html":{},"classes/RecipesResolver.html":{},"injectables/TerminusLogger.html":{},"injectables/ValidationPipe.html":{}}}],["unknown_error_code",{"_index":997,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["unlicensed",{"_index":1082,"title":{},"body":{"properties.html":{}}}],["up",{"_index":1028,"title":{},"body":{"index.html":{}}}],["updatepost",{"_index":669,"title":{},"body":{"injectables/PostService.html":{}}}],["updatepost(params",{"_index":684,"title":{},"body":{"injectables/PostService.html":{}}}],["updateuser",{"_index":853,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuser(params",{"_index":862,"title":{},"body":{"injectables/UserService.html":{}}}],["uri",{"_index":1167,"title":{},"body":{"miscellaneous/variables.html":{}}}],["url",{"_index":438,"title":{},"body":{"classes/GlobalExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["use",{"_index":521,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["use(req",{"_index":522,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["useclass",{"_index":296,"title":{},"body":{"modules/CoreModule.html":{}}}],["used",{"_index":466,"title":{},"body":{"controllers/HealthController.html":{},"miscellaneous/variables.html":{}}}],["usefactory",{"_index":586,"title":{},"body":{"modules/NestPinoModule.html":{},"miscellaneous/variables.html":{}}}],["useguards",{"_index":239,"title":{},"body":{"controllers/CatsController.html":{}}}],["useguards(rolesguard",{"_index":253,"title":{},"body":{"controllers/CatsController.html":{}}}],["useinterceptors",{"_index":240,"title":{},"body":{"controllers/CatsController.html":{}}}],["user",{"_index":73,"title":{},"body":{"controllers/AppController.html":{},"guards/RolesGuard.html":{},"injectables/UserService.html":{}}}],["user(userwhereuniqueinput",{"_index":864,"title":{},"body":{"injectables/UserService.html":{}}}],["user.roles",{"_index":828,"title":{},"body":{"guards/RolesGuard.html":{}}}],["user.roles.find(role",{"_index":824,"title":{},"body":{"guards/RolesGuard.html":{}}}],["user.service",{"_index":849,"title":{},"body":{"modules/UserModule.html":{}}}],["user/user.module",{"_index":140,"title":{},"body":{"modules/AppModule.html":{}}}],["user/user.service",{"_index":70,"title":{},"body":{"controllers/AppController.html":{}}}],["userdata",{"_index":59,"title":{},"body":{"controllers/AppController.html":{}}}],["useredissets",{"_index":1174,"title":{},"body":{"miscellaneous/variables.html":{}}}],["usermodel",{"_index":74,"title":{},"body":{"controllers/AppController.html":{}}}],["usermodule",{"_index":130,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":1216,"title":{},"body":{"miscellaneous/variables.html":{}}}],["username_regex",{"_index":912,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["users",{"_index":854,"title":{},"body":{"injectables/UserService.html":{}}}],["users(params",{"_index":867,"title":{},"body":{"injectables/UserService.html":{}}}],["userservice",{"_index":69,"title":{"injectables/UserService.html":{}},"body":{"controllers/AppController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["userwhereuniqueinput",{"_index":866,"title":{},"body":{"injectables/UserService.html":{}}}],["v",{"_index":1130,"title":{},"body":{"miscellaneous/variables.html":{}}}],["val",{"_index":654,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["valid(...app_environments",{"_index":1121,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validate",{"_index":886,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["validate(object",{"_index":890,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["validatecustomdecorators",{"_index":1148,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validation_error",{"_index":989,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["validationoptions",{"_index":562,"title":{},"body":{"modules/NestConfigModule.html":{}}}],["validationpipe",{"_index":877,"title":{"injectables/ValidationPipe.html":{}},"body":{"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["validationpipeoptions",{"_index":1144,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validationschema",{"_index":560,"title":{},"body":{"modules/NestConfigModule.html":{}}}],["validator",{"_index":305,"title":{},"body":{"classes/CreateCatDto.html":{},"classes/NewRecipeInput.html":{},"classes/RecipesArgs.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{}}}],["value",{"_index":202,"title":{},"body":{"injectables/CacheService.html":{},"injectables/CatsService.html":{},"classes/DateScalar.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/ParseIntPipe.html":{},"classes/RecipesArgs.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["value.gettime",{"_index":362,"title":{},"body":{"classes/DateScalar.html":{}}}],["valuenode",{"_index":350,"title":{},"body":{"classes/DateScalar.html":{}}}],["variable",{"_index":902,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["variables",{"_index":1085,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":1080,"title":{},"body":{"properties.html":{},"miscellaneous/variables.html":{}}}],["void",{"_index":52,"title":{},"body":{"controllers/AppController.html":{},"injectables/CatsService.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"injectables/TerminusLogger.html":{}}}],["w",{"_index":1213,"title":{},"body":{"miscellaneous/variables.html":{}}}],["watch",{"_index":1033,"title":{},"body":{"index.html":{}}}],["website",{"_index":1063,"title":{},"body":{"index.html":{}}}],["whitelist",{"_index":1145,"title":{},"body":{"miscellaneous/variables.html":{}}}],["with('memory",{"_index":1165,"title":{},"body":{"miscellaneous/variables.html":{}}}],["with('redis",{"_index":1172,"title":{},"body":{"miscellaneous/variables.html":{}}}],["with('sqlite",{"_index":1166,"title":{},"body":{"miscellaneous/variables.html":{}}}],["world",{"_index":164,"title":{},"body":{"injectables/AppService.html":{}}}],["yarn",{"_index":1019,"title":{},"body":{"index.html":{}}}],["yes",{"_index":206,"title":{},"body":{"injectables/CacheService.html":{},"injectables/TerminusLogger.html":{}}}],["you'd",{"_index":1054,"title":{},"body":{"index.html":{}}}],["z])(?=.*[a",{"_index":1206,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z])(?=.*\\d)(?=.*\\w",{"_index":1207,"title":{},"body":{"miscellaneous/variables.html":{}}}],["zoom",{"_index":131,"title":{},"body":{"modules/AppModule.html":{},"modules/CatsModule.html":{},"modules/HealthModule.html":{},"modules/NestConfigModule.html":{},"modules/PostModule.html":{},"modules/PrismaModule.html":{},"modules/RecipesModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                createDraft\n                            \n                            \n                                    \n                                    Async\n                                deletePost\n                            \n                            \n                                    \n                                    Async\n                                getFilteredPosts\n                            \n                            \n                                    \n                                getHello\n                            \n                            \n                                    \n                                    Async\n                                getPostById\n                            \n                            \n                                    \n                                    Async\n                                getPublishedPosts\n                            \n                            \n                                    \n                                index\n                            \n                            \n                                    \n                                    Async\n                                publishPost\n                            \n                            \n                                    \n                                    Async\n                                signupUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        createDraft\n                        \n                    \n                \n            \n            \n                \n                        \n                    createDraft(postData: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('post')\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:65\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                postData\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    deletePost(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('post/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:94\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getFilteredPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getFilteredPosts(searchString: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('filtered-posts/:searchString')\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                searchString\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:25\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getPostById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPostById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('post/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getPublishedPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublishedPosts()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('feed')\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:40\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        index\n                        \n                    \n                \n            \n            \n                \n                        \n                    index(res: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/res')\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        publishPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    publishPost(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('publish/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:86\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        signupUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    signupUser(userData: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('user')\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:79\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userData\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Param,\n  Post,\n  Body,\n  Put,\n  Delete,\n  Res,\n} from '@nestjs/common';\nimport { AppService } from './app.service';\nimport { UserService } from './user/user.service';\nimport { PostService } from './post/post.service';\nimport { User as UserModel, Post as PostModel } from '@prisma/client';\n\n@Controller()\nexport class AppController {\n  constructor(\n    private readonly appService: AppService,\n    private readonly userService: UserService,\n    private readonly postService: PostService,\n  ) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n\n  @Get('/res')\n  index(@Res() res: any) {\n    res.status(302).redirect('/login');\n  }\n\n  @Get('post/:id')\n  async getPostById(@Param('id') id: string): Promise {\n    return this.postService.post({ id: Number(id) });\n  }\n\n  @Get('feed')\n  async getPublishedPosts(): Promise {\n    return this.postService.posts({\n      where: { published: true },\n    });\n  }\n\n  @Get('filtered-posts/:searchString')\n  async getFilteredPosts(\n    @Param('searchString') searchString: string,\n  ): Promise {\n    return this.postService.posts({\n      where: {\n        OR: [\n          {\n            title: { contains: searchString },\n          },\n          {\n            content: { contains: searchString },\n          },\n        ],\n      },\n    });\n  }\n\n  @Post('post')\n  async createDraft(\n    @Body() postData: { title: string; content?: string; authorEmail: string },\n  ): Promise {\n    const { title, content, authorEmail } = postData;\n    return this.postService.createPost({\n      title,\n      content,\n      author: {\n        connect: { email: authorEmail },\n      },\n    });\n  }\n\n  @Post('user')\n  async signupUser(\n    @Body() userData: { name?: string; email: string },\n  ): Promise {\n    return this.userService.createUser(userData);\n  }\n\n  @Put('publish/:id')\n  async publishPost(@Param('id') id: string): Promise {\n    return this.postService.updatePost({\n      where: { id: Number(id) },\n      data: { published: true },\n    });\n  }\n\n  @Delete('post/:id')\n  async deletePost(@Param('id') id: string): Promise {\n    return this.postService.deletePost({ id: Number(id) });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nCatsModule\n\nCatsModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nCatsModule->AppModule\n\n\n\n\n\nCoreModule\n\nCoreModule\n\nAppModule -->\n\nCoreModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nNestCacheModule\n\nNestCacheModule\n\nAppModule -->\n\nNestCacheModule->AppModule\n\n\n\n\n\nNestConfigModule\n\nNestConfigModule\n\nAppModule -->\n\nNestConfigModule->AppModule\n\n\n\n\n\nNestPinoModule\n\nNestPinoModule\n\nAppModule -->\n\nNestPinoModule->AppModule\n\n\n\n\n\nPostModule\n\nPostModule\n\nAppModule -->\n\nPostModule->AppModule\n\n\n\n\n\nRecipesModule\n\nRecipesModule\n\nAppModule -->\n\nRecipesModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CatsModule\n                        \n                        \n                            CoreModule\n                        \n                        \n                            HealthModule\n                        \n                        \n                            NestCacheModule\n                        \n                        \n                            NestConfigModule\n                        \n                        \n                            NestPinoModule\n                        \n                        \n                            PostModule\n                        \n                        \n                            RecipesModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { CoreModule } from './core/core.module';\nimport { CatsModule } from './cats/cats.module';\nimport { PostModule } from './post/post.module';\nimport { UserModule } from './user/user.module';\nimport { GraphQLModule } from '@nestjs/graphql';\nimport { MercuriusDriver, MercuriusDriverConfig } from '@nestjs/mercurius';\nimport { RecipesModule } from './recipes/recipes.module';\nimport { HealthModule } from './health/health.module';\nimport { NestConfigModule } from '@core/config';\nimport { NestPinoModule } from '@core/pino';\nimport { NestCacheModule } from '@core/cache';\n\n@Module({\n  imports: [\n    NestConfigModule,\n    NestPinoModule,\n    NestCacheModule.register({ global: true }),\n    CoreModule,\n    GraphQLModule.forRoot({\n      driver: MercuriusDriver,\n      autoSchemaFile: 'schema.gql',\n      subscription: true,\n      graphiql: true,\n    }),\n    RecipesModule,\n    CatsModule,\n    UserModule,\n    PostModule,\n    HealthModule\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CacheModuleOptions.html":{"url":"interfaces/CacheModuleOptions.html","title":"interface - CacheModuleOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CacheModuleOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/cache/cache.module.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            global\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        global\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        global:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ConfigurableModuleBuilder, type DynamicModule, Module } from '@nestjs/common';\nimport { CacheProvider } from './cache.provider';\n\nexport interface CacheModuleOptions {\n  global?: boolean;\n}\n\nexport const { ConfigurableModuleClass: CacheModuleClass, OPTIONS_TYPE } =\n  new ConfigurableModuleBuilder().build();\n\n@Module({\n  providers: [CacheProvider],\n  exports: [CacheProvider],\n})\nexport class NestCacheModule extends CacheModuleClass {\n  static register(options: typeof OPTIONS_TYPE): DynamicModule {\n    return {\n      global: options.global,\n      ...super.register(options),\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CacheService.html":{"url":"injectables/CacheService.html","title":"injectable - CacheService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CacheService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/cache/cache.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                del\n                            \n                            \n                                    Async\n                                get\n                            \n                            \n                                    Async\n                                set\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(cacheManager: Store, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/core/cache/cache.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cacheManager\n                                                  \n                                                        \n                                                                    Store\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        del\n                        \n                    \n                \n            \n            \n                \n                        \n                    del(key: TKey)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/cache/cache.service.ts:26\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    TKey\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                        TKey\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                        \n                    get(key: TKey)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/cache/cache.service.ts:13\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    TKey\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                        TKey\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        set\n                        \n                    \n                \n            \n            \n                \n                        \n                    set(key: TKey, value, ttl?: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/cache/cache.service.ts:17\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    TKey\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                        TKey\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                value\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                ttl\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { type Store } from 'keyv';\nimport type { ICacheStore } from './types';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class CacheService {\n  constructor(\n    private readonly cacheManager: Store,\n    private readonly configService: ConfigService\n  ) {}\n\n  async get(key: TKey): Promise {\n    return this.cacheManager.get(key);\n  }\n\n  async set(\n    key: TKey,\n    value: ICacheStore[TKey],\n    ttl?: number\n  ): Promise {\n    ttl = ttl || this.configService.get('cache.ttl', { infer: true });\n    await this.cacheManager.set(key, value, ttl ? ttl * 1000 : undefined);\n  }\n\n  async del(key: TKey): Promise {\n    await this.cacheManager.delete(key);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Cat.html":{"url":"interfaces/Cat.html","title":"interface - Cat","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Cat\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cats/interfaces/cat.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            age\n                                        \n                                \n                                \n                                        \n                                            breed\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        age\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        age:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        breed\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        breed:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Cat {\n  readonly name: string;\n  readonly age: number;\n  readonly breed: string;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CatsController.html":{"url":"controllers/CatsController.html","title":"controller - CatsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CatsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cats/cats.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                cats\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createCatDto: CreateCatDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@Roles('admin')\n                \n            \n\n                    \n                        \n                            Defined in src/cats/cats.controller.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createCatDto\n                                            \n                                                            CreateCatDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/cats/cats.controller.ts:25\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/cats/cats.controller.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Param, Post, UseGuards, UseInterceptors } from '@nestjs/common';\nimport { Roles } from '../common/decorators/roles.decorator';\nimport { RolesGuard } from '../common/guards/roles.guard';\nimport { ParseIntPipe } from '../common/pipes/parse-int.pipe';\nimport { CatsService } from './cats.service';\nimport { CreateCatDto } from './dto/create-cat.dto';\nimport { Cat } from './interfaces/cat.interface';\nimport { CacheService } from '@core/cache';\n\n@UseGuards(RolesGuard)\n@Controller('cats')\nexport class CatsController {\n  constructor(\n    private readonly catsService: CatsService,\n    private readonly cacheService: CacheService,\n  ) {}\n\n  @Post()\n  @Roles('admin')\n  async create(@Body() createCatDto: CreateCatDto) {\n    this.catsService.create(createCatDto);\n  }\n\n  @Get()\n  async findAll(): Promise {\n    const cached = await this.cacheService.get('findAll');\n    if (cached) return cached\n\n    const cats = this.catsService.findAll();\n    await this.cacheService.set('findAll', cats, 10);\n    return cats\n  }\n\n\n  @Get(':id')\n  findOne(\n    @Param('id', new ParseIntPipe())\n    id: number,\n  ) {\n    return id;\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CatsModule.html":{"url":"modules/CatsModule.html","title":"module - CatsModule","body":"\n                   \n\n\n\n\n    Modules\n    CatsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CatsModule\n\n\n\ncluster_CatsModule_providers\n\n\n\n\nCatsService\n\nCatsService\n\n\n\nCatsModule\n\nCatsModule\n\nCatsModule -->\n\nCatsService->CatsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/cats/cats.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CatsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CatsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CatsController } from './cats.controller';\nimport { CatsService } from './cats.service';\n\n@Module({\n  controllers: [CatsController],\n  providers: [CatsService],\n})\nexport class CatsModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CatsService.html":{"url":"injectables/CatsService.html","title":"injectable - CatsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CatsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cats/cats.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                cats\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(cat: Cat)\n                \n            \n\n\n                    \n                        \n                            Defined in src/cats/cats.service.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                cat\n                                            \n                                                            Cat\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/cats/cats.service.ts:12\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Cat[]\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        cats\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Cat[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/cats/cats.service.ts:6\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Cat } from './interfaces/cat.interface';\n\n@Injectable()\nexport class CatsService {\n  private readonly cats: Cat[] = [];\n\n  create(cat: Cat) {\n    this.cats.push(cat);\n  }\n\n  findAll(): Cat[] {\n    return this.cats.concat({\n      name: 'hello',\n      age: 10,\n      breed: 'hello ' + Date.now(),\n    });\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Config.html":{"url":"interfaces/Config.html","title":"interface - Config","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Config\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/config/config.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            app\n                                        \n                                \n                                \n                                        \n                                            cache\n                                        \n                                \n                                \n                                        \n                                            redis\n                                        \n                                \n                                \n                                        \n                                            sqlite\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        app\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        app:         ConfigType<>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ConfigType<>\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        cache\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cache:         ConfigType<>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ConfigType<>\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        redis\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        redis:         ConfigType<>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ConfigType<>\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sqlite\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sqlite:         ConfigType<>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ConfigType<>\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ConfigType } from \"@nestjs/config\";\nimport { app } from \"./app.config\";\nimport { redis } from \"./redis.config\";\nimport { cache } from \"./cache.config\";\nimport { sqlite } from \"./sqlite.config\";\n\nexport interface Config {\n  app: ConfigType;\n  cache: ConfigType;\n  redis: ConfigType;\n  sqlite: ConfigType;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CoreModule.html":{"url":"modules/CoreModule.html","title":"module - CoreModule","body":"\n                   \n\n\n\n\n    Modules\n    CoreModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/core.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { APP_INTERCEPTOR } from '@nestjs/core';\nimport { LoggingInterceptor } from './interceptors/logging.interceptor';\nimport { TransformInterceptor } from './interceptors/transform.interceptor';\n\n@Module({\n  providers: [\n    { provide: APP_INTERCEPTOR, useClass: TransformInterceptor },\n    { provide: APP_INTERCEPTOR, useClass: LoggingInterceptor },\n  ],\n})\nexport class CoreModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCatDto.html":{"url":"classes/CreateCatDto.html","title":"class - CreateCatDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCatDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cats/dto/create-cat.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Readonly\n                                age\n                            \n                            \n                                    \n                                    Readonly\n                                breed\n                            \n                            \n                                    \n                                    Readonly\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        age\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/cats/dto/create-cat.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        breed\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/cats/dto/create-cat.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/cats/dto/create-cat.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, IsString } from 'class-validator';\n\nexport class CreateCatDto {\n  @IsString()\n  readonly name: string;\n\n  @IsInt()\n  readonly age: number;\n\n  @IsString()\n  readonly breed: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CustomHttpException.html":{"url":"classes/CustomHttpException.html","title":"class - CustomHttpException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CustomHttpException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/exception/custom.exception.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        HttpException\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string, code: HttpErrorCode)\n                    \n                \n                        \n                            \n                                Defined in src/common/exception/custom.exception.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        code\n                                                  \n                                                        \n                                                                        HttpErrorCode\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/common/exception/custom.exception.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpException, HttpStatus } from '@nestjs/common';\nimport { ErrorCodeToStatusMap, HttpErrorCode } from '../errors';\n\nexport class CustomHttpException extends HttpException {\n  code: string;\n\n  constructor(message: string, code: HttpErrorCode) {\n    super(message, ErrorCodeToStatusMap[code]);\n    this.code = code;\n  }\n}\n\nexport const getDefaultCodeByStatus = (status: HttpStatus) => {\n  switch (status) {\n    case HttpStatus.BAD_REQUEST:\n      return HttpErrorCode.VALIDATION_ERROR;\n    case HttpStatus.UNAUTHORIZED:\n      return HttpErrorCode.UNAUTHORIZED;\n    case HttpStatus.FORBIDDEN:\n      return HttpErrorCode.RESTRICTED_RESOURCE;\n    case HttpStatus.NOT_FOUND:\n      return HttpErrorCode.NOT_FOUND;\n    case HttpStatus.INTERNAL_SERVER_ERROR:\n      return HttpErrorCode.INTERNAL_SERVER_ERROR;\n    case HttpStatus.SERVICE_UNAVAILABLE:\n      return HttpErrorCode.DATABASE_CONNECTION_UNAVAILABLE;\n    default:\n      return HttpErrorCode.UNKNOWN_ERROR_CODE;\n  }\n};\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DateScalar.html":{"url":"classes/DateScalar.html","title":"class - DateScalar","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DateScalar\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/scalars/date.scalar.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        CustomScalar\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                parseLiteral\n                            \n                            \n                                parseValue\n                            \n                            \n                                serialize\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'Date custom scalar type'\n                    \n                \n                    \n                        \n                                Defined in src/common/scalars/date.scalar.ts:6\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        parseLiteral\n                        \n                    \n                \n            \n            \n                \nparseLiteral(ast: ValueNode)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/scalars/date.scalar.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                ast\n                                            \n                                                        ValueNode\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Date\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parseValue\n                        \n                    \n                \n            \n            \n                \nparseValue(value: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/scalars/date.scalar.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Date\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serialize\n                        \n                    \n                \n            \n            \n                \nserialize(value: Date)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/scalars/date.scalar.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { CustomScalar, Scalar } from '@nestjs/graphql';\nimport { Kind, ValueNode } from 'graphql';\n\n@Scalar('Date', type => Date)\nexport class DateScalar implements CustomScalar {\n  description = 'Date custom scalar type';\n\n  parseValue(value: number): Date {\n    return new Date(value); // value from the client\n  }\n\n  serialize(value: Date): number {\n    return value.getTime(); // value sent to the client\n  }\n\n  parseLiteral(ast: ValueNode): Date {\n    if (ast.kind === Kind.INT) {\n      return new Date(ast.value);\n    }\n    return null;\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExceptionInterceptor.html":{"url":"injectables/ExceptionInterceptor.html","title":"injectable - ExceptionInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ExceptionInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/exception.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/interceptors/exception.interceptor.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  HttpException,\n  HttpStatus,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\n@Injectable()\nexport class ExceptionInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    return next\n      .handle()\n      .pipe(\n        catchError(err =>\n          throwError(\n            () =>\n              new HttpException(\n                'Exception interceptor message',\n                HttpStatus.BAD_GATEWAY,\n              ),\n          ),\n        ),\n      );\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GlobalExceptionFilter.html":{"url":"classes/GlobalExceptionFilter.html","title":"class - GlobalExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GlobalExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/global-exception.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                            \n                                    Protected\n                                logError\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/core/filters/global-exception.filter.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(GlobalExceptionFilter.name)\n                    \n                \n                    \n                        \n                                Defined in src/core/filters/global-exception.filter.ts:19\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: Error | HttpException, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/filters/global-exception.filter.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                        Error | HttpException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        logError\n                        \n                    \n                \n            \n            \n                \n                        \n                    logError(exception: Error, request: FastifyRequest)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/filters/global-exception.filter.ts:63\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                        Error\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                request\n                                            \n                                                        FastifyRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import type { ArgumentsHost, ExceptionFilter } from '@nestjs/common';\nimport {\n  BadRequestException,\n  Catch,\n  ForbiddenException,\n  HttpException,\n  HttpStatus,\n  Logger,\n  NotFoundException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { CustomHttpException, getDefaultCodeByStatus } from '@common/exception';\nimport { HttpErrorCode } from '@common/errors';\nimport type { FastifyReply, FastifyRequest } from 'fastify';\n\n@Catch()\nexport class GlobalExceptionFilter implements ExceptionFilter {\n  private logger = new Logger(GlobalExceptionFilter.name);\n\n  constructor(private readonly configService: ConfigService) {}\n\n  catch(exception: Error | HttpException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n\n    if (\n      !(\n        exception instanceof BadRequestException ||\n        exception instanceof UnauthorizedException ||\n        exception instanceof ForbiddenException ||\n        exception instanceof NotFoundException\n      )\n    ) {\n      this.logError(exception, request);\n    }\n\n    if (exception instanceof CustomHttpException) {\n      const customException = exception as CustomHttpException;\n      const status = customException.getStatus();\n      return response.status(status).send({\n        message: exception.message,\n        status: status,\n        code: customException.code,\n      });\n    }\n\n    if (exception instanceof HttpException) {\n      const status = exception.getStatus();\n      return response\n        .status(status)\n        .send({ message: exception.message, status, code: getDefaultCodeByStatus(status) });\n    }\n\n    response.status(HttpStatus.INTERNAL_SERVER_ERROR).send({\n      message: 'Internal Server Error',\n      status: HttpStatus.INTERNAL_SERVER_ERROR,\n      code: HttpErrorCode.INTERNAL_SERVER_ERROR,\n    });\n  }\n\n  protected logError(exception: Error, request: FastifyRequest) {\n    this.logger.error(\n      {\n        url: request?.url,\n        message: exception.message,\n      },\n      exception.stack\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HealthController.html":{"url":"controllers/HealthController.html","title":"controller - HealthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HealthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health/health.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                health\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                check\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        check\n                        \n                    \n                \n            \n            \n                \n                        \n                    check()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HealthCheck()\n                \n            \n\n                    \n                        \n                            Defined in src/health/health.controller.ts:18\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { HealthCheckService, HttpHealthIndicator, HealthCheck, PrismaHealthIndicator, DiskHealthIndicator, MemoryHealthIndicator } from '@nestjs/terminus';\nimport { PrismaService } from '../prisma/prisma.service';\n\n@Controller('health')\nexport class HealthController {\n  constructor(\n    private health: HealthCheckService,\n    private http: HttpHealthIndicator,\n    private prismaHealth: PrismaHealthIndicator,\n    private prisma: PrismaService,\n    private disk: DiskHealthIndicator,\n    private memory: MemoryHealthIndicator,\n  ) {}\n\n  @Get()\n  @HealthCheck()\n  check() {\n    return this.health.check([\n      () => this.http.pingCheck('nestjs-docs', 'https://docs.nestjs.com'),\n      // The used disk storage should not exceed 50% of the full disk size\n      () =>\n        this.disk.checkStorage('disk health', {\n          thresholdPercent: 0.5,\n          path: '/',\n        }),\n      // The used disk storage should not exceed 250 GB\n      () =>\n        this.disk.checkStorage('disk health', {\n          threshold: 250 * 1024 * 1024 * 1024,\n          path: '/',\n        }),\n\n      () => this.memory.checkHeap('memory_heap', 200 * 1024 * 1024),\n      () => this.memory.checkRSS('memory_rss', 3000 * 1024 * 1024),\n      // prisma\n      () => this.prismaHealth.pingCheck('prisma', this.prisma),\n    ]);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HealthModule.html":{"url":"modules/HealthModule.html","title":"module - HealthModule","body":"\n                   \n\n\n\n\n    Modules\n    HealthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_HealthModule\n\n\n\ncluster_HealthModule_imports\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nHealthModule\n\nHealthModule\n\nHealthModule -->\n\nPrismaModule->HealthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/health/health.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            HealthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TerminusModule } from '@nestjs/terminus';\nimport { HttpModule } from '@nestjs/axios';\nimport { HealthController } from './health.controller';\nimport { PrismaModule } from '../prisma/prisma.module';\nimport { TerminusLogger } from './terminus-logger.service';\n\n@Module({\n  imports: [\n    TerminusModule.forRoot({\n      logger: TerminusLogger,\n    }),\n    TerminusModule.forRoot({\n      logger: false,\n      errorLogStyle: 'pretty',\n      // https://docs.nestjs.com/recipes/terminus#graceful-shutdown-timeout\n      gracefulShutdownTimeoutMs: 1000,\n    }),\n    HttpModule,\n    PrismaModule\n  ],\n  controllers: [HealthController],\n})\nexport class HealthModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpError.html":{"url":"classes/HttpError.html","title":"class - HttpError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/errors/http.error.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Error\n            \n\n            \n                Implements\n            \n            \n                            IHttpError\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                            \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(error: string | literal type, status: number)\n                    \n                \n                        \n                            \n                                Defined in src/common/errors/http.error.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        error\n                                                  \n                                                        \n                                                                    string | literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        status\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         HttpErrorCode\n\n                    \n                \n                    \n                        \n                                Defined in src/common/errors/http.error.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/common/errors/http.error.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import type { IHttpError } from './http-response.types';\nimport { HttpErrorCode } from './http-response.types';\n\nexport class HttpError extends Error implements IHttpError {\n  status: number;\n  code: HttpErrorCode;\n\n  constructor(error: string | { message?: string; code?: HttpErrorCode }, status: number) {\n    const { message = 'Error', code = HttpErrorCode.INTERNAL_SERVER_ERROR } =\n      typeof error === 'string' ? { message: error } : error;\n    super(message);\n    this.status = status;\n    this.code = code;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ICacheStore.html":{"url":"interfaces/ICacheStore.html","title":"interface - ICacheStore","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ICacheStore\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/cache/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            findAll\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: template literal type]:    literal type\n\n                    \n                \n                        \n                            \n                                Defined in src/core/cache/types.ts:2\n                            \n                        \n            \n        \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        findAll\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        findAll:     any[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     any[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ICacheStore {\n  findAll: any[];\n  [key: `findOne:${string}`]: {};\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggerMiddleware.html":{"url":"injectables/LoggerMiddleware.html","title":"injectable - LoggerMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggerMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/middleware/logger.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(req: any, res: any, next: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/middleware/logger.middleware.ts:5\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware } from '@nestjs/common';\n\n@Injectable()\nexport class LoggerMiddleware implements NestMiddleware {\n  use(req: any, res: any, next: () => void) {\n    console.log(`Request...`);\n    next();\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggingInterceptor.html":{"url":"injectables/LoggingInterceptor.html","title":"injectable - LoggingInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggingInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/logging.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/interceptors/logging.interceptor.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable()\nexport class LoggingInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    console.log('Before...');\n\n    const now = Date.now();\n    return next\n      .handle()\n      .pipe(tap(() => console.log(`After... ${Date.now() - now}ms`)));\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/NestCacheModule.html":{"url":"modules/NestCacheModule.html","title":"module - NestCacheModule","body":"\n                   \n\n\n\n\n    Modules\n    NestCacheModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/cache/cache.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(options)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/cache/cache.module.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                options\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     DynamicModule\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n\n\n    \n        import { ConfigurableModuleBuilder, type DynamicModule, Module } from '@nestjs/common';\nimport { CacheProvider } from './cache.provider';\n\nexport interface CacheModuleOptions {\n  global?: boolean;\n}\n\nexport const { ConfigurableModuleClass: CacheModuleClass, OPTIONS_TYPE } =\n  new ConfigurableModuleBuilder().build();\n\n@Module({\n  providers: [CacheProvider],\n  exports: [CacheProvider],\n})\nexport class NestCacheModule extends CacheModuleClass {\n  static register(options: typeof OPTIONS_TYPE): DynamicModule {\n    return {\n      global: options.global,\n      ...super.register(options),\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/NestConfigModule.html":{"url":"modules/NestConfigModule.html","title":"module - NestConfigModule","body":"\n                   \n\n\n\n\n    Modules\n    NestConfigModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_NestConfigModule\n\n\n\ncluster_NestConfigModule_exports\n\n\n\n\nConfigService \n\nConfigService \n\n\n\nNestConfigModule\n\nNestConfigModule\n\nConfigService  -->\n\nNestConfigModule->ConfigService \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/config/config.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Exports\n                    \n                        \n                            ConfigService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport Joi from 'joi';\nimport { HelperService } from '@common/helpers';\nimport { app, appConfigValidationSchema } from './app.config';\nimport { redis, redisConfigValidationSchema } from './redis.config';\nimport { cache, cacheConfigValidationSchema } from './cache.config';\nimport { sqlite, sqliteConfigValidationSchema } from './sqlite.config';\n\nconst provider = process.env.CACHE_PROVIDER;\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      envFilePath: [HelperService.getEnvFile()],\n      load: [\n        app,\n        provider === 'redis' ? redis : (provider === 'sqlite' ? sqlite : cache),\n      ].filter(_ => _),\n      cache: true,\n      isGlobal: true,\n      expandVariables: true,\n      validationSchema: Joi.object({\n        ...appConfigValidationSchema,\n        ...(provider === 'redis' ? redisConfigValidationSchema : (provider === 'sqlite' ? sqliteConfigValidationSchema : cacheConfigValidationSchema))\n      }),\n      validationOptions: {\n        abortEarly: true,\n        cache: !HelperService.isProd(),\n        debug: !HelperService.isProd(),\n        stack: !HelperService.isProd(),\n      },\n    }),\n  ],\n  providers: [ConfigService],\n  exports: [ConfigService],\n})\nexport class NestConfigModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/NestPinoModule.html":{"url":"modules/NestPinoModule.html","title":"module - NestPinoModule","body":"\n                   \n\n\n\n\n    Modules\n    NestPinoModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/pino/pino.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { HelperService } from '@common/helpers';\nimport { Module, RequestMethod } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { LoggerModule } from 'nestjs-pino';\n\n// Fields to redact from logs\nconst redactFields = [\n  'req.headers.authorization',\n  'req.body.password',\n  'req.body.confirmPassword',\n];\nconst basePinoOptions = {\n  translateTime: true,\n  ignore: 'pid,hostname',\n  singleLine: true,\n  redact: redactFields,\n};\n\n@Module({\n  imports: [\n    LoggerModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (_configService: ConfigService) => ({\n        pinoHttp: {\n          timestamp: () =>\n            `,\"timestamp\":\"${new Date(Date.now()).toISOString()}\"`,\n          name: 'backend-api',\n          customProps: (_request: any, _response: any) => ({\n            context: 'HTTP',\n          }),\n          serializers: {\n            req(request: {\n              body: Record;\n              raw: {\n                body: Record;\n              };\n            }) {\n              request.body = request.raw.body;\n\n              return request;\n            },\n          },\n          redact: {\n            paths: redactFields,\n            censor: '**GDPR COMPLIANT**',\n          },\n          transport: HelperService.isProd()\n            ? {\n                targets: [\n                  {\n                    target: 'pino/file',\n                    level: 'info',\n                    options: {\n                      ...basePinoOptions,\n                      destination: 'logs/info.log',\n                      mkdir: true,\n                      sync: false,\n                    },\n                  },\n                  {\n                    target: 'pino/file',\n                    level: 'error', // log only errors to file\n                    options: {\n                      ...basePinoOptions,\n                      destination: 'logs/error.log',\n                      mkdir: true,\n                      sync: false,\n                    },\n                  },\n                ],\n              }\n            : {\n                targets: [\n                  {\n                    target: 'pino-pretty',\n                    level: 'info', // log only info and above to console\n                    options: {\n                      ...basePinoOptions,\n                      colorize: true,\n                    },\n                  },\n                  {\n                    target: 'pino/file',\n                    level: 'error',\n                    options: {\n                      ...basePinoOptions,\n                      destination: 'logs/error.log',\n                      mkdir: true,\n                      sync: false,\n                    },\n                  },\n                ],\n              },\n        },\n        exclude: [{ method: RequestMethod.ALL, path: 'doc' }],\n      }),\n    }),\n  ],\n  exports: [LoggerModule],\n})\nexport class NestPinoModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NewRecipeInput.html":{"url":"classes/NewRecipeInput.html","title":"class - NewRecipeInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NewRecipeInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/recipes/dto/new-recipe.input.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                ingredients\n                            \n                            \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({nullable: true})@IsOptional()@Length(30, 255)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipes/dto/new-recipe.input.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        ingredients\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(type => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipes/dto/new-recipe.input.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()@MaxLength(30)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipes/dto/new-recipe.input.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, InputType } from '@nestjs/graphql';\nimport { IsOptional, Length, MaxLength } from 'class-validator';\n\n@InputType()\nexport class NewRecipeInput {\n  @Field()\n  @MaxLength(30)\n  title: string;\n\n  @Field({ nullable: true })\n  @IsOptional()\n  @Length(30, 255)\n  description?: string;\n\n  @Field(type => [String])\n  ingredients: string[];\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ParseIntPipe.html":{"url":"injectables/ParseIntPipe.html","title":"injectable - ParseIntPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ParseIntPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pipes/parse-int.pipe.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        transform\n                        \n                    \n                \n            \n            \n                \n                        \n                    transform(value: string, metadata: ArgumentMetadata)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/pipes/parse-int.pipe.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                metadata\n                                            \n                                                        ArgumentMetadata\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException } from '@nestjs/common';\nimport { PipeTransform, Injectable, ArgumentMetadata } from '@nestjs/common';\n\n@Injectable()\nexport class ParseIntPipe implements PipeTransform {\n  async transform(value: string, metadata: ArgumentMetadata) {\n    const val = parseInt(value, 10);\n    if (isNaN(val)) {\n      throw new BadRequestException('Validation failed');\n    }\n    return val;\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostModule.html":{"url":"modules/PostModule.html","title":"module - PostModule","body":"\n                   \n\n\n\n\n    Modules\n    PostModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostModule\n\n\n\ncluster_PostModule_imports\n\n\n\ncluster_PostModule_exports\n\n\n\ncluster_PostModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nPostModule\n\nPostModule\n\nPostModule -->\n\nPrismaModule->PostModule\n\n\n\n\n\nPostService \n\nPostService \n\nPostService  -->\n\nPostModule->PostService \n\n\n\n\n\nPostService\n\nPostService\n\nPostModule -->\n\nPostService->PostModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/post/post.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PostService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostService } from './post.service';\nimport { PrismaModule } from '../prisma/prisma.module';\n\n@Module({\n  providers: [PostService],\n  imports: [PrismaModule],\n  exports: [PostService],\n})\nexport class PostModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostService.html":{"url":"injectables/PostService.html","title":"injectable - PostService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createPost\n                            \n                            \n                                    Async\n                                deletePost\n                            \n                            \n                                    Async\n                                post\n                            \n                            \n                                    Async\n                                posts\n                            \n                            \n                                    Async\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/post/post.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(data: Prisma.PostCreateInput)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        Prisma.PostCreateInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    deletePost(where: Prisma.PostWhereUniqueInput)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:51\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                where\n                                            \n                                                        Prisma.PostWhereUniqueInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        post\n                        \n                    \n                \n            \n            \n                \n                        \n                    post(postWhereUniqueInput: Prisma.PostWhereUniqueInput)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                postWhereUniqueInput\n                                            \n                                                        Prisma.PostWhereUniqueInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        posts\n                        \n                    \n                \n            \n            \n                \n                        \n                    posts(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PrismaService } from '../prisma/prisma.service';\nimport { Post, Prisma } from '@prisma/client';\n\n@Injectable()\nexport class PostService {\n  constructor(private prisma: PrismaService) {}\n\n  async post(\n    postWhereUniqueInput: Prisma.PostWhereUniqueInput,\n  ): Promise {\n    return this.prisma.post.findUnique({\n      where: postWhereUniqueInput,\n    });\n  }\n\n  async posts(params: {\n    skip?: number;\n    take?: number;\n    cursor?: Prisma.PostWhereUniqueInput;\n    where?: Prisma.PostWhereInput;\n    orderBy?: Prisma.PostOrderByWithRelationInput;\n  }): Promise {\n    const { skip, take, cursor, where, orderBy } = params;\n    return this.prisma.post.findMany({\n      skip,\n      take,\n      cursor,\n      where,\n      orderBy,\n    });\n  }\n\n  async createPost(data: Prisma.PostCreateInput): Promise {\n    return this.prisma.post.create({\n      data,\n    });\n  }\n\n  async updatePost(params: {\n    where: Prisma.PostWhereUniqueInput;\n    data: Prisma.PostUpdateInput;\n  }): Promise {\n    const { data, where } = params;\n    return this.prisma.post.update({\n      data,\n      where,\n    });\n  }\n\n  async deletePost(where: Prisma.PostWhereUniqueInput): Promise {\n    return this.prisma.post.delete({\n      where,\n    });\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PrismaModule.html":{"url":"modules/PrismaModule.html","title":"module - PrismaModule","body":"\n                   \n\n\n\n\n    Modules\n    PrismaModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_providers\n\n\n\ncluster_PrismaModule_exports\n\n\n\n\nPrismaService \n\nPrismaService \n\n\n\nPrismaModule\n\nPrismaModule\n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/prisma/prisma.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PrismaService } from './prisma.service';\n\n@Module({\n  providers: [PrismaService],\n  exports: [PrismaService],\n})\nexport class PrismaModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/prisma/prisma.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/prisma/prisma.service.ts:6\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnModuleInit } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n@Injectable()\nexport class PrismaService extends PrismaClient implements OnModuleInit {\n  async onModuleInit() {\n    await this.$connect();\n  }\n  \n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Recipe.html":{"url":"classes/Recipe.html","title":"class - Recipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Recipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/recipes/models/recipe.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                creationDate\n                            \n                            \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                ingredients\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        creationDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipes/models/recipe.model.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipes/models/recipe.model.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(type => ID)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipes/models/recipe.model.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        ingredients\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(type => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipes/models/recipe.model.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipes/models/recipe.model.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, ID, ObjectType } from '@nestjs/graphql';\n\n@ObjectType({ description: 'recipe ' })\nexport class Recipe {\n  @Field(type => ID)\n  id: string;\n\n  @Field()\n  title: string;\n\n  @Field({ nullable: true })\n  description?: string;\n\n  @Field()\n  creationDate: Date;\n\n  @Field(type => [String])\n  ingredients: string[];\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RecipesArgs.html":{"url":"classes/RecipesArgs.html","title":"class - RecipesArgs","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RecipesArgs\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/recipes/dto/recipes.args.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                skip\n                            \n                            \n                                    \n                                    \n                                    \n                                take\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        skip\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(type => Int)@Min(0)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipes/dto/recipes.args.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        take\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 25\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(type => Int)@Min(1)@Max(50)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipes/dto/recipes.args.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ArgsType, Field, Int } from '@nestjs/graphql';\nimport { Max, Min } from 'class-validator';\n\n@ArgsType()\nexport class RecipesArgs {\n  @Field(type => Int)\n  @Min(0)\n  skip = 0;\n\n  @Field(type => Int)\n  @Min(1)\n  @Max(50)\n  take = 25;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RecipesModule.html":{"url":"modules/RecipesModule.html","title":"module - RecipesModule","body":"\n                   \n\n\n\n\n    Modules\n    RecipesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RecipesModule\n\n\n\ncluster_RecipesModule_providers\n\n\n\n\nRecipesService\n\nRecipesService\n\n\n\nRecipesModule\n\nRecipesModule\n\nRecipesModule -->\n\nRecipesService->RecipesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/recipes/recipes.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RecipesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { DateScalar } from '../common/scalars/date.scalar';\nimport { RecipesResolver } from './recipes.resolver';\nimport { RecipesService } from './recipes.service';\n\n@Module({\n  providers: [RecipesResolver, RecipesService, DateScalar],\n})\nexport class RecipesModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RecipesResolver.html":{"url":"classes/RecipesResolver.html","title":"class - RecipesResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RecipesResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/recipes/recipes.resolver.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                addRecipe\n                            \n                            \n                                    \n                                    Async\n                                recipe\n                            \n                            \n                                    \n                                recipeAdded\n                            \n                            \n                                    \n                                recipes\n                            \n                            \n                                    \n                                    Async\n                                removeRecipe\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(recipesService: RecipesService)\n                    \n                \n                        \n                            \n                                Defined in src/recipes/recipes.resolver.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        recipesService\n                                                  \n                                                        \n                                                                        RecipesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        addRecipe\n                        \n                    \n                \n            \n            \n                \n                        \n                    addRecipe(newRecipeData: NewRecipeInput, pubSub: PubSub)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(returns => Recipe)\n                \n            \n\n                    \n                        \n                            Defined in src/recipes/recipes.resolver.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                newRecipeData\n                                            \n                                                            NewRecipeInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                pubSub\n                                            \n                                                        PubSub\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        recipe\n                        \n                    \n                \n            \n            \n                \n                        \n                    recipe(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query(returns => Recipe)\n                \n            \n\n                    \n                        \n                            Defined in src/recipes/recipes.resolver.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        recipeAdded\n                        \n                    \n                \n            \n            \n                \n                        \n                    recipeAdded(pubSub: PubSub)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Subscription(returns => Recipe)\n                \n            \n\n                    \n                        \n                            Defined in src/recipes/recipes.resolver.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                pubSub\n                                            \n                                                        PubSub\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        recipes\n                        \n                    \n                \n            \n            \n                \n                        \n                    recipes(recipesArgs: RecipesArgs)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query(returns => )\n                \n            \n\n                    \n                        \n                            Defined in src/recipes/recipes.resolver.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                recipesArgs\n                                            \n                                                            RecipesArgs\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        removeRecipe\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeRecipe(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(returns => Boolean)\n                \n            \n\n                    \n                        \n                            Defined in src/recipes/recipes.resolver.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { NotFoundException } from '@nestjs/common';\nimport {\n  Args,\n  Context,\n  Mutation,\n  Query,\n  Resolver,\n  Subscription,\n} from '@nestjs/graphql';\nimport { PubSub } from 'mercurius';\nimport { NewRecipeInput } from './dto/new-recipe.input';\nimport { RecipesArgs } from './dto/recipes.args';\nimport { Recipe } from './models/recipe.model';\nimport { RecipesService } from './recipes.service';\n\n@Resolver(of => Recipe)\nexport class RecipesResolver {\n  constructor(private readonly recipesService: RecipesService) {}\n\n  @Query(returns => Recipe)\n  async recipe(@Args('id') id: string): Promise {\n    const recipe = await this.recipesService.findOneById(id);\n    if (!recipe) {\n      throw new NotFoundException(id);\n    }\n    return recipe;\n  }\n\n  @Query(returns => [Recipe])\n  recipes(@Args() recipesArgs: RecipesArgs): Promise {\n    return this.recipesService.findAll(recipesArgs);\n  }\n\n  @Mutation(returns => Recipe)\n  async addRecipe(\n    @Args('newRecipeData') newRecipeData: NewRecipeInput,\n    @Context('pubsub') pubSub: PubSub,\n  ): Promise {\n    const recipe = await this.recipesService.create(newRecipeData);\n    pubSub.publish({ topic: 'recipeAdded', payload: { recipeAdded: recipe } });\n    return recipe;\n  }\n\n  @Mutation(returns => Boolean)\n  async removeRecipe(@Args('id') id: string) {\n    return this.recipesService.remove(id);\n  }\n\n  @Subscription(returns => Recipe)\n  recipeAdded(@Context('pubsub') pubSub: PubSub) {\n    return pubSub.subscribe('recipeAdded');\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RecipesService.html":{"url":"injectables/RecipesService.html","title":"injectable - RecipesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RecipesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/recipes/recipes.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                remove\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(data: NewRecipeInput)\n                \n            \n\n\n                    \n                        \n                            Defined in src/recipes/recipes.service.ts:14\n                        \n                    \n\n\n            \n                \n                        MOCK\nPut some real business logic here\nLeft for demonstration purposes\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            NewRecipeInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(recipesArgs: RecipesArgs)\n                \n            \n\n\n                    \n                        \n                            Defined in src/recipes/recipes.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                recipesArgs\n                                            \n                                                            RecipesArgs\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/recipes/recipes.service.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/recipes/recipes.service.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { NewRecipeInput } from './dto/new-recipe.input';\nimport { RecipesArgs } from './dto/recipes.args';\nimport { Recipe } from './models/recipe.model';\n\n@Injectable()\nexport class RecipesService {\n  /**\n   * MOCK\n   * Put some real business logic here\n   * Left for demonstration purposes\n   */\n\n  async create(data: NewRecipeInput): Promise {\n    return {} as any;\n  }\n\n  async findOneById(id: string): Promise {\n    return {} as any;\n  }\n\n  async findAll(recipesArgs: RecipesArgs): Promise {\n    return [] as Recipe[];\n  }\n\n  async remove(id: string): Promise {\n    return true;\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Response.html":{"url":"interfaces/Response.html","title":"interface - Response","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Response\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/transform.interceptor.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport interface Response {\n  data: T;\n}\n\n@Injectable()\nexport class TransformInterceptor\n  implements NestInterceptor>\n{\n  intercept(\n    context: ExecutionContext,\n    next: CallHandler,\n  ): Observable> {\n    return next.handle().pipe(map(data => ({ data })));\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/common/guards/roles.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/common/guards/roles.guard.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/guards/roles.guard.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private readonly reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const roles = this.reflector.get('roles', context.getHandler());\n    if (!roles) {\n      return true;\n    }\n    const request = context.switchToHttp().getRequest();\n    const user = request.user;\n    const hasRole = () =>\n      !!user.roles.find(role => !!roles.find(item => item === role));\n\n    return user && user.roles && hasRole();\n  }\n}\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TerminusLogger.html":{"url":"injectables/TerminusLogger.html","title":"injectable - TerminusLogger","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TerminusLogger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health/terminus-logger.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ConsoleLogger\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                error\n                            \n                            \n                                error\n                            \n                            \n                                error\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n            \n                \nerror(message: any, stack?: string, context?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/health/terminus-logger.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                stack\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                context\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n            \n                \nerror(message: any, ...optionalParams: any[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/health/terminus-logger.service.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                optionalParams\n                                            \n                                                        any[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n            \n                \nerror(message, stack?, context?, ...rest: [])\n                \n            \n\n\n                    \n                        \n                            Defined in src/health/terminus-logger.service.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                stack\n                                            \n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                context\n                                            \n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                rest\n                                            \n                                                        []\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Scope, ConsoleLogger } from '@nestjs/common';\n\n@Injectable({ scope: Scope.TRANSIENT })\nexport class TerminusLogger extends ConsoleLogger {\n  error(message: any, stack?: string, context?: string): void;\n  error(message: any, ...optionalParams: any[]): void;\n  error(\n    message: unknown,\n    stack?: unknown,\n    context?: unknown,\n    ...rest: unknown[]\n  ): void {\n    // Overwrite here how error messages should be logged\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TransformInterceptor.html":{"url":"injectables/TransformInterceptor.html","title":"injectable - TransformInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TransformInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/transform.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/interceptors/transform.interceptor.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport interface Response {\n  data: T;\n}\n\n@Injectable()\nexport class TransformInterceptor\n  implements NestInterceptor>\n{\n  intercept(\n    context: ExecutionContext,\n    next: CallHandler,\n  ): Observable> {\n    return next.handle().pipe(map(data => ({ data })));\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_imports\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserModule_exports\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nPrismaModule->UserModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { PrismaModule } from '../prisma/prisma.module';\n\n@Module({\n  providers: [UserService],\n  imports: [PrismaModule],\n  exports: [UserService],\n})\nexport class UserModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                deleteUser\n                            \n                            \n                                    Async\n                                updateUser\n                            \n                            \n                                    Async\n                                user\n                            \n                            \n                                    Async\n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(data: Prisma.UserCreateInput)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        Prisma.UserCreateInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteUser(where: Prisma.UserWhereUniqueInput)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:51\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                where\n                                            \n                                                        Prisma.UserWhereUniqueInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUser(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        user\n                        \n                    \n                \n            \n            \n                \n                        \n                    user(userWhereUniqueInput: Prisma.UserWhereUniqueInput)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userWhereUniqueInput\n                                            \n                                                        Prisma.UserWhereUniqueInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        users\n                        \n                    \n                \n            \n            \n                \n                        \n                    users(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PrismaService } from '../prisma/prisma.service';\nimport { User, Prisma } from '@prisma/client';\n\n@Injectable()\nexport class UserService {\n  constructor(private prisma: PrismaService) {}\n\n  async user(\n    userWhereUniqueInput: Prisma.UserWhereUniqueInput,\n  ): Promise {\n    return this.prisma.user.findUnique({\n      where: userWhereUniqueInput,\n    });\n  }\n\n  async users(params: {\n    skip?: number;\n    take?: number;\n    cursor?: Prisma.UserWhereUniqueInput;\n    where?: Prisma.UserWhereInput;\n    orderBy?: Prisma.UserOrderByWithRelationInput;\n  }): Promise {\n    const { skip, take, cursor, where, orderBy } = params;\n    return this.prisma.user.findMany({\n      skip,\n      take,\n      cursor,\n      where,\n      orderBy,\n    });\n  }\n\n  async createUser(data: Prisma.UserCreateInput): Promise {\n    return this.prisma.user.create({\n      data,\n    });\n  }\n\n  async updateUser(params: {\n    where: Prisma.UserWhereUniqueInput;\n    data: Prisma.UserUpdateInput;\n  }): Promise {\n    const { where, data } = params;\n    return this.prisma.user.update({\n      data,\n      where,\n    });\n  }\n\n  async deleteUser(where: Prisma.UserWhereUniqueInput): Promise {\n    return this.prisma.user.delete({\n      where,\n    });\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ValidationPipe.html":{"url":"injectables/ValidationPipe.html","title":"injectable - ValidationPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ValidationPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pipes/validation.pipe.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                toValidate\n                            \n                            \n                                    Async\n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        toValidate\n                        \n                    \n                \n            \n            \n                \n                        \n                    toValidate(metatype: Type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/pipes/validation.pipe.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                metatype\n                                            \n                                                        Type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        transform\n                        \n                    \n                \n            \n            \n                \n                        \n                    transform(value: any, metadata: ArgumentMetadata)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/pipes/validation.pipe.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                metadata\n                                            \n                                                        ArgumentMetadata\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ArgumentMetadata,\n  BadRequestException,\n  Injectable,\n  PipeTransform,\n  Type,\n} from '@nestjs/common';\nimport { plainToClass } from 'class-transformer';\nimport { validate } from 'class-validator';\n\n@Injectable()\nexport class ValidationPipe implements PipeTransform {\n  async transform(value: any, metadata: ArgumentMetadata) {\n    const { metatype } = metadata;\n    if (!metatype || !this.toValidate(metatype)) {\n      return value;\n    }\n    const object = plainToClass(metatype, value);\n    const errors = await validate(object);\n    if (errors.length > 0) {\n      throw new BadRequestException('Validation failed');\n    }\n    return value;\n  }\n\n  private toValidate(metatype: Type): boolean {\n    const types = [String, Boolean, Number, Array, Object];\n    return !types.find(type => metatype === type);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/cats/cats.controller.ts\n            \n            controller\n            CatsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/cats/cats.service.ts\n            \n            injectable\n            CatsService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/cats/dto/create-cat.dto.ts\n            \n            class\n            CreateCatDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/cats/interfaces/cat.interface.ts\n            \n            interface\n            Cat\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/constant/index.ts\n            \n            variable\n            APP_ENVIRONMENTS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/constant/index.ts\n            \n            variable\n            SWAGGER_API_ENDPOINT\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/constant/regex.constants.ts\n            \n            variable\n            JWT_EXPIRY_REGEX\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/constant/regex.constants.ts\n            \n            variable\n            PASSWORD_REGEX\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/constant/regex.constants.ts\n            \n            variable\n            RABBIT_MQ_URI_REGEX\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/constant/regex.constants.ts\n            \n            variable\n            REDIS_URI_REGEX\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/constant/regex.constants.ts\n            \n            variable\n            SENTRY_DSN_REGEX\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/constant/regex.constants.ts\n            \n            variable\n            USERNAME_REGEX\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/decorators/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/errors/constant.ts\n            \n            variable\n            ErrorCodeToStatusMap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/errors/http.error.ts\n            \n            class\n            HttpError\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/exception/custom.exception.ts\n            \n            class\n            CustomHttpException\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/exception/custom.exception.ts\n            \n            variable\n            getDefaultCodeByStatus\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/guards/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/helpers/app.utils.ts\n            \n            variable\n            AppUtils\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/helpers/helpers.utils.ts\n            \n            variable\n            envFile\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/helpers/helpers.utils.ts\n            \n            variable\n            HelperService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/interceptors/exception.interceptor.ts\n            \n            injectable\n            ExceptionInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/middleware/logger.middleware.ts\n            \n            injectable\n            LoggerMiddleware\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/pipes/parse-int.pipe.ts\n            \n            injectable\n            ParseIntPipe\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/pipes/validation.pipe.ts\n            \n            injectable\n            ValidationPipe\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/scalars/date.scalar.ts\n            \n            class\n            DateScalar\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/core/cache/cache.module.ts\n            \n            interface\n            CacheModuleOptions\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/cache/cache.module.ts\n            \n            variable\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/cache/cache.provider.ts\n            \n            variable\n            CacheProvider\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/cache/cache.service.ts\n            \n            injectable\n            CacheService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/core/cache/types.ts\n            \n            interface\n            ICacheStore\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/config/app.config.ts\n            \n            variable\n            app\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/config/app.config.ts\n            \n            variable\n            appConfigValidationSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/config/cache.config.ts\n            \n            variable\n            cache\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/config/cache.config.ts\n            \n            variable\n            cacheConfigValidationSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/config/config.interface.ts\n            \n            interface\n            Config\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/core/config/config.module.ts\n            \n            variable\n            provider\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/config/redis.config.ts\n            \n            variable\n            redis\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/config/redis.config.ts\n            \n            variable\n            redisConfigValidationSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/config/sqlite.config.ts\n            \n            variable\n            sqlite\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/config/sqlite.config.ts\n            \n            variable\n            sqliteConfigValidationSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/filters/global-exception.filter.ts\n            \n            class\n            GlobalExceptionFilter\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/core/interceptors/logging.interceptor.ts\n            \n            injectable\n            LoggingInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/interceptors/transform.interceptor.ts\n            \n            injectable\n            TransformInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/interceptors/transform.interceptor.ts\n            \n            interface\n            Response\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/pino/app.logger.ts\n            \n            function\n            createLogger\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/pino/pino.module.ts\n            \n            variable\n            basePinoOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/pino/pino.module.ts\n            \n            variable\n            redactFields\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/health/health.controller.ts\n            \n            controller\n            HealthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/health/terminus-logger.service.ts\n            \n            injectable\n            TerminusLogger\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/post/post.service.ts\n            \n            injectable\n            PostService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/prisma/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/recipes/dto/new-recipe.input.ts\n            \n            class\n            NewRecipeInput\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/recipes/dto/recipes.args.ts\n            \n            class\n            RecipesArgs\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/recipes/models/recipe.model.ts\n            \n            class\n            Recipe\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/recipes/recipes.resolver.ts\n            \n            class\n            RecipesResolver\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/recipes/recipes.service.ts\n            \n            injectable\n            RecipesService\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/7)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @fastify/helmet : ^11.1.1\n        \n            @fastify/static : ^7.0.2\n        \n            @keyv/redis : ^2.8.4\n        \n            @keyv/sqlite : ^3.6.7\n        \n            @mercuriusjs/gateway : ^3.0.0\n        \n            @nestjs/axios : ^3.0.2\n        \n            @nestjs/common : ^10.3.7\n        \n            @nestjs/config : ^3.2.1\n        \n            @nestjs/core : ^10.3.7\n        \n            @nestjs/graphql : ^12.1.1\n        \n            @nestjs/mercurius : ^12.1.1\n        \n            @nestjs/platform-express : ^10.3.7\n        \n            @nestjs/platform-fastify : ^10.3.7\n        \n            @nestjs/swagger : ^7.3.1\n        \n            @nestjs/terminus : ^10.2.3\n        \n            @prisma/client : ^5.11.0\n        \n            axios : ^1.6.8\n        \n            chalk : 4.1.2\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            dotenv-expand : ^11.0.6\n        \n            fs-extra : ^11.2.0\n        \n            graphql : ^16.8.1\n        \n            joi : ^17.12.2\n        \n            keyv : ^4.5.4\n        \n            mercurius : ^14.0.0\n        \n            nestjs-pino : ^4.0.0\n        \n            pino-http : ^9.0.0\n        \n            pino-pretty : ^11.0.0\n        \n            redis : ^4.6.13\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.1\n        \n            ts-pattern : ^5.1.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            HttpErrorCode   (src/.../http-response.types.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/errors/http-response.types.ts\n    \n        \n            \n                \n                    \n                        \n                        HttpErrorCode\n                    \n                \n                        \n                            \n                                 VALIDATION_ERROR\n                            \n                        \n                        \n                            \n                                Value : validation_error\n                            \n                        \n                        \n                            \n                                 UNAUTHORIZED\n                            \n                        \n                        \n                            \n                                Value : unauthorized\n                            \n                        \n                        \n                            \n                                 UNAUTHORIZED_SHARE\n                            \n                        \n                        \n                            \n                                Value : unauthorized_share\n                            \n                        \n                        \n                            \n                                 RESTRICTED_RESOURCE\n                            \n                        \n                        \n                            \n                                Value : restricted_resource\n                            \n                        \n                        \n                            \n                                 NOT_FOUND\n                            \n                        \n                        \n                            \n                                Value : not_found\n                            \n                        \n                        \n                            \n                                 INTERNAL_SERVER_ERROR\n                            \n                        \n                        \n                            \n                                Value : internal_server_error\n                            \n                        \n                        \n                            \n                                 DATABASE_CONNECTION_UNAVAILABLE\n                            \n                        \n                        \n                            \n                                Value : database_connection_unavailable\n                            \n                        \n                        \n                            \n                                 GATEWAY_TIMEOUT\n                            \n                        \n                        \n                            \n                                Value : gateway_timeout\n                            \n                        \n                        \n                            \n                                 UNKNOWN_ERROR_CODE\n                            \n                        \n                        \n                            \n                                Value : unknown_error_code\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            createLogger   (src/.../app.logger.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/core/pino/app.logger.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createLogger\n                        \n                    \n                \n            \n            \n                \ncreateLogger()\n                \n            \n\n\n\n\n            \n                \n                        Creates a logger instance\n\n\n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promise of a Logger instance\n\n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nExample :$ yarn installPreparing the foundational service image\nExample :# create foundational service\n$ docker-compose --env-file ./env/.env.dev up -dRunning the app\nExample :# development\n$ yarn run start\n\n# watch mode\n$ yarn run start:dev\n\n# production mode\n$ yarn run start:prodTest\nExample :# unit tests\n$ yarn run test\n\n# e2e tests\n$ yarn run test:e2e\n\n# test coverage\n$ yarn run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CatsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CoreModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HealthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        NestCacheModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        NestConfigModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        NestPinoModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PrismaModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RecipesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_CatsModule\n\n\n\ncluster_CatsModule_providers\n\n\n\ncluster_HealthModule\n\n\n\ncluster_HealthModule_imports\n\n\n\ncluster_NestConfigModule\n\n\n\ncluster_NestConfigModule_exports\n\n\n\ncluster_PostModule\n\n\n\ncluster_PostModule_exports\n\n\n\ncluster_PostModule_providers\n\n\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\ncluster_RecipesModule\n\n\n\ncluster_RecipesModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nCatsModule\n\nCatsModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nCatsModule->AppModule\n\n\n\n\n\nCoreModule\n\nCoreModule\n\nAppModule -->\n\nCoreModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nNestCacheModule\n\nNestCacheModule\n\nAppModule -->\n\nNestCacheModule->AppModule\n\n\n\n\n\nNestConfigModule\n\nNestConfigModule\n\nAppModule -->\n\nNestConfigModule->AppModule\n\n\n\n\n\nConfigService \n\nConfigService \n\nConfigService  -->\n\nNestConfigModule->ConfigService \n\n\n\n\n\nNestPinoModule\n\nNestPinoModule\n\nAppModule -->\n\nNestPinoModule->AppModule\n\n\n\n\n\nPostModule\n\nPostModule\n\nAppModule -->\n\nPostModule->AppModule\n\n\n\n\n\nPostService \n\nPostService \n\nPostService  -->\n\nPostModule->PostService \n\n\n\n\n\nRecipesModule\n\nRecipesModule\n\nAppModule -->\n\nRecipesModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nCatsService\n\nCatsService\n\nCatsModule -->\n\nCatsService->CatsModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nHealthModule -->\n\nPrismaModule->HealthModule\n\n\n\nPostModule -->\n\nPrismaModule->PostModule\n\n\n\nUserModule -->\n\nPrismaModule->UserModule\n\n\n\n\n\nPrismaService \n\nPrismaService \n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nPostService\n\nPostService\n\nPostModule -->\n\nPostService->PostModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\nRecipesService\n\nRecipesService\n\nRecipesModule -->\n\nRecipesService->RecipesModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        11 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    14 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    9 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    5 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            IHttpError   (src/.../http-response.types.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/errors/http-response.types.ts\n    \n    \n        \n            \n                \n                    \n                    IHttpError\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            app   (src/.../app.config.ts)\n                        \n                        \n                            APP_ENVIRONMENTS   (src/.../index.ts)\n                        \n                        \n                            appConfigValidationSchema   (src/.../app.config.ts)\n                        \n                        \n                            AppUtils   (src/.../app.utils.ts)\n                        \n                        \n                            basePinoOptions   (src/.../pino.module.ts)\n                        \n                        \n                            cache   (src/.../cache.config.ts)\n                        \n                        \n                            cacheConfigValidationSchema   (src/.../cache.config.ts)\n                        \n                        \n                            CacheProvider   (src/.../cache.provider.ts)\n                        \n                        \n                            envFile   (src/.../helpers.utils.ts)\n                        \n                        \n                            ErrorCodeToStatusMap   (src/.../constant.ts)\n                        \n                        \n                            getDefaultCodeByStatus   (src/.../custom.exception.ts)\n                        \n                        \n                            HelperService   (src/.../helpers.utils.ts)\n                        \n                        \n                            JWT_EXPIRY_REGEX   (src/.../regex.constants.ts)\n                        \n                        \n                            PASSWORD_REGEX   (src/.../regex.constants.ts)\n                        \n                        \n                            provider   (src/.../config.module.ts)\n                        \n                        \n                            RABBIT_MQ_URI_REGEX   (src/.../regex.constants.ts)\n                        \n                        \n                            redactFields   (src/.../pino.module.ts)\n                        \n                        \n                            redis   (src/.../redis.config.ts)\n                        \n                        \n                            REDIS_URI_REGEX   (src/.../regex.constants.ts)\n                        \n                        \n                            redisConfigValidationSchema   (src/.../redis.config.ts)\n                        \n                        \n                            Roles   (src/.../roles.decorator.ts)\n                        \n                        \n                            SENTRY_DSN_REGEX   (src/.../regex.constants.ts)\n                        \n                        \n                            sqlite   (src/.../sqlite.config.ts)\n                        \n                        \n                            sqliteConfigValidationSchema   (src/.../sqlite.config.ts)\n                        \n                        \n                            SWAGGER_API_ENDPOINT   (src/.../index.ts)\n                        \n                        \n                            USERNAME_REGEX   (src/.../regex.constants.ts)\n                        \n                        \n                               (src/.../cache.module.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/core/config/app.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        app\n                        \n                    \n                \n            \n                \n                    \n                        Default value : registerAs('app', () => ({\n  port: process.env.APP_PORT,\n  prefix: process.env.APP_PREFIX,\n  env: process.env.NODE_ENV,\n  url: process.env.API_URL,\n  name: process.env.APP_NAME,\n  clientUrl: process.env.CLIENT_URL,\n  allowedOrigins: process.env.ALLOWED_ORIGINS\n    ? process.env.ALLOWED_ORIGINS.split(',')\n    : '*',\n  sentryDsn: process.env.SENTRY_DSN,\n  swaggerUser: process.env.SWAGGER_USER,\n  swaggerPass: process.env.SWAGGER_PASSWORD,\n}))\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        appConfigValidationSchema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  NODE_ENV: Joi.string()\n    .valid(...APP_ENVIRONMENTS)\n    .required(),\n  APP_PORT: Joi.number().port().required(),\n  API_URL: Joi.string().uri().required(),\n  APP_PREFIX: Joi.string().required().pattern(/^v\\d+/).required().messages({\n    'string.pattern.base': 'Version must start with \"v\" followed by a number.',\n  }),\n  APP_NAME: Joi.string().required(),\n  CLIENT_URL: Joi.string().uri().required(),\n  ALLOWED_HOSTS: Joi.string().optional(),\n  SWAGGER_USER: Joi.string().required(),\n  SWAGGER_PASSWORD: Joi.string().required(),\n}\n                    \n                \n\n\n        \n    \n\n    src/common/constant/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        APP_ENVIRONMENTS\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n  'dev',\n  'development',\n  'stage',\n  'staging',\n  'test',\n  'testing',\n  'prod',\n  'production',\n]\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SWAGGER_API_ENDPOINT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'doc'\n                    \n                \n\n\n        \n    \n\n    src/common/helpers/app.utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AppUtils\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  validationPipeOptions(): ValidationPipeOptions {\n    return {\n      whitelist: true,\n      transform: true,\n      stopAtFirstError: true,\n      forbidUnknownValues: false,\n      validateCustomDecorators: true,\n      enableDebugMessages: HelperService.isDev(),\n    };\n  },\n}\n                    \n                \n\n\n        \n    \n\n    src/core/pino/pino.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        basePinoOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  translateTime: true,\n  ignore: 'pid,hostname',\n  singleLine: true,\n  redact: redactFields,\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        redactFields\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n  'req.headers.authorization',\n  'req.body.password',\n  'req.body.confirmPassword',\n]\n                    \n                \n\n\n        \n    \n\n    src/core/config/cache.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        cache\n                        \n                    \n                \n            \n                \n                    \n                        Default value : registerAs('cache', () => ({\n  provider: process.env.CACHE_PROVIDER,\n  ttl: +process.env.CACHE_TTL,\n}))\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        cacheConfigValidationSchema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  CACHE_PROVIDER: Joi.string().valid('redis', 'sqlite', 'memory').required(),\n  CACHE_TTL: Joi.number().integer().min(1).required(),\n}\n                    \n                \n\n\n        \n    \n\n    src/core/cache/cache.provider.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CacheProvider\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Provider\n\n                    \n                \n                \n                    \n                        Default value : {\n  provide: CacheService,\n  inject: [ConfigService],\n  useFactory: async (configService: ConfigService) => {\n    const cache = configService.get('cache', { infer: true });\n    const sqlite = configService.get('sqlite', { infer: true });\n    const redis = configService.get('redis', { infer: true });\n\n    Logger.log(`[Cache Manager Adapter]: ${cache.provider}`);\n\n    const store = match(cache.provider)\n      .with('memory', () => new Map())\n      .with('sqlite', () => {\n        const uri = sqlite.uri.replace(/^sqlite:\\/\\//, '');\n        fse.ensureFileSync(uri);\n\n        Logger.log(`[Cache Manager File Path]: ${path.resolve(uri)}`);\n\n        return new KeyvSqlite({\n          ...sqlite,\n          uri,\n        });\n      })\n      .with('redis', () => new KeyvRedis(redis.url, { useRedisSets: false }))\n      .exhaustive();\n\n    const keyv = new Keyv({ namespace: 'teable_cache', store: store });\n    keyv.on('error', (error) => {\n      error && Logger.error(error, 'Cache Manager Connection Error');\n    });\n\n    Logger.log(`[Cache Manager Namespace]: ${keyv.opts.namespace}`);\n    return new CacheService(keyv, configService);\n  },\n}\n                    \n                \n\n\n        \n    \n\n    src/common/helpers/helpers.utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        envFile\n                        \n                    \n                \n            \n                \n                    \n                        Default value : `${process.cwd()}/env/.env.${process.env.NODE_ENV}`\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        HelperService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  getEnvFile() {\n    return envFile;\n  },\n\n  /* The `isDev()` function is checking if the value of the `NODE_ENV` environment variable starts with\n  the string \"dev\". It returns `true` if the environment is set to development, and `false` otherwise.\n  This function is used to determine if the application is running in a development environment. */\n  isDev(): boolean {\n    return process.env.NODE_ENV.startsWith('dev');\n  },\n\n  /* The `isProd()` function is checking if the value of the `NODE_ENV` environment variable starts with\n  the string \"prod\". It returns `true` if the environment is set to production, and `false` otherwise.\n  This function is used to determine if the application is running in a production environment. */\n  isProd(): boolean {\n    return process.env.NODE_ENV.startsWith('prod');\n  },\n}\n                    \n                \n\n\n        \n    \n\n    src/common/errors/constant.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ErrorCodeToStatusMap\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Record\n\n                    \n                \n                \n                    \n                        Default value : {\n  [HttpErrorCode.VALIDATION_ERROR]: 400,\n  [HttpErrorCode.UNAUTHORIZED]: 401,\n  [HttpErrorCode.RESTRICTED_RESOURCE]: 403,\n  [HttpErrorCode.UNAUTHORIZED_SHARE]: 403,\n  [HttpErrorCode.NOT_FOUND]: 404,\n  [HttpErrorCode.INTERNAL_SERVER_ERROR]: 500,\n  [HttpErrorCode.DATABASE_CONNECTION_UNAVAILABLE]: 503,\n  [HttpErrorCode.GATEWAY_TIMEOUT]: 504,\n  [HttpErrorCode.UNKNOWN_ERROR_CODE]: 500,\n}\n                    \n                \n\n\n        \n    \n\n    src/common/exception/custom.exception.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getDefaultCodeByStatus\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (status: HttpStatus) => {\n  switch (status) {\n    case HttpStatus.BAD_REQUEST:\n      return HttpErrorCode.VALIDATION_ERROR;\n    case HttpStatus.UNAUTHORIZED:\n      return HttpErrorCode.UNAUTHORIZED;\n    case HttpStatus.FORBIDDEN:\n      return HttpErrorCode.RESTRICTED_RESOURCE;\n    case HttpStatus.NOT_FOUND:\n      return HttpErrorCode.NOT_FOUND;\n    case HttpStatus.INTERNAL_SERVER_ERROR:\n      return HttpErrorCode.INTERNAL_SERVER_ERROR;\n    case HttpStatus.SERVICE_UNAVAILABLE:\n      return HttpErrorCode.DATABASE_CONNECTION_UNAVAILABLE;\n    default:\n      return HttpErrorCode.UNKNOWN_ERROR_CODE;\n  }\n}\n                    \n                \n\n\n        \n    \n\n    src/common/constant/regex.constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        JWT_EXPIRY_REGEX\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /\\b(\\d+)\\s*(ms|s|m|h|d)\\b/\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PASSWORD_REGEX\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*\\W).*$/\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        RABBIT_MQ_URI_REGEX\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^(amqps?):\\/\\/(?:[^:@]+:[^:@]+@)?[^/:?]+(?::\\d+)?(?:\\/[^/?]+)?(?:\\?.*)?$/\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        REDIS_URI_REGEX\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^redis:\\/\\/(?:([^:@]+):([^:@]+)@)?([^/:]+)(?::(\\d+))?(?:\\/(\\d+))?$/\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SENTRY_DSN_REGEX\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /https:\\/\\/[\\da-f]{32}@o\\d+\\.ingest\\.sentry\\.io\\/\\d+/\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        USERNAME_REGEX\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^(?![\\d._-])[\\w-.]+$/\n                    \n                \n\n\n        \n    \n\n    src/core/config/config.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        provider\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.CACHE_PROVIDER\n                    \n                \n\n\n        \n    \n\n    src/core/config/redis.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        redis\n                        \n                    \n                \n            \n                \n                    \n                        Default value : registerAs('redis', () => ({\n  url: process.env.REDIS_URI,\n  username: process.env.REDIS_USERNAME,\n  password: process.env.REDIS_PASSWORD,\n  host: process.env.REDIS_HOST,\n  port: +process.env.REDIS_PORT,\n}))\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        redisConfigValidationSchema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  REDIS_URI: Joi.string().pattern(REDIS_URI_REGEX).required(),\n  REDIS_USERNAME: Joi.string().required(),\n  REDIS_PASSWORD: Joi.string().required(),\n  REDIS_HOST: Joi.string().required(),\n  REDIS_PORT: Joi.number().port().required(),\n}\n                    \n                \n\n\n        \n    \n\n    src/common/decorators/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: string[]) => SetMetadata('roles', roles)\n                    \n                \n\n\n        \n    \n\n    src/core/config/sqlite.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        sqlite\n                        \n                    \n                \n            \n                \n                    \n                        Default value : registerAs('sqlite', () => ({\n  uri: process.env.SQLITE_URL,\n}))\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sqliteConfigValidationSchema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  SQLITE_URL: Joi.string().required(),\n}\n                    \n                \n\n\n        \n    \n\n    src/core/cache/cache.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                        \n                    \n                \n            \n                \n                    \n                        Default value : new ConfigurableModuleBuilder().build()\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
