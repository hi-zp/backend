var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.95,1,2.475]],["body/controllers/AppController.html",[0,1.581,1,2.007,2,0.976,3,0.121,4,0.108,5,0.108,6,1.54,7,0.39,8,0.743,9,3.16,10,3.686,11,2.497,12,3.686,13,3.622,14,2.923,15,4.24,16,2.923,17,3.686,18,1.803,19,2.669,20,0.894,21,2.857,22,0.021,23,2.923,24,1.024,25,1.803,26,1.411,27,1.178,28,1.265,29,3.686,30,1.288,31,3.382,32,1.803,33,2.197,34,2.923,35,1.803,36,3.559,37,1.803,38,2.923,39,2.923,40,1.803,41,4.24,42,1.803,43,1.803,44,2.923,45,1.803,46,2.923,47,1.803,48,1.803,49,2.923,50,1.803,51,3.149,52,1.049,53,1.803,54,2.923,55,1.803,56,1.803,57,2.923,58,1.803,59,2.923,60,0.347,61,1.54,62,2.217,63,2.796,64,1.54,65,1.803,66,0.222,67,2.145,68,1.54,69,2.145,70,1.803,71,2.145,72,1.803,73,1.367,74,1.803,75,1.803,76,1.135,77,0.121,78,0.016,79,0.854,80,2.32,81,1.863,82,1.317,83,1.803,84,1.803,85,1.803,86,1.803,87,1.803,88,3.686,89,2.923,90,2.923,91,1.384,92,1.803,93,3.215,94,2.923,95,4.24,96,3.686,97,0.713,98,1.803,99,1.367,100,1.803,101,2.923,102,1.803,103,1.803,104,1.803,105,1.049,106,1.803,107,1.803,108,0.008,109,0.008]],["title/modules/AppModule.html",[110,0.868,111,2.475]],["body/modules/AppModule.html",[1,3.358,2,2.236,3,0.19,4,0.17,5,0.17,22,0.021,60,0.507,66,0.347,67,3.483,68,2.411,77,0.19,78,0.025,91,1.957,108,0.012,109,0.012,110,1.177,111,4.911,112,1.054,113,1.183,114,1.337,115,1.337,116,1.183,117,2.176,118,1.256,119,2.411,120,2.411,121,2.411,122,3.768,123,3.768,124,3.768,125,3.768,126,3.768,127,3.768,128,3.768,129,3.768,130,1.957,131,1.337,132,1.337,133,2.823,134,2.405,135,2.823,136,2.823,137,2.823,138,2.823,139,2.823,140,2.823,141,1.527,142,4.133,143,2.823,144,2.411,145,2.823,146,2.823,147,2.823,148,2.823,149,2.823,150,2.823,151,2.823,152,2.823,153,2.411,154,2.823]],["title/injectables/AppService.html",[67,2.097,155,0.542]],["body/injectables/AppService.html",[3,0.323,4,0.289,5,0.289,7,0.508,8,1.505,13,5.723,22,0.021,24,0.87,30,1.094,33,1.977,60,0.358,66,0.59,67,3.445,77,0.323,78,0.042,82,1.156,108,0.017,109,0.017,155,0.891,156,1.696,157,4.104,158,4.803,159,4.803,160,4.803]],["title/interfaces/Cat.html",[161,1.822,162,2.269]],["body/interfaces/Cat.html",[3,0.31,4,0.277,5,0.277,7,0.488,20,0.948,22,0.02,27,1.422,33,2.317,77,0.31,81,3.184,108,0.017,109,0.017,161,2.33,162,3.633,163,3.166,164,3.939,165,2.037,166,5.641,167,5.641,168,2.804]],["title/controllers/CatsController.html",[0,1.95,169,2.475]],["body/controllers/CatsController.html",[0,1.725,2,1.725,3,0.214,4,0.192,5,0.192,7,0.337,8,1.147,9,2.955,20,0.679,21,2.646,22,0.021,24,0.948,26,1.212,27,0.971,28,1.086,30,1.192,31,2.441,36,3.296,52,1.855,60,0.478,61,2.724,62,3.422,63,2.418,66,0.392,77,0.214,78,0.028,81,1.611,82,0.767,108,0.013,109,0.013,162,2.007,168,2.331,169,3.098,170,2.724,171,2.418,172,2.724,173,3.422,174,4.318,175,5.236,176,3.188,177,4.284,178,3.188,179,3.188,180,3.188,181,3.188,182,4.512,183,3.188,184,3.188,185,2.189,186,3.188,187,2.189,188,3.188,189,3.098,190,3.188,191,3.188,192,3.047,193,2.724,194,3.188,195,3.188,196,2.724,197,3.188,198,3.188,199,1.855,200,3.188,201,3.188,202,3.188,203,3.188,204,3.188,205,1.611,206,2.724]],["title/modules/CatsModule.html",[110,0.868,122,2.269]],["body/modules/CatsModule.html",[2,3.021,3,0.294,4,0.263,5,0.263,22,0.021,60,0.458,66,0.538,77,0.294,78,0.038,108,0.016,109,0.016,110,1.48,112,1.634,113,1.834,114,2.073,115,2.073,116,1.834,117,2.737,118,1.948,122,4.308,130,2.645,131,2.073,132,2.073,169,4.224,192,3.982,193,3.739,207,3.739,208,3.739,209,4.376,210,4.376]],["title/injectables/CatsService.html",[155,0.542,192,2.097]],["body/injectables/CatsService.html",[3,0.264,4,0.236,5,0.236,7,0.416,8,1.323,20,0.783,22,0.021,24,1.057,26,1.055,27,0.846,28,0.945,30,1.185,52,2.285,60,0.388,66,0.482,77,0.264,78,0.034,80,3.675,81,2.95,82,0.945,108,0.015,109,0.015,155,0.783,156,1.386,162,4.386,165,1.837,172,4.987,173,3.947,174,4.714,192,3.028,196,3.355,211,3.355,212,5.205,213,3.927,214,3.927,215,2.285,216,1.985,217,3.927,218,3.927,219,3.927]],["title/interfaces/Config.html",[161,1.822,220,2.734]],["body/interfaces/Config.html",[3,0.326,4,0.291,5,0.291,7,0.513,20,0.73,22,0.021,60,0.444,77,0.326,108,0.017,109,0.017,161,2.45,163,3.329,165,2.102,220,4.516,221,4.142,222,4.343,223,6.721,224,3.052,225,4.142]],["title/modules/CoreModule.html",[110,0.868,123,2.269]],["body/modules/CoreModule.html",[3,0.306,4,0.273,5,0.273,22,0.021,60,0.49,66,0.559,77,0.306,78,0.04,108,0.016,109,0.016,110,1.378,112,1.699,117,2.025,123,3.603,226,4.55,227,6.262,228,3.45,229,3.93,230,4.55,231,3.603,232,4.55,233,5.724,234,5.724]],["title/classes/CreateCatDto.html",[78,0.031,177,2.475]],["body/classes/CreateCatDto.html",[3,0.274,4,0.245,5,0.245,7,0.432,20,0.895,21,3.007,22,0.021,24,1.077,27,1.281,33,2.108,60,0.304,77,0.274,78,0.046,81,3.548,108,0.015,109,0.015,165,1.885,166,5.083,167,5.083,168,2.376,177,3.666,235,1.817,236,5.391,237,3.488,238,5.95,239,4.082,240,6.549,241,4.082,242,4.082,243,2.57]],["title/classes/CustomHttpException.html",[78,0.031,244,2.475]],["body/classes/CustomHttpException.html",[3,0.243,4,0.217,5,0.217,7,0.382,20,0.74,22,0.021,24,0.891,26,0.97,27,0.778,28,0.869,33,2.1,60,0.367,66,0.444,77,0.331,78,0.031,79,1.71,82,1.597,97,1.428,108,0.014,109,0.014,165,1.737,215,2.101,235,1.607,244,3.378,245,2.739,246,3.378,247,4.243,248,5.033,249,4.92,250,4.126,251,4.92,252,2.273,253,3.378,254,2.739,255,2.739,256,3.085,257,3.612,258,3.085,259,2.48,260,3.378,261,3.085,262,5.541,263,3.085,264,3.085,265,3.085,266,3.085,267,3.085,268,3.085,269,3.085,270,3.085,271,2.739,272,2.48,273,3.085,274,3.085,275,3.085]],["title/classes/DateScalar.html",[78,0.031,276,2.475]],["body/classes/DateScalar.html",[3,0.216,4,0.193,5,0.193,7,0.341,8,1.155,20,0.968,22,0.021,24,1.035,26,1.413,27,1.133,28,1.267,30,1.199,33,1.075,60,0.339,77,0.216,78,0.028,82,1.376,108,0.013,109,0.013,141,1.741,165,1.603,168,2.684,205,2.295,215,1.872,216,3.047,235,1.432,276,3.119,277,2.749,278,1.795,279,5.263,280,3.313,281,4.542,282,4.542,283,4.542,284,5.783,285,4.542,286,5.263,287,3.218,288,4.542,289,5.717,290,3.218,291,3.218,292,4.542,293,3.218,294,4.542,295,3.218,296,3.218,297,2.749,298,3.218,299,3.218,300,4.542,301,3.218,302,3.218,303,3.218,304,3.218,305,3.218,306,3.218]],["title/injectables/ExceptionInterceptor.html",[155,0.542,307,2.734]],["body/injectables/ExceptionInterceptor.html",[3,0.263,4,0.235,5,0.235,7,0.414,8,1.32,20,0.589,22,0.021,24,0.708,26,1.051,27,0.842,28,0.942,30,0.891,60,0.434,66,0.481,77,0.263,78,0.034,82,0.942,108,0.015,109,0.015,155,0.781,156,1.381,205,1.977,247,3.937,252,2.463,253,2.687,278,1.547,307,3.937,308,3.342,309,3.565,310,3.937,311,3.907,312,3.907,313,4.262,314,3.912,315,1.977,316,4.001,317,3.565,318,5.192,319,2.463,320,3.912,321,2.687,322,3.342,323,3.912,324,3.912,325,3.342,326,3.912,327,3.912]],["title/classes/GlobalExceptionFilter.html",[78,0.031,328,2.734]],["body/classes/GlobalExceptionFilter.html",[3,0.159,4,0.142,5,0.142,7,0.25,8,0.92,20,0.799,22,0.021,24,0.892,26,1.181,27,0.947,28,1.058,30,0.824,52,1.376,60,0.418,66,0.445,77,0.159,78,0.021,79,1.12,80,2.768,81,1.195,82,0.871,97,2.215,108,0.01,109,0.01,165,1.278,199,1.376,205,1.829,215,1.376,216,1.195,224,1.488,235,1.052,244,3.02,247,4.027,248,3.335,250,1.623,252,3.101,253,1.623,259,1.623,260,3.847,271,1.793,272,1.623,278,1.431,325,5.266,328,2.745,329,4.537,330,2.02,331,4.397,332,3.736,333,4.927,334,4.397,335,3.619,336,2.364,337,3.847,338,3.619,339,3.619,340,3.619,341,4.003,342,4.397,343,4.927,344,2.364,345,3.619,346,4.027,347,4.927,348,2.364,349,2.745,350,3.619,351,3.092,352,3.619,353,2.364,354,2.364,355,2.364,356,2.02,357,2.364,358,2.364,359,2.278,360,2.364,361,2.364,362,5.602,363,2.364,364,2.364,365,2.364,366,2.364,367,4.397,368,2.364,369,2.364,370,2.364,371,2.364,372,2.364,373,2.364,374,2.364,375,2.02,376,2.364,377,2.02,378,2.364,379,2.364]],["title/controllers/HealthController.html",[0,1.95,380,2.475]],["body/controllers/HealthController.html",[0,1.725,2,1.725,3,0.214,4,0.192,5,0.192,7,0.337,8,1.147,21,1.611,22,0.021,24,0.577,30,0.726,60,0.39,66,0.392,77,0.214,78,0.028,79,1.51,80,3.927,82,0.767,108,0.013,109,0.013,171,2.418,380,3.098,381,2.724,382,5.694,383,5.694,384,3.188,385,3.188,386,4.512,387,4.512,388,4.512,389,4.512,390,4.512,391,4.512,392,2.418,393,2.28,394,2.418,395,3.188,396,2.189,397,3.188,398,3.422,399,5.694,400,3.188,401,3.188,402,3.188,403,3.188,404,3.188,405,3.855,406,4.512,407,4.512,408,3.188,409,3.188,410,3.188,411,4.512,412,3.188,413,3.188,414,3.855,415,4.512,416,3.188,417,3.188,418,6.414,419,3.188,420,3.188,421,3.188,422,3.188,423,3.188,424,3.188]],["title/modules/HealthModule.html",[110,0.868,124,2.269]],["body/modules/HealthModule.html",[2,2.76,3,0.256,4,0.229,5,0.229,22,0.021,60,0.491,66,0.468,77,0.256,78,0.033,108,0.015,109,0.015,110,1.384,112,1.423,113,1.597,114,1.805,115,1.805,116,1.597,117,1.696,118,1.696,124,4.148,130,2.416,131,1.805,132,1.805,134,2.969,332,3.869,380,3.949,392,2.89,425,3.256,426,3.256,427,3.565,428,3.811,429,3.811,430,5.102,431,3.256,432,3.811,433,2.89,434,3.504,435,3.811,436,3.811,437,5.102,438,2.89,439,3.811,440,2.89,441,3.811,442,3.811,443,3.811,444,3.811,445,3.811]],["title/classes/HttpError.html",[78,0.031,446,2.734]],["body/classes/HttpError.html",[3,0.235,4,0.21,5,0.21,7,0.369,19,3.025,20,0.966,22,0.021,24,0.995,26,0.937,27,0.751,28,0.84,33,2.074,60,0.358,77,0.235,78,0.03,79,1.653,97,1.38,108,0.014,109,0.014,165,1.696,168,2.764,235,1.553,246,3.3,248,4.868,250,4.067,252,3.46,256,2.981,258,2.981,260,4.516,272,2.396,278,1.9,341,4.516,396,3.3,446,3.644,447,2.981,448,4.696,449,4.806,450,4.806,451,3.49,452,4.806,453,3.49,454,3.49]],["title/injectables/LoggerMiddleware.html",[155,0.542,455,2.734]],["body/injectables/LoggerMiddleware.html",[3,0.295,4,0.264,5,0.264,7,0.465,8,1.424,20,0.661,22,0.021,24,0.796,26,1.18,27,0.946,28,1.058,30,1.001,51,5.265,52,3.586,60,0.328,66,0.54,77,0.295,78,0.038,108,0.016,109,0.016,155,0.843,156,1.551,278,1.737,312,4.085,455,4.247,456,3.755,457,5.6,458,5.6,459,4.395,460,4.395,461,3.333,462,5.6,463,4.395]],["title/injectables/LoggingInterceptor.html",[155,0.542,229,2.475]],["body/injectables/LoggingInterceptor.html",[3,0.272,4,0.243,5,0.243,7,0.429,8,1.351,20,0.609,22,0.021,24,0.733,26,1.088,27,0.872,28,0.975,30,0.922,60,0.442,66,0.498,77,0.272,78,0.035,82,0.975,97,1.601,108,0.015,109,0.015,155,0.799,156,1.43,229,3.648,278,1.601,309,3.648,310,4.028,311,3.96,312,3.96,313,4.32,315,2.047,316,4.07,317,3.648,319,2.55,321,2.781,322,3.46,464,3.46,465,4.05,466,4.05,467,4.05,468,4.05,469,5.312,470,4.05,471,4.05,472,4.05]],["title/modules/NestConfigModule.html",[110,0.868,125,2.269]],["body/modules/NestConfigModule.html",[3,0.249,4,0.222,5,0.222,22,0.021,60,0.487,66,0.455,77,0.249,78,0.032,91,2.875,108,0.014,109,0.014,110,1.364,112,1.382,113,1.552,114,1.753,115,1.753,116,1.552,117,2.227,118,2.522,125,3.991,130,2.37,131,1.753,132,1.753,134,2.154,222,3.149,224,2.33,225,3.163,337,4.665,473,3.163,474,3.163,475,3.702,476,3.702,477,3.702,478,3.163,479,4.274,480,2.542,481,3.163,482,3.794,483,3.702,484,3.702,485,3.702,486,3.702,487,5.003,488,3.702,489,3.702,490,3.702,491,3.702,492,3.702,493,3.702,494,4.842,495,3.702,496,3.163]],["title/modules/NestPinoModule.html",[110,0.868,126,2.269]],["body/modules/NestPinoModule.html",[3,0.349,4,0.157,5,0.235,22,0.022,27,0.563,60,0.387,63,2.962,66,0.321,77,0.176,78,0.023,82,0.629,91,2.758,97,1.544,108,0.011,109,0.011,110,0.94,112,0.977,118,1.164,126,2.459,134,2.273,224,1.646,255,1.983,315,1.322,337,3.211,341,2.683,346,1.983,396,1.796,414,2.234,438,3.546,440,1.983,478,3.337,480,1.796,481,2.234,494,2.234,497,1.983,498,2.615,499,3.906,500,2.234,501,3.337,502,2.615,503,3.995,504,2.615,505,3.546,506,2.234,507,2.234,508,2.234,509,4.209,510,2.234,511,2.234,512,2.234,513,2.234,514,2.615,515,2.615,516,2.615,517,2.615,518,2.615,519,2.615,520,2.615,521,2.615,522,2.615,523,2.615,524,2.615,525,2.615,526,2.615,527,2.615,528,2.615,529,3.337,530,2.615,531,2.615,532,2.615,533,2.615,534,2.615,535,2.615,536,2.615,537,2.615,538,3.906,539,5.186,540,4.676,541,5.186,542,5.186,543,4.676,544,2.615,545,4.676,546,4.676,547,3.906,548,3.906,549,2.615,550,2.615,551,2.615,552,2.615,553,2.615,554,2.615,555,2.234]],["title/classes/NewRecipeInput.html",[78,0.031,556,2.269]],["body/classes/NewRecipeInput.html",[3,0.26,4,0.232,5,0.232,7,0.409,20,0.872,21,2.928,22,0.021,24,1.049,28,1.24,33,2.256,60,0.384,77,0.26,78,0.045,91,1.832,93,4.394,108,0.015,109,0.015,141,2.093,165,1.819,235,1.722,243,2.435,280,3.647,556,3.244,557,5.279,558,3.305,559,4.95,560,3.305,561,3.868,562,5.153,563,3.868,564,3.908,565,3.868,566,3.868,567,3.868,568,4.394,569,5.153,570,5.153,571,3.868,572,3.868,573,3.868,574,3.305,575,3.868]],["title/injectables/ParseIntPipe.html",[155,0.542,189,2.475]],["body/injectables/ParseIntPipe.html",[3,0.273,4,0.244,5,0.244,7,0.43,8,1.354,9,2.813,20,0.612,22,0.021,24,0.736,26,1.092,27,0.876,28,0.979,30,0.926,33,1.983,60,0.397,66,0.654,77,0.273,78,0.035,82,0.979,97,1.608,108,0.015,109,0.015,155,0.801,156,1.435,189,3.657,205,2.055,216,2.055,278,1.608,349,3.084,576,4.55,577,3.474,578,4.039,579,4.55,580,4.504,581,5.383,582,4.066,583,2.792,584,4.55,585,5.326,586,4.066,587,3.474,588,4.066,589,3.084,590,3.474,591,3.474]],["title/modules/PostModule.html",[110,0.868,127,2.269]],["body/modules/PostModule.html",[3,0.273,4,0.244,5,0.244,22,0.021,60,0.443,66,0.5,71,4.176,77,0.273,78,0.035,108,0.015,109,0.015,110,1.429,112,1.518,113,1.704,114,1.926,115,1.926,116,1.704,117,2.643,118,2.643,127,4.416,130,2.522,131,1.926,132,1.926,134,3.099,427,3.631,433,3.084,592,3.474,593,4.066,594,3.474,595,3.474,596,4.066,597,4.066]],["title/injectables/PostService.html",[71,2.097,155,0.542]],["body/injectables/PostService.html",[3,0.172,4,0.154,5,0.154,7,0.271,8,0.978,9,3.222,11,3.288,19,3.232,20,0.967,22,0.021,24,1.046,26,1.552,27,1.244,28,1.391,30,1.253,31,3.475,60,0.344,62,3.894,66,0.315,71,2.239,76,1.614,77,0.172,78,0.022,79,1.214,82,1.324,97,1.521,105,3.202,108,0.011,109,0.011,155,0.579,156,0.905,168,1.713,199,1.492,393,2.595,394,1.944,398,3.504,598,2.19,599,3.848,600,3.848,601,3.848,602,2.19,603,2.563,604,3.848,605,4.62,606,2.563,607,3.848,608,6.166,609,2.563,610,2.563,611,2.563,612,4.62,613,3.848,614,2.563,615,4.387,616,3.848,617,2.563,618,2.563,619,3.504,620,3.504,621,3.947,622,2.563,623,3.947,624,2.563,625,2.563,626,2.563,627,2.563,628,2.563,629,2.563]],["title/modules/PrismaModule.html",[110,0.868,427,1.95]],["body/modules/PrismaModule.html",[3,0.292,4,0.261,5,0.261,22,0.021,60,0.414,66,0.533,77,0.292,78,0.038,108,0.016,109,0.016,110,1.474,112,1.62,113,1.819,114,2.055,115,2.055,116,1.819,117,2.727,118,2.727,130,2.631,131,2.055,132,2.055,393,3.661,427,3.756,630,3.707,631,3.707,632,3.707,633,4.339,634,4.339]],["title/injectables/PrismaService.html",[155,0.542,393,1.822]],["body/injectables/PrismaService.html",[3,0.306,4,0.273,5,0.273,7,0.481,8,1.455,9,2.966,22,0.021,24,0.824,30,1.036,60,0.427,66,0.559,76,2.864,77,0.306,78,0.04,108,0.016,109,0.016,155,0.861,156,1.606,246,3.93,278,1.799,393,2.892,635,3.887,636,6.262,637,6.913,638,4.55,639,3.45,640,4.55]],["title/classes/Recipe.html",[78,0.031,641,2.269]],["body/classes/Recipe.html",[3,0.244,4,0.218,5,0.218,7,0.384,20,0.947,21,3.18,22,0.021,24,1.14,28,1.187,33,2.29,36,4.087,60,0.27,77,0.244,78,0.031,91,2.336,93,4.251,108,0.014,109,0.014,141,1.961,165,1.741,235,1.613,280,3.787,284,4.213,559,4.789,560,3.096,564,4.563,568,4.924,574,3.096,641,3.529,642,3.096,643,5.606,644,3.624,645,3.624,646,3.624,647,3.624,648,3.624,649,4.932]],["title/classes/RecipesArgs.html",[78,0.031,650,2.269]],["body/classes/RecipesArgs.html",[3,0.271,4,0.242,5,0.242,7,0.427,20,0.797,21,2.677,22,0.021,24,0.959,60,0.395,77,0.271,78,0.046,108,0.015,109,0.015,141,2.183,165,1.87,168,2.358,215,3.083,216,2.677,235,1.796,243,2.54,564,4.764,568,3.06,619,4.486,620,4.486,650,3.335,651,3.447,652,4.018,653,4.035,654,4.035,655,5.298,656,4.035,657,4.035,658,5.298,659,5.916,660,4.035,661,4.035,662,4.035,663,4.035,664,4.035]],["title/modules/RecipesModule.html",[110,0.868,128,2.269]],["body/modules/RecipesModule.html",[3,0.29,4,0.26,5,0.26,22,0.021,60,0.481,66,0.531,77,0.29,78,0.038,108,0.016,109,0.016,110,1.472,112,1.614,113,1.811,114,2.047,115,2.047,116,1.811,117,2.721,118,1.923,128,4.294,130,2.624,131,2.047,132,2.047,276,3.804,665,3.692,666,3.692,667,3.969,668,4.321,669,4.321,670,3.804,671,4.321,672,3.692]],["title/classes/RecipesResolver.html",[78,0.031,670,2.475]],["body/classes/RecipesResolver.html",[3,0.153,4,0.136,5,0.136,7,0.24,8,0.892,9,2.885,20,0.829,21,2.635,22,0.021,24,0.998,26,1.48,27,1.187,28,1.327,30,1.187,31,2.982,33,1.841,36,3.036,60,0.428,66,0.279,77,0.153,78,0.02,79,1.075,81,1.147,82,1.255,97,1.387,108,0.01,109,0.01,141,1.228,153,1.94,199,1.321,205,1.147,235,1.011,315,1.147,351,1.94,556,3.036,583,1.559,589,1.722,639,2.661,641,4.256,650,3.47,667,3.207,670,2.409,672,1.94,673,1.94,674,4.288,675,4.823,676,3.509,677,3.509,678,2.271,679,2.271,680,2.271,681,6.43,682,4.823,683,2.271,684,3.509,685,2.271,686,4.823,687,2.271,688,2.271,689,3.509,690,2.271,691,2.271,692,2.271,693,2.271,694,2.409,695,2.271,696,2.271,697,2.271,698,2.271,699,2.271,700,1.94,701,1.94,702,1.94,703,1.94,704,1.94,705,2.271,706,2.271,707,2.271,708,2.271,709,2.271,710,2.271,711,2.271,712,2.271,713,2.271,714,2.271,715,2.271,716,2.271,717,2.271,718,2.271,719,2.271,720,2.271]],["title/injectables/RecipesService.html",[155,0.542,667,2.097]],["body/injectables/RecipesService.html",[3,0.202,4,0.18,5,0.18,7,0.318,8,1.099,9,3.231,20,0.834,22,0.021,24,1.003,26,1.488,27,1.193,28,1.334,30,1.262,31,3.489,33,2.043,36,2.721,60,0.413,64,3.693,66,0.369,77,0.202,78,0.026,82,1.334,91,1.422,105,1.747,108,0.012,109,0.012,155,0.65,156,1.06,173,3.278,174,3.278,206,3.693,556,3.488,641,2.721,650,3.696,667,2.515,701,2.565,702,2.565,703,2.565,704,2.565,721,2.565,722,4.323,723,4.323,724,4.323,725,3.003,726,4.323,727,4.323,728,4.323,729,3.278,730,4.323,731,4.323,732,4.323,733,4.323,734,3.003,735,4.323,736,3.003,737,4.323,738,3.003]],["title/interfaces/Response.html",[161,1.822,359,2.269]],["body/interfaces/Response.html",[3,0.285,4,0.254,5,0.254,7,0.448,20,0.637,22,0.021,60,0.451,66,0.52,77,0.367,78,0.037,82,1.019,105,3.854,108,0.016,109,0.016,155,0.823,161,2.139,163,2.907,165,1.93,231,2.664,278,1.673,309,2.907,311,3.441,312,2.664,313,3.754,315,2.139,316,3.754,317,3.754,319,2.664,321,2.907,359,3.441,739,3.21,740,5.172,741,3.616,742,3.616]],["title/guards/RolesGuard.html",[187,2.475,743,2.734]],["body/guards/RolesGuard.html",[3,0.245,4,0.219,5,0.219,7,0.386,8,1.26,20,0.746,22,0.021,24,0.897,26,1.331,27,1.067,28,1.193,30,0.831,60,0.369,66,0.448,73,3.758,77,0.245,78,0.032,79,1.729,81,1.844,82,1.193,91,1.729,97,2.386,108,0.014,109,0.014,155,0.746,185,3.403,187,3.403,199,2.124,228,2.768,278,1.443,311,3.798,315,1.844,346,2.768,694,3.403,744,3.65,745,3.118,746,6.034,747,3.65,748,6.507,749,3.65,750,4.955,751,3.65,752,3.65,753,3.65,754,3.65,755,3.65,756,4.955,757,3.65,758,3.65,759,3.65,760,3.65,761,3.65]],["title/injectables/TerminusLogger.html",[155,0.542,434,2.475]],["body/injectables/TerminusLogger.html",[3,0.228,4,0.204,5,0.204,7,0.358,8,1.197,20,0.814,22,0.021,24,0.98,26,1.453,27,1.165,28,1.302,30,1.232,33,2.124,52,3.7,60,0.252,66,0.416,77,0.228,78,0.029,108,0.013,109,0.013,155,0.708,156,1.196,246,3.232,252,3.68,315,3.214,341,4.568,434,3.232,496,5.433,583,4.015,729,2.568,762,4.995,763,2.893,764,5.41,765,6.144,766,3.387,767,5.847,768,5.41,769,3.387,770,5.41,771,3.387,772,4.707,773,3.387,774,3.387,775,3.387,776,3.387]],["title/injectables/TransformInterceptor.html",[155,0.542,231,2.269]],["body/injectables/TransformInterceptor.html",[3,0.27,4,0.242,5,0.242,7,0.425,8,1.344,20,0.605,22,0.021,24,0.728,26,1.079,27,0.865,28,0.967,30,0.915,60,0.44,66,0.494,77,0.355,78,0.035,82,0.967,105,3.075,108,0.015,109,0.015,155,0.795,156,1.419,161,2.031,231,3.327,278,1.589,309,4.055,310,3.048,311,3.948,312,3.717,313,4.307,315,2.67,316,4.055,317,3.629,319,2.53,321,2.76,359,2.53,739,3.048,740,3.433,741,3.433,742,3.433,777,4.019]],["title/modules/UserModule.html",[110,0.868,129,2.269]],["body/modules/UserModule.html",[3,0.273,4,0.244,5,0.244,22,0.021,60,0.443,66,0.5,69,4.176,77,0.273,78,0.035,108,0.015,109,0.015,110,1.429,112,1.518,113,1.704,114,1.926,115,1.926,116,1.704,117,2.643,118,2.643,129,4.416,130,2.522,131,1.926,132,1.926,134,3.099,427,3.631,433,3.084,778,3.474,779,3.474,780,3.474,781,4.066,782,4.066,783,4.066]],["title/injectables/UserService.html",[69,2.097,155,0.542]],["body/injectables/UserService.html",[3,0.172,4,0.154,5,0.154,7,0.271,8,0.978,9,3.222,19,3.232,20,0.967,22,0.021,24,1.046,26,1.552,27,1.244,28,1.391,30,1.253,31,3.475,60,0.344,66,0.315,69,2.239,73,3.894,76,1.614,77,0.172,78,0.022,79,1.214,82,1.324,97,1.521,105,3.202,108,0.011,109,0.011,155,0.579,156,0.905,168,1.713,199,1.492,393,2.595,394,1.944,398,3.504,602,2.19,615,4.387,619,3.504,620,3.504,621,3.947,623,3.947,784,2.19,785,3.848,786,3.848,787,3.848,788,3.848,789,2.563,790,3.848,791,4.62,792,2.563,793,3.848,794,6.166,795,2.563,796,3.848,797,2.563,798,2.563,799,2.563,800,4.62,801,3.848,802,2.563,803,2.563,804,2.563,805,2.563,806,2.563,807,2.563,808,2.563,809,2.563,810,2.563]],["title/injectables/ValidationPipe.html",[155,0.542,811,2.734]],["body/injectables/ValidationPipe.html",[3,0.22,4,0.196,5,0.196,7,0.346,8,1.168,9,2.514,20,0.972,22,0.021,24,0.831,26,1.233,27,0.989,28,1.105,30,1.046,33,1.092,60,0.396,66,0.402,77,0.22,78,0.046,80,3.341,82,1.278,97,2.276,108,0.013,109,0.013,155,0.691,156,1.154,168,1.455,205,1.652,216,2.909,243,2.058,255,2.479,278,1.292,349,2.479,578,3.482,579,3.923,580,4.366,581,4.918,583,2.245,584,3.923,589,2.479,590,2.793,591,2.793,639,2.479,652,2.479,694,3.645,811,3.482,812,2.793,813,4.592,814,4.592,815,3.269,816,5.757,817,3.269,818,3.269,819,2.793,820,3.269,821,3.269,822,3.923,823,3.269,824,3.269,825,3.269,826,3.269,827,3.269,828,3.269]],["title/coverage.html",[829,3.726]],["body/coverage.html",[0,2.349,1,1.591,5,0.139,6,1.979,20,0.349,22,0.021,67,1.348,69,1.348,71,1.348,78,0.053,108,0.01,109,0.01,116,0.971,155,0.984,157,1.979,161,2.194,162,1.458,164,1.979,169,1.591,170,1.979,177,1.591,185,1.591,187,1.591,189,1.591,192,1.348,205,1.171,211,1.979,220,1.757,221,1.979,222,1.458,229,1.591,231,1.458,236,1.979,237,1.979,244,1.591,245,2.702,254,1.757,259,1.591,276,1.591,277,1.979,307,1.757,308,1.979,328,1.757,329,1.979,330,1.979,359,1.458,380,1.591,381,1.979,393,1.171,434,1.591,446,1.757,447,1.979,455,1.757,456,1.979,461,2.702,464,1.979,480,1.591,482,1.757,497,2.702,505,1.757,509,1.757,556,1.458,557,1.979,558,1.979,576,1.979,577,1.979,598,1.979,635,1.979,641,1.458,642,1.979,650,1.458,651,1.979,652,5.528,667,1.348,670,1.591,673,1.979,721,1.979,739,2.702,743,1.757,745,1.979,762,1.979,763,1.979,784,1.979,811,1.757,812,1.979,829,1.757,830,2.316,831,2.316,832,2.316,833,2.316,834,6.256,835,5.788,836,3.044,837,5.438,838,1.979,839,6.46,840,1.979,841,1.979,842,1.979,843,4.875,844,1.979,845,1.979,846,1.979,847,3.563,848,3.044,849,1.979,850,1.979,851,2.316,852,2.316,853,1.979,854,4.342,855,2.316,856,2.316,857,2.316,858,2.316,859,2.316]],["title/dependencies.html",[113,1.816,860,2.574]],["body/dependencies.html",[22,0.021,66,0.475,76,2.435,78,0.045,108,0.015,109,0.015,113,1.621,141,2.093,144,3.305,224,2.435,228,2.934,243,2.435,297,3.305,319,2.435,356,3.305,392,2.934,396,2.656,431,3.305,440,2.934,479,3.305,500,3.305,501,4.95,580,2.934,700,3.305,819,3.305,861,3.868,862,3.868,863,3.868,864,3.868,865,3.868,866,3.868,867,3.868,868,6.179,869,3.868,870,5.153,871,5.153,872,3.868,873,3.868,874,3.868,875,3.868,876,3.868,877,3.868,878,3.868,879,3.868,880,3.868,881,3.868,882,3.868,883,3.868,884,3.868,885,3.868,886,3.868,887,3.868,888,3.868,889,3.868,890,3.868,891,3.868]],["title/miscellaneous/enumerations.html",[892,1.523,893,3.703]],["body/miscellaneous/enumerations.html",[7,0.486,22,0.021,108,0.016,109,0.016,216,3.624,250,3.952,892,2.319,893,3.921,894,3.921,895,4.917,896,3.921,897,5.756,898,5.756,899,5.756,900,5.756,901,5.756,902,5.756,903,5.756,904,5.756,905,5.756]],["title/miscellaneous/functions.html",[892,1.523,906,3.703]],["body/miscellaneous/functions.html",[7,0.541,22,0.019,30,1.164,31,3.327,108,0.018,109,0.018,116,2.764,332,4.664,849,4.368,850,5.635,853,4.368,892,2.583,906,4.368,907,5.112,908,5.112,909,5.112,910,6.149]],["title/index.html",[7,0.319,911,3.013,912,3.013]],["body/index.html",[4,0.226,22,0.021,99,2.848,108,0.014,109,0.014,222,2.364,280,2.364,375,3.209,729,2.848,829,2.848,913,3.756,914,3.756,915,5.052,916,3.756,917,3.756,918,3.756,919,3.756,920,3.756,921,5.709,922,3.756,923,3.756,924,3.756,925,3.756,926,5.709,927,6.705,928,3.756,929,3.209,930,6.562,931,3.209,932,3.756,933,5.052,934,3.756,935,3.209,936,3.756,937,3.756,938,5.052,939,4.316,940,3.756,941,3.756,942,3.756,943,5.052,944,5.052,945,3.756,946,3.756,947,3.756,948,3.756,949,3.756,950,3.209,951,3.756,952,3.756,953,3.756,954,3.756,955,3.756,956,3.756,957,3.756,958,3.756,959,3.756,960,3.756,961,3.756,962,3.756,963,3.756,964,3.756,965,3.756,966,3.209]],["title/modules.html",[112,1.835]],["body/modules.html",[22,0.016,108,0.016,109,0.016,111,3.097,112,1.684,122,2.839,123,2.839,124,2.839,125,2.839,126,2.839,127,2.839,128,2.839,129,2.839,427,2.44,950,6.053,967,7.085,968,7.085,969,7.203,970,5.692,971,5.692]],["title/overview.html",[972,4.198]],["body/overview.html",[2,1.606,22,0.021,67,2.928,69,3.654,71,3.654,108,0.012,109,0.012,110,0.714,111,4.905,112,1.108,113,1.244,114,1.406,115,1.406,116,1.244,117,1.321,118,1.321,119,2.536,120,2.536,121,2.536,122,3.679,123,3.168,124,3.679,125,3.469,126,3.168,127,4.047,128,3.679,129,4.047,130,2.03,131,1.406,132,1.406,156,1.048,163,2.038,192,2.928,207,2.536,208,2.536,235,1.321,337,3.785,393,3.173,425,2.536,426,2.536,427,3.478,473,2.536,474,2.536,587,2.536,592,2.536,594,2.536,595,2.536,630,2.536,631,2.536,632,2.536,665,2.536,666,2.536,667,2.928,743,2.251,778,2.536,779,2.536,780,2.536,972,2.536,973,4.287,974,2.968,975,2.968,976,2.968]],["title/properties.html",[165,1.53,860,2.574]],["body/properties.html",[22,0.021,99,4.1,108,0.018,109,0.018,165,1.909,280,3.403,966,4.619,977,4.619,978,5.406,979,5.406]],["title/miscellaneous/typealiases.html",[892,1.523,980,4.334]],["body/miscellaneous/typealiases.html",[7,0.569,19,3.385,20,0.954,22,0.018,108,0.018,109,0.018,448,5.415,892,2.718,894,4.595,895,5.415,896,4.595,981,5.378]],["title/miscellaneous/variables.html",[892,1.523,982,3.703]],["body/miscellaneous/variables.html",[7,0.211,20,0.854,22,0.021,27,0.429,30,0.722,33,1.501,82,1.473,91,2.689,108,0.009,109,0.009,168,0.888,171,1.513,185,3.085,215,3.623,216,3.194,222,1.995,245,1.513,253,1.37,254,2.404,259,2.177,260,2.177,261,1.704,262,4.459,263,1.704,264,2.708,265,1.704,266,2.708,267,1.704,268,2.708,269,1.704,270,2.708,271,1.513,272,2.177,273,1.704,274,2.708,275,2.708,377,1.704,405,2.708,438,2.991,461,3.407,480,2.177,482,2.404,497,1.513,503,1.704,505,2.991,506,1.704,507,1.704,508,1.704,509,2.404,510,1.704,511,1.704,512,1.704,513,1.704,529,1.704,555,1.704,578,1.513,694,2.177,822,3.839,836,1.704,837,2.708,838,2.708,840,2.708,841,1.704,842,1.704,844,1.704,845,2.708,846,1.704,848,1.704,892,1.008,929,3.37,931,1.704,935,3.37,939,1.704,977,1.704,982,1.704,983,3.17,984,3.17,985,1.995,986,3.17,987,1.995,988,1.995,989,1.995,990,1.995,991,1.995,992,1.995,993,1.995,994,1.995,995,1.995,996,1.995,997,1.995,998,1.995,999,1.995,1000,1.995,1001,1.995,1002,1.995,1003,1.995,1004,1.995,1005,1.995,1006,1.995,1007,1.995,1008,1.995,1009,1.995,1010,3.944,1011,1.995,1012,1.995,1013,1.995,1014,1.995,1015,1.995,1016,1.995,1017,3.17,1018,1.995,1019,1.995,1020,1.995,1021,1.995,1022,1.995,1023,1.995,1024,3.944,1025,1.995,1026,1.995,1027,1.995,1028,1.995,1029,1.995,1030,3.17,1031,1.995,1032,1.995,1033,1.995,1034,3.17,1035,3.17,1036,1.995,1037,1.995,1038,1.995,1039,1.995,1040,1.995,1041,1.995,1042,1.995,1043,1.995,1044,3.17,1045,1.995,1046,1.995,1047,3.17,1048,1.995,1049,1.995,1050,1.995,1051,1.995,1052,1.995,1053,3.17,1054,3.17,1055,5.22,1056,3.17,1057,3.17,1058,3.17,1059,3.17,1060,3.17,1061,3.17,1062,1.995,1063,3.17,1064,1.995,1065,1.995]]],"invertedIndex":[["",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"interfaces/Cat.html":{},"controllers/CatsController.html":{},"modules/CatsModule.html":{},"injectables/CatsService.html":{},"interfaces/Config.html":{},"modules/CoreModule.html":{},"classes/CreateCatDto.html":{},"classes/CustomHttpException.html":{},"classes/DateScalar.html":{},"injectables/ExceptionInterceptor.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/HttpError.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"modules/NestConfigModule.html":{},"modules/NestPinoModule.html":{},"classes/NewRecipeInput.html":{},"injectables/ParseIntPipe.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Recipe.html":{},"classes/RecipesArgs.html":{},"modules/RecipesModule.html":{},"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TerminusLogger.html":{},"injectables/TransformInterceptor.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":652,"title":{},"body":{"classes/RecipesArgs.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["0.0.1",{"_index":978,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":882,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":890,"title":{},"body":{"dependencies.html":{}}}],["0.5",{"_index":413,"title":{},"body":{"controllers/HealthController.html":{}}}],["0.5.1",{"_index":881,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":839,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":833,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":834,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":843,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":835,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":847,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":855,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":854,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":976,"title":{},"body":{"overview.html":{}}}],["1.6.8",{"_index":878,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":852,"title":{},"body":{"coverage.html":{}}}],["1/5",{"_index":857,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":587,"title":{},"body":{"injectables/ParseIntPipe.html":{},"overview.html":{}}}],["10.2.3",{"_index":875,"title":{},"body":{"dependencies.html":{}}}],["10.3.7",{"_index":868,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":851,"title":{},"body":{"coverage.html":{}}}],["1000",{"_index":445,"title":{},"body":{"modules/HealthModule.html":{}}}],["1024",{"_index":418,"title":{},"body":{"controllers/HealthController.html":{}}}],["11.0.0",{"_index":888,"title":{},"body":{"dependencies.html":{}}}],["11.1.1",{"_index":862,"title":{},"body":{"dependencies.html":{}}}],["12.1.1",{"_index":870,"title":{},"body":{"dependencies.html":{}}}],["13",{"_index":974,"title":{},"body":{"overview.html":{}}}],["14.0.0",{"_index":885,"title":{},"body":{"dependencies.html":{}}}],["16.8.1",{"_index":883,"title":{},"body":{"dependencies.html":{}}}],["17.12.2",{"_index":884,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":856,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":420,"title":{},"body":{"controllers/HealthController.html":{}}}],["25",{"_index":655,"title":{},"body":{"classes/RecipesArgs.html":{}}}],["250",{"_index":415,"title":{},"body":{"controllers/HealthController.html":{}}}],["255",{"_index":562,"title":{},"body":{"classes/NewRecipeInput.html":{}}}],["3",{"_index":973,"title":{},"body":{"overview.html":{}}}],["3.0.0",{"_index":866,"title":{},"body":{"dependencies.html":{}}}],["3.0.2",{"_index":867,"title":{},"body":{"dependencies.html":{}}}],["3.2.1",{"_index":869,"title":{},"body":{"dependencies.html":{}}}],["3000",{"_index":422,"title":{},"body":{"controllers/HealthController.html":{}}}],["4.0.0",{"_index":886,"title":{},"body":{"dependencies.html":{}}}],["4.1.2",{"_index":880,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":1042,"title":{},"body":{"miscellaneous/variables.html":{}}}],["401",{"_index":1043,"title":{},"body":{"miscellaneous/variables.html":{}}}],["403",{"_index":1044,"title":{},"body":{"miscellaneous/variables.html":{}}}],["404",{"_index":1046,"title":{},"body":{"miscellaneous/variables.html":{}}}],["5.11.0",{"_index":876,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":408,"title":{},"body":{"controllers/HealthController.html":{}}}],["500",{"_index":1047,"title":{},"body":{"miscellaneous/variables.html":{}}}],["503",{"_index":1048,"title":{},"body":{"miscellaneous/variables.html":{}}}],["504",{"_index":1050,"title":{},"body":{"miscellaneous/variables.html":{}}}],["7.0.2",{"_index":864,"title":{},"body":{"dependencies.html":{}}}],["7.3.1",{"_index":874,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":891,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":975,"title":{},"body":{"overview.html":{}}}],["9.0.0",{"_index":887,"title":{},"body":{"dependencies.html":{}}}],["_configservice",{"_index":517,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["_request",{"_index":525,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["_response",{"_index":526,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["abortearly",{"_index":493,"title":{},"body":{"modules/NestConfigModule.html":{}}}],["above",{"_index":549,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["addrecipe",{"_index":674,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["addrecipe(newrecipedata",{"_index":680,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["age",{"_index":166,"title":{},"body":{"interfaces/Cat.html":{},"classes/CreateCatDto.html":{}}}],["aliases",{"_index":981,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allowed_hosts",{"_index":1026,"title":{},"body":{"miscellaneous/variables.html":{}}}],["allowedorigins",{"_index":1001,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amazing",{"_index":951,"title":{},"body":{"index.html":{}}}],["api",{"_index":523,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["api_url",{"_index":1016,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app",{"_index":222,"title":{},"body":{"interfaces/Config.html":{},"modules/NestConfigModule.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["app.config",{"_index":225,"title":{},"body":{"interfaces/Config.html":{},"modules/NestConfigModule.html":{}}}],["app.controller",{"_index":135,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":68,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_environments",{"_index":838,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["app_interceptor",{"_index":227,"title":{},"body":{"modules/CoreModule.html":{}}}],["app_name",{"_index":1023,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app_port",{"_index":1014,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app_prefix",{"_index":1018,"title":{},"body":{"miscellaneous/variables.html":{}}}],["appconfigvalidationschema",{"_index":482,"title":{},"body":{"modules/NestConfigModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":1060,"title":{},"body":{"miscellaneous/variables.html":{}}}],["applications",{"_index":920,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":111,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":67,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["apputils",{"_index":845,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["args",{"_index":696,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["args('newrecipedata",{"_index":711,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["argstype",{"_index":658,"title":{},"body":{"classes/RecipesArgs.html":{}}}],["argumentmetadata",{"_index":581,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["argumentshost",{"_index":343,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["array",{"_index":827,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["ast",{"_index":291,"title":{},"body":{"classes/DateScalar.html":{}}}],["ast.kind",{"_index":303,"title":{},"body":{"classes/DateScalar.html":{}}}],["async",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"controllers/CatsController.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{}}}],["author",{"_index":99,"title":{},"body":{"controllers/AppController.html":{},"index.html":{},"properties.html":{}}}],["authoremail",{"_index":96,"title":{},"body":{"controllers/AppController.html":{}}}],["autoschemafile",{"_index":151,"title":{},"body":{"modules/AppModule.html":{}}}],["available",{"_index":971,"title":{},"body":{"modules.html":{}}}],["await",{"_index":639,"title":{},"body":{"injectables/PrismaService.html":{},"classes/RecipesResolver.html":{},"injectables/ValidationPipe.html":{}}}],["axios",{"_index":877,"title":{},"body":{"dependencies.html":{}}}],["backend",{"_index":522,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["backers",{"_index":952,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":349,"title":{},"body":{"classes/GlobalExceptionFilter.html":{},"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["badrequestexception('validation",{"_index":590,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["basepinooptions",{"_index":509,"title":{},"body":{"modules/NestPinoModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["body",{"_index":63,"title":{},"body":{"controllers/AppController.html":{},"controllers/CatsController.html":{},"modules/NestPinoModule.html":{}}}],["boolean",{"_index":694,"title":{},"body":{"classes/RecipesResolver.html":{},"guards/RolesGuard.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["bootstrap",{"_index":116,"title":{},"body":{"modules/AppModule.html":{},"modules/CatsModule.html":{},"modules/HealthModule.html":{},"modules/NestConfigModule.html":{},"modules/PostModule.html":{},"modules/PrismaModule.html":{},"modules/RecipesModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["breed",{"_index":167,"title":{},"body":{"interfaces/Cat.html":{},"classes/CreateCatDto.html":{}}}],["browse",{"_index":969,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":967,"title":{},"body":{"modules.html":{}}}],["building",{"_index":916,"title":{},"body":{"index.html":{}}}],["business",{"_index":728,"title":{},"body":{"injectables/RecipesService.html":{}}}],["cache",{"_index":487,"title":{},"body":{"modules/NestConfigModule.html":{}}}],["callhandler",{"_index":313,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["canactivate",{"_index":746,"title":{},"body":{"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":750,"title":{},"body":{"guards/RolesGuard.html":{}}}],["case",{"_index":262,"title":{},"body":{"classes/CustomHttpException.html":{},"miscellaneous/variables.html":{}}}],["cat",{"_index":162,"title":{"interfaces/Cat.html":{}},"body":{"interfaces/Cat.html":{},"controllers/CatsController.html":{},"injectables/CatsService.html":{},"coverage.html":{}}}],["cat.dto",{"_index":195,"title":{},"body":{"controllers/CatsController.html":{}}}],["cat.dto.ts",{"_index":237,"title":{},"body":{"classes/CreateCatDto.html":{},"coverage.html":{}}}],["cat.dto.ts:11",{"_index":241,"title":{},"body":{"classes/CreateCatDto.html":{}}}],["cat.dto.ts:5",{"_index":242,"title":{},"body":{"classes/CreateCatDto.html":{}}}],["cat.dto.ts:8",{"_index":239,"title":{},"body":{"classes/CreateCatDto.html":{}}}],["catch",{"_index":333,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["catch(exception",{"_index":340,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["catcherror",{"_index":320,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["catcherror(err",{"_index":324,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["cats",{"_index":172,"title":{},"body":{"controllers/CatsController.html":{},"injectables/CatsService.html":{}}}],["cats.controller",{"_index":210,"title":{},"body":{"modules/CatsModule.html":{}}}],["cats.service",{"_index":193,"title":{},"body":{"controllers/CatsController.html":{},"modules/CatsModule.html":{}}}],["cats/cats.module",{"_index":137,"title":{},"body":{"modules/AppModule.html":{}}}],["catscontroller",{"_index":169,"title":{"controllers/CatsController.html":{}},"body":{"controllers/CatsController.html":{},"modules/CatsModule.html":{},"coverage.html":{}}}],["catsmodule",{"_index":122,"title":{"modules/CatsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CatsModule.html":{},"modules.html":{},"overview.html":{}}}],["catsservice",{"_index":192,"title":{"injectables/CatsService.html":{}},"body":{"controllers/CatsController.html":{},"modules/CatsModule.html":{},"injectables/CatsService.html":{},"coverage.html":{},"overview.html":{}}}],["censor",{"_index":534,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["chalk",{"_index":879,"title":{},"body":{"dependencies.html":{}}}],["check",{"_index":383,"title":{},"body":{"controllers/HealthController.html":{}}}],["checking",{"_index":1054,"title":{},"body":{"miscellaneous/variables.html":{}}}],["class",{"_index":78,"title":{"classes/CreateCatDto.html":{},"classes/CustomHttpException.html":{},"classes/DateScalar.html":{},"classes/GlobalExceptionFilter.html":{},"classes/HttpError.html":{},"classes/NewRecipeInput.html":{},"classes/Recipe.html":{},"classes/RecipesArgs.html":{},"classes/RecipesResolver.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/CatsController.html":{},"modules/CatsModule.html":{},"injectables/CatsService.html":{},"modules/CoreModule.html":{},"classes/CreateCatDto.html":{},"classes/CustomHttpException.html":{},"classes/DateScalar.html":{},"injectables/ExceptionInterceptor.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/HttpError.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"modules/NestConfigModule.html":{},"modules/NestPinoModule.html":{},"classes/NewRecipeInput.html":{},"injectables/ParseIntPipe.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Recipe.html":{},"classes/RecipesArgs.html":{},"modules/RecipesModule.html":{},"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TerminusLogger.html":{},"injectables/TransformInterceptor.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":235,"title":{},"body":{"classes/CreateCatDto.html":{},"classes/CustomHttpException.html":{},"classes/DateScalar.html":{},"classes/GlobalExceptionFilter.html":{},"classes/HttpError.html":{},"classes/NewRecipeInput.html":{},"classes/Recipe.html":{},"classes/RecipesArgs.html":{},"classes/RecipesResolver.html":{},"overview.html":{}}}],["client",{"_index":300,"title":{},"body":{"classes/DateScalar.html":{}}}],["client_url",{"_index":1025,"title":{},"body":{"miscellaneous/variables.html":{}}}],["clienturl",{"_index":999,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cluster_appmodule",{"_index":119,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":121,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":120,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_catsmodule",{"_index":207,"title":{},"body":{"modules/CatsModule.html":{},"overview.html":{}}}],["cluster_catsmodule_providers",{"_index":208,"title":{},"body":{"modules/CatsModule.html":{},"overview.html":{}}}],["cluster_healthmodule",{"_index":425,"title":{},"body":{"modules/HealthModule.html":{},"overview.html":{}}}],["cluster_healthmodule_imports",{"_index":426,"title":{},"body":{"modules/HealthModule.html":{},"overview.html":{}}}],["cluster_nestconfigmodule",{"_index":473,"title":{},"body":{"modules/NestConfigModule.html":{},"overview.html":{}}}],["cluster_nestconfigmodule_exports",{"_index":474,"title":{},"body":{"modules/NestConfigModule.html":{},"overview.html":{}}}],["cluster_postmodule",{"_index":592,"title":{},"body":{"modules/PostModule.html":{},"overview.html":{}}}],["cluster_postmodule_exports",{"_index":594,"title":{},"body":{"modules/PostModule.html":{},"overview.html":{}}}],["cluster_postmodule_imports",{"_index":593,"title":{},"body":{"modules/PostModule.html":{}}}],["cluster_postmodule_providers",{"_index":595,"title":{},"body":{"modules/PostModule.html":{},"overview.html":{}}}],["cluster_prismamodule",{"_index":630,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_exports",{"_index":631,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_providers",{"_index":632,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_recipesmodule",{"_index":665,"title":{},"body":{"modules/RecipesModule.html":{},"overview.html":{}}}],["cluster_recipesmodule_providers",{"_index":666,"title":{},"body":{"modules/RecipesModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":778,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":779,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_imports",{"_index":781,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":780,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["code",{"_index":248,"title":{},"body":{"classes/CustomHttpException.html":{},"classes/GlobalExceptionFilter.html":{},"classes/HttpError.html":{}}}],["colorize",{"_index":551,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["common/decorators/roles.decorator",{"_index":186,"title":{},"body":{"controllers/CatsController.html":{}}}],["common/errors",{"_index":354,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["common/exception",{"_index":353,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["common/guards/roles.guard",{"_index":188,"title":{},"body":{"controllers/CatsController.html":{}}}],["common/helpers",{"_index":481,"title":{},"body":{"modules/NestConfigModule.html":{},"modules/NestPinoModule.html":{}}}],["common/pipes/parse",{"_index":190,"title":{},"body":{"controllers/CatsController.html":{}}}],["common/scalars/date.scalar",{"_index":669,"title":{},"body":{"modules/RecipesModule.html":{}}}],["compliant",{"_index":536,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["config",{"_index":220,"title":{"interfaces/Config.html":{}},"body":{"interfaces/Config.html":{},"coverage.html":{}}}],["configmodule",{"_index":478,"title":{},"body":{"modules/NestConfigModule.html":{},"modules/NestPinoModule.html":{}}}],["configmodule.forroot",{"_index":483,"title":{},"body":{"modules/NestConfigModule.html":{}}}],["configservice",{"_index":337,"title":{},"body":{"classes/GlobalExceptionFilter.html":{},"modules/NestConfigModule.html":{},"modules/NestPinoModule.html":{},"overview.html":{}}}],["configtype",{"_index":223,"title":{},"body":{"interfaces/Config.html":{}}}],["connect",{"_index":100,"title":{},"body":{"controllers/AppController.html":{}}}],["console",{"_index":550,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["console.log('before",{"_index":467,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["console.log(`after",{"_index":471,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["console.log(`request",{"_index":463,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["consolelogger",{"_index":764,"title":{},"body":{"injectables/TerminusLogger.html":{}}}],["const",{"_index":97,"title":{},"body":{"controllers/AppController.html":{},"classes/CustomHttpException.html":{},"classes/GlobalExceptionFilter.html":{},"classes/HttpError.html":{},"injectables/LoggingInterceptor.html":{},"modules/NestPinoModule.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostService.html":{},"classes/RecipesResolver.html":{},"guards/RolesGuard.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{}}}],["constructor",{"_index":79,"title":{},"body":{"controllers/AppController.html":{},"classes/CustomHttpException.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/HealthController.html":{},"classes/HttpError.html":{},"injectables/PostService.html":{},"classes/RecipesResolver.html":{},"guards/RolesGuard.html":{},"injectables/UserService.html":{}}}],["constructor(configservice",{"_index":336,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["constructor(error",{"_index":449,"title":{},"body":{"classes/HttpError.html":{}}}],["constructor(message",{"_index":249,"title":{},"body":{"classes/CustomHttpException.html":{}}}],["constructor(prisma",{"_index":602,"title":{},"body":{"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["constructor(private",{"_index":199,"title":{},"body":{"controllers/CatsController.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/PostService.html":{},"classes/RecipesResolver.html":{},"guards/RolesGuard.html":{},"injectables/UserService.html":{}}}],["constructor(recipesservice",{"_index":678,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["constructor(reflector",{"_index":747,"title":{},"body":{"guards/RolesGuard.html":{}}}],["contains",{"_index":94,"title":{},"body":{"controllers/AppController.html":{}}}],["content",{"_index":95,"title":{},"body":{"controllers/AppController.html":{}}}],["context",{"_index":315,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"modules/NestPinoModule.html":{},"classes/RecipesResolver.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TerminusLogger.html":{},"injectables/TransformInterceptor.html":{}}}],["context('pubsub",{"_index":712,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["context.gethandler",{"_index":753,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":754,"title":{},"body":{"guards/RolesGuard.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/CatsController.html":{},"controllers/HealthController.html":{}},"body":{"controllers/AppController.html":{},"controllers/CatsController.html":{},"controllers/HealthController.html":{},"coverage.html":{}}}],["controller('cats",{"_index":198,"title":{},"body":{"controllers/CatsController.html":{}}}],["controller('health",{"_index":395,"title":{},"body":{"controllers/HealthController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/CatsController.html":{},"modules/CatsModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"overview.html":{}}}],["core/config",{"_index":147,"title":{},"body":{"modules/AppModule.html":{}}}],["core/core.module",{"_index":136,"title":{},"body":{"modules/AppModule.html":{}}}],["core/pino",{"_index":148,"title":{},"body":{"modules/AppModule.html":{}}}],["coremodule",{"_index":123,"title":{"modules/CoreModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CoreModule.html":{},"modules.html":{},"overview.html":{}}}],["coverage",{"_index":829,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":173,"title":{},"body":{"controllers/CatsController.html":{},"injectables/CatsService.html":{},"injectables/RecipesService.html":{}}}],["create(@body",{"_index":201,"title":{},"body":{"controllers/CatsController.html":{}}}],["create(cat",{"_index":212,"title":{},"body":{"injectables/CatsService.html":{}}}],["create(createcatdto",{"_index":176,"title":{},"body":{"controllers/CatsController.html":{}}}],["create(data",{"_index":724,"title":{},"body":{"injectables/RecipesService.html":{}}}],["createcatdto",{"_index":177,"title":{"classes/CreateCatDto.html":{}},"body":{"controllers/CatsController.html":{},"classes/CreateCatDto.html":{},"coverage.html":{}}}],["createdraft",{"_index":10,"title":{},"body":{"controllers/AppController.html":{}}}],["createdraft(postdata",{"_index":18,"title":{},"body":{"controllers/AppController.html":{}}}],["createlogger",{"_index":850,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["createpost",{"_index":599,"title":{},"body":{"injectables/PostService.html":{}}}],["createpost(data",{"_index":604,"title":{},"body":{"injectables/PostService.html":{}}}],["creates",{"_index":909,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createuser",{"_index":785,"title":{},"body":{"injectables/UserService.html":{}}}],["createuser(data",{"_index":790,"title":{},"body":{"injectables/UserService.html":{}}}],["creationdate",{"_index":643,"title":{},"body":{"classes/Recipe.html":{}}}],["ctx",{"_index":357,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["ctx.getrequest",{"_index":361,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["ctx.getresponse",{"_index":360,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["cursor",{"_index":621,"title":{},"body":{"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["custom",{"_index":285,"title":{},"body":{"classes/DateScalar.html":{}}}],["customexception",{"_index":364,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["customexception.code",{"_index":368,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["customexception.getstatus",{"_index":365,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["customhttpexception",{"_index":244,"title":{"classes/CustomHttpException.html":{}},"body":{"classes/CustomHttpException.html":{},"classes/GlobalExceptionFilter.html":{},"coverage.html":{}}}],["customprops",{"_index":524,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["customscalar",{"_index":279,"title":{},"body":{"classes/DateScalar.html":{}}}],["data",{"_index":105,"title":{},"body":{"controllers/AppController.html":{},"injectables/PostService.html":{},"injectables/RecipesService.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserService.html":{}}}],["database_connection_unavailable",{"_index":903,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["date",{"_index":284,"title":{},"body":{"classes/DateScalar.html":{},"classes/Recipe.html":{}}}],["date(ast.value",{"_index":305,"title":{},"body":{"classes/DateScalar.html":{}}}],["date(date.now()).toisostring",{"_index":521,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["date(value",{"_index":299,"title":{},"body":{"classes/DateScalar.html":{}}}],["date.now",{"_index":469,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["datescalar",{"_index":276,"title":{"classes/DateScalar.html":{}},"body":{"classes/DateScalar.html":{},"modules/RecipesModule.html":{},"coverage.html":{}}}],["debug",{"_index":495,"title":{},"body":{"modules/NestConfigModule.html":{}}}],["declarations",{"_index":115,"title":{},"body":{"modules/AppModule.html":{},"modules/CatsModule.html":{},"modules/HealthModule.html":{},"modules/NestConfigModule.html":{},"modules/PostModule.html":{},"modules/PrismaModule.html":{},"modules/RecipesModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decorators",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"controllers/CatsController.html":{},"classes/CreateCatDto.html":{},"controllers/HealthController.html":{},"classes/NewRecipeInput.html":{},"classes/Recipe.html":{},"classes/RecipesArgs.html":{},"classes/RecipesResolver.html":{}}}],["default",{"_index":215,"title":{},"body":{"injectables/CatsService.html":{},"classes/CustomHttpException.html":{},"classes/DateScalar.html":{},"classes/GlobalExceptionFilter.html":{},"classes/RecipesArgs.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/CatsController.html":{},"injectables/CatsService.html":{},"classes/CreateCatDto.html":{},"classes/CustomHttpException.html":{},"classes/DateScalar.html":{},"injectables/ExceptionInterceptor.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/HealthController.html":{},"classes/HttpError.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"classes/NewRecipeInput.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"classes/Recipe.html":{},"classes/RecipesArgs.html":{},"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{},"guards/RolesGuard.html":{},"injectables/TerminusLogger.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{}}}],["delete",{"_index":65,"title":{},"body":{"controllers/AppController.html":{}}}],["delete('post/:id",{"_index":34,"title":{},"body":{"controllers/AppController.html":{}}}],["deletepost",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"injectables/PostService.html":{}}}],["deletepost(@param('id",{"_index":106,"title":{},"body":{"controllers/AppController.html":{}}}],["deletepost(id",{"_index":32,"title":{},"body":{"controllers/AppController.html":{}}}],["deletepost(where",{"_index":607,"title":{},"body":{"injectables/PostService.html":{}}}],["deleteuser",{"_index":786,"title":{},"body":{"injectables/UserService.html":{}}}],["deleteuser(where",{"_index":793,"title":{},"body":{"injectables/UserService.html":{}}}],["demonstration",{"_index":731,"title":{},"body":{"injectables/RecipesService.html":{}}}],["dependencies",{"_index":113,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/CatsModule.html":{},"modules/HealthModule.html":{},"modules/NestConfigModule.html":{},"modules/PostModule.html":{},"modules/PrismaModule.html":{},"modules/RecipesModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":280,"title":{},"body":{"classes/DateScalar.html":{},"classes/NewRecipeInput.html":{},"classes/Recipe.html":{},"index.html":{},"properties.html":{}}}],["destination",{"_index":543,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["determine",{"_index":1059,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dev",{"_index":1030,"title":{},"body":{"miscellaneous/variables.html":{}}}],["development",{"_index":929,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["disk",{"_index":399,"title":{},"body":{"controllers/HealthController.html":{}}}],["diskhealthindicator",{"_index":390,"title":{},"body":{"controllers/HealthController.html":{}}}],["doc",{"_index":555,"title":{},"body":{"modules/NestPinoModule.html":{},"miscellaneous/variables.html":{}}}],["docs",{"_index":403,"title":{},"body":{"controllers/HealthController.html":{}}}],["documentation",{"_index":830,"title":{},"body":{"coverage.html":{}}}],["driver",{"_index":150,"title":{},"body":{"modules/AppModule.html":{}}}],["dto/create",{"_index":194,"title":{},"body":{"controllers/CatsController.html":{}}}],["dto/new",{"_index":701,"title":{},"body":{"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{}}}],["dto/recipes.args",{"_index":703,"title":{},"body":{"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{}}}],["e2e",{"_index":940,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":917,"title":{},"body":{"index.html":{}}}],["email",{"_index":101,"title":{},"body":{"controllers/AppController.html":{}}}],["enabledebugmessages",{"_index":1040,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enumerations",{"_index":893,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":995,"title":{},"body":{"miscellaneous/variables.html":{}}}],["envfilepath",{"_index":484,"title":{},"body":{"modules/NestConfigModule.html":{}}}],["environment",{"_index":1055,"title":{},"body":{"miscellaneous/variables.html":{}}}],["error",{"_index":341,"title":{},"body":{"classes/GlobalExceptionFilter.html":{},"classes/HttpError.html":{},"modules/NestPinoModule.html":{},"injectables/TerminusLogger.html":{}}}],["error(message",{"_index":765,"title":{},"body":{"injectables/TerminusLogger.html":{}}}],["errorcodetostatusmap",{"_index":254,"title":{},"body":{"classes/CustomHttpException.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["errorcodetostatusmap[code",{"_index":257,"title":{},"body":{"classes/CustomHttpException.html":{}}}],["errorlogstyle",{"_index":439,"title":{},"body":{"modules/HealthModule.html":{}}}],["errors",{"_index":255,"title":{},"body":{"classes/CustomHttpException.html":{},"modules/NestPinoModule.html":{},"injectables/ValidationPipe.html":{}}}],["errors.length",{"_index":825,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["example",{"_index":926,"title":{},"body":{"index.html":{}}}],["exceed",{"_index":407,"title":{},"body":{"controllers/HealthController.html":{}}}],["exception",{"_index":325,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"classes/GlobalExceptionFilter.html":{}}}],["exception.filter.ts",{"_index":330,"title":{},"body":{"classes/GlobalExceptionFilter.html":{},"coverage.html":{}}}],["exception.filter.ts:19",{"_index":338,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["exception.filter.ts:23",{"_index":344,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["exception.filter.ts:63",{"_index":348,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["exception.getstatus",{"_index":369,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["exception.message",{"_index":367,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["exception.stack",{"_index":379,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["exceptionfilter",{"_index":331,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["exceptioninterceptor",{"_index":307,"title":{"injectables/ExceptionInterceptor.html":{}},"body":{"injectables/ExceptionInterceptor.html":{},"coverage.html":{}}}],["exclude",{"_index":552,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["executioncontext",{"_index":311,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TransformInterceptor.html":{}}}],["expandvariables",{"_index":489,"title":{},"body":{"modules/NestConfigModule.html":{}}}],["export",{"_index":77,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"interfaces/Cat.html":{},"controllers/CatsController.html":{},"modules/CatsModule.html":{},"injectables/CatsService.html":{},"interfaces/Config.html":{},"modules/CoreModule.html":{},"classes/CreateCatDto.html":{},"classes/CustomHttpException.html":{},"classes/DateScalar.html":{},"injectables/ExceptionInterceptor.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/HttpError.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"modules/NestConfigModule.html":{},"modules/NestPinoModule.html":{},"classes/NewRecipeInput.html":{},"injectables/ParseIntPipe.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Recipe.html":{},"classes/RecipesArgs.html":{},"modules/RecipesModule.html":{},"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TerminusLogger.html":{},"injectables/TransformInterceptor.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{}}}],["exports",{"_index":118,"title":{},"body":{"modules/AppModule.html":{},"modules/CatsModule.html":{},"modules/HealthModule.html":{},"modules/NestConfigModule.html":{},"modules/NestPinoModule.html":{},"modules/PostModule.html":{},"modules/PrismaModule.html":{},"modules/RecipesModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["express",{"_index":872,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":246,"title":{},"body":{"classes/CustomHttpException.html":{},"classes/HttpError.html":{},"injectables/PrismaService.html":{},"injectables/TerminusLogger.html":{}}}],["failed",{"_index":591,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["false",{"_index":438,"title":{},"body":{"modules/HealthModule.html":{},"modules/NestPinoModule.html":{},"miscellaneous/variables.html":{}}}],["fastify",{"_index":356,"title":{},"body":{"classes/GlobalExceptionFilter.html":{},"dependencies.html":{}}}],["fastify/helmet",{"_index":861,"title":{},"body":{"dependencies.html":{}}}],["fastify/static",{"_index":863,"title":{},"body":{"dependencies.html":{}}}],["fastifyreply",{"_index":355,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["fastifyrequest",{"_index":347,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["field",{"_index":568,"title":{},"body":{"classes/NewRecipeInput.html":{},"classes/Recipe.html":{},"classes/RecipesArgs.html":{}}}],["field()@maxlength(30",{"_index":566,"title":{},"body":{"classes/NewRecipeInput.html":{}}}],["field(type",{"_index":564,"title":{},"body":{"classes/NewRecipeInput.html":{},"classes/Recipe.html":{},"classes/RecipesArgs.html":{}}}],["field({nullable",{"_index":560,"title":{},"body":{"classes/NewRecipeInput.html":{},"classes/Recipe.html":{}}}],["fields",{"_index":502,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"interfaces/Cat.html":{},"controllers/CatsController.html":{},"modules/CatsModule.html":{},"injectables/CatsService.html":{},"interfaces/Config.html":{},"modules/CoreModule.html":{},"classes/CreateCatDto.html":{},"classes/CustomHttpException.html":{},"classes/DateScalar.html":{},"injectables/ExceptionInterceptor.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/HttpError.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"modules/NestConfigModule.html":{},"modules/NestPinoModule.html":{},"classes/NewRecipeInput.html":{},"injectables/ParseIntPipe.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Recipe.html":{},"classes/RecipesArgs.html":{},"modules/RecipesModule.html":{},"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TerminusLogger.html":{},"injectables/TransformInterceptor.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["findall",{"_index":174,"title":{},"body":{"controllers/CatsController.html":{},"injectables/CatsService.html":{},"injectables/RecipesService.html":{}}}],["findall(recipesargs",{"_index":733,"title":{},"body":{"injectables/RecipesService.html":{}}}],["findone",{"_index":175,"title":{},"body":{"controllers/CatsController.html":{}}}],["findone(id",{"_index":181,"title":{},"body":{"controllers/CatsController.html":{}}}],["findonebyid",{"_index":722,"title":{},"body":{"injectables/RecipesService.html":{}}}],["findonebyid(id",{"_index":735,"title":{},"body":{"injectables/RecipesService.html":{}}}],["followed",{"_index":1022,"title":{},"body":{"miscellaneous/variables.html":{}}}],["forbiddenexception",{"_index":350,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["forbidunknownvalues",{"_index":1038,"title":{},"body":{"miscellaneous/variables.html":{}}}],["framework",{"_index":915,"title":{},"body":{"index.html":{}}}],["full",{"_index":409,"title":{},"body":{"controllers/HealthController.html":{}}}],["function",{"_index":461,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["functions",{"_index":906,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["gateway_timeout",{"_index":904,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["gb",{"_index":416,"title":{},"body":{"controllers/HealthController.html":{}}}],["gdpr",{"_index":535,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["get('/res",{"_index":49,"title":{},"body":{"controllers/AppController.html":{}}}],["get(':id",{"_index":182,"title":{},"body":{"controllers/CatsController.html":{}}}],["get('feed",{"_index":46,"title":{},"body":{"controllers/AppController.html":{}}}],["get('filtered",{"_index":38,"title":{},"body":{"controllers/AppController.html":{}}}],["get('post/:id",{"_index":44,"title":{},"body":{"controllers/AppController.html":{}}}],["get()@healthcheck",{"_index":384,"title":{},"body":{"controllers/HealthController.html":{}}}],["getdefaultcodebystatus",{"_index":259,"title":{},"body":{"classes/CustomHttpException.html":{},"classes/GlobalExceptionFilter.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getdefaultcodebystatus(status",{"_index":372,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["getenvfile",{"_index":1051,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getfilteredposts",{"_index":12,"title":{},"body":{"controllers/AppController.html":{}}}],["getfilteredposts(searchstring",{"_index":37,"title":{},"body":{"controllers/AppController.html":{}}}],["gethello",{"_index":13,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getpostbyid",{"_index":14,"title":{},"body":{"controllers/AppController.html":{}}}],["getpostbyid(@param('id",{"_index":86,"title":{},"body":{"controllers/AppController.html":{}}}],["getpostbyid(id",{"_index":43,"title":{},"body":{"controllers/AppController.html":{}}}],["getpublishedposts",{"_index":15,"title":{},"body":{"controllers/AppController.html":{}}}],["getting",{"_index":911,"title":{"index.html":{}},"body":{}}],["globalexceptionfilter",{"_index":328,"title":{"classes/GlobalExceptionFilter.html":{}},"body":{"classes/GlobalExceptionFilter.html":{},"coverage.html":{}}}],["gracefulshutdowntimeoutms",{"_index":444,"title":{},"body":{"modules/HealthModule.html":{}}}],["graph",{"_index":970,"title":{},"body":{"modules.html":{}}}],["graphiql",{"_index":154,"title":{},"body":{"modules/AppModule.html":{}}}],["graphql",{"_index":297,"title":{},"body":{"classes/DateScalar.html":{},"dependencies.html":{}}}],["graphqlmodule",{"_index":140,"title":{},"body":{"modules/AppModule.html":{}}}],["graphqlmodule.forroot",{"_index":149,"title":{},"body":{"modules/AppModule.html":{}}}],["grow",{"_index":947,"title":{},"body":{"index.html":{}}}],["guard",{"_index":743,"title":{"guards/RolesGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":744,"title":{},"body":{"guards/RolesGuard.html":{}}}],["handle",{"_index":322,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"injectables/LoggingInterceptor.html":{}}}],["hasrole",{"_index":756,"title":{},"body":{"guards/RolesGuard.html":{}}}],["health",{"_index":382,"title":{},"body":{"controllers/HealthController.html":{}}}],["health.controller",{"_index":432,"title":{},"body":{"modules/HealthModule.html":{}}}],["health/health.module",{"_index":146,"title":{},"body":{"modules/AppModule.html":{}}}],["healthcheck",{"_index":388,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckservice",{"_index":386,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcontroller",{"_index":380,"title":{"controllers/HealthController.html":{}},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"coverage.html":{}}}],["healthmodule",{"_index":124,"title":{"modules/HealthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HealthModule.html":{},"modules.html":{},"overview.html":{}}}],["hello",{"_index":159,"title":{},"body":{"injectables/AppService.html":{}}}],["helperservice",{"_index":480,"title":{},"body":{"modules/NestConfigModule.html":{},"modules/NestPinoModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["helperservice.getenvfile",{"_index":485,"title":{},"body":{"modules/NestConfigModule.html":{}}}],["helperservice.isdev",{"_index":1041,"title":{},"body":{"miscellaneous/variables.html":{}}}],["helperservice.isprod",{"_index":494,"title":{},"body":{"modules/NestConfigModule.html":{},"modules/NestPinoModule.html":{}}}],["here",{"_index":729,"title":{},"body":{"injectables/RecipesService.html":{},"injectables/TerminusLogger.html":{},"index.html":{}}}],["host",{"_index":342,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["host.switchtohttp",{"_index":358,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["http",{"_index":396,"title":{},"body":{"controllers/HealthController.html":{},"classes/HttpError.html":{},"modules/NestPinoModule.html":{},"dependencies.html":{}}}],["httperror",{"_index":446,"title":{"classes/HttpError.html":{}},"body":{"classes/HttpError.html":{},"coverage.html":{}}}],["httperrorcode",{"_index":250,"title":{},"body":{"classes/CustomHttpException.html":{},"classes/GlobalExceptionFilter.html":{},"classes/HttpError.html":{},"miscellaneous/enumerations.html":{}}}],["httperrorcode.database_connection_unavailable",{"_index":274,"title":{},"body":{"classes/CustomHttpException.html":{},"miscellaneous/variables.html":{}}}],["httperrorcode.gateway_timeout",{"_index":1049,"title":{},"body":{"miscellaneous/variables.html":{}}}],["httperrorcode.internal_server_error",{"_index":272,"title":{},"body":{"classes/CustomHttpException.html":{},"classes/GlobalExceptionFilter.html":{},"classes/HttpError.html":{},"miscellaneous/variables.html":{}}}],["httperrorcode.not_found",{"_index":270,"title":{},"body":{"classes/CustomHttpException.html":{},"miscellaneous/variables.html":{}}}],["httperrorcode.restricted_resource",{"_index":268,"title":{},"body":{"classes/CustomHttpException.html":{},"miscellaneous/variables.html":{}}}],["httperrorcode.unauthorized",{"_index":266,"title":{},"body":{"classes/CustomHttpException.html":{},"miscellaneous/variables.html":{}}}],["httperrorcode.unauthorized_share",{"_index":1045,"title":{},"body":{"miscellaneous/variables.html":{}}}],["httperrorcode.unknown_error_code",{"_index":275,"title":{},"body":{"classes/CustomHttpException.html":{},"miscellaneous/variables.html":{}}}],["httperrorcode.validation_error",{"_index":264,"title":{},"body":{"classes/CustomHttpException.html":{},"miscellaneous/variables.html":{}}}],["httpexception",{"_index":247,"title":{},"body":{"classes/CustomHttpException.html":{},"injectables/ExceptionInterceptor.html":{},"classes/GlobalExceptionFilter.html":{}}}],["httphealthindicator",{"_index":387,"title":{},"body":{"controllers/HealthController.html":{}}}],["httpmodule",{"_index":430,"title":{},"body":{"modules/HealthModule.html":{}}}],["https://docs.nestjs.com",{"_index":404,"title":{},"body":{"controllers/HealthController.html":{}}}],["https://docs.nestjs.com/recipes/terminus#graceful",{"_index":441,"title":{},"body":{"modules/HealthModule.html":{}}}],["https://nestjs.com",{"_index":963,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":253,"title":{},"body":{"classes/CustomHttpException.html":{},"injectables/ExceptionInterceptor.html":{},"classes/GlobalExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["httpstatus.bad_gateway",{"_index":327,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["httpstatus.bad_request",{"_index":263,"title":{},"body":{"classes/CustomHttpException.html":{},"miscellaneous/variables.html":{}}}],["httpstatus.forbidden",{"_index":267,"title":{},"body":{"classes/CustomHttpException.html":{},"miscellaneous/variables.html":{}}}],["httpstatus.internal_server_error",{"_index":271,"title":{},"body":{"classes/CustomHttpException.html":{},"classes/GlobalExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["httpstatus.not_found",{"_index":269,"title":{},"body":{"classes/CustomHttpException.html":{},"miscellaneous/variables.html":{}}}],["httpstatus.service_unavailable",{"_index":273,"title":{},"body":{"classes/CustomHttpException.html":{},"miscellaneous/variables.html":{}}}],["httpstatus.unauthorized",{"_index":265,"title":{},"body":{"classes/CustomHttpException.html":{},"miscellaneous/variables.html":{}}}],["id",{"_index":36,"title":{},"body":{"controllers/AppController.html":{},"controllers/CatsController.html":{},"classes/Recipe.html":{},"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{}}}],["identifier",{"_index":831,"title":{},"body":{"coverage.html":{}}}],["ignore",{"_index":511,"title":{},"body":{"modules/NestPinoModule.html":{},"miscellaneous/variables.html":{}}}],["ihttperror",{"_index":448,"title":{},"body":{"classes/HttpError.html":{},"miscellaneous/typealiases.html":{}}}],["implements",{"_index":278,"title":{},"body":{"classes/DateScalar.html":{},"injectables/ExceptionInterceptor.html":{},"classes/GlobalExceptionFilter.html":{},"classes/HttpError.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ParseIntPipe.html":{},"injectables/PrismaService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TransformInterceptor.html":{},"injectables/ValidationPipe.html":{}}}],["import",{"_index":60,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/CatsController.html":{},"modules/CatsModule.html":{},"injectables/CatsService.html":{},"interfaces/Config.html":{},"modules/CoreModule.html":{},"classes/CreateCatDto.html":{},"classes/CustomHttpException.html":{},"classes/DateScalar.html":{},"injectables/ExceptionInterceptor.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/HttpError.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"modules/NestConfigModule.html":{},"modules/NestPinoModule.html":{},"classes/NewRecipeInput.html":{},"injectables/ParseIntPipe.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Recipe.html":{},"classes/RecipesArgs.html":{},"modules/RecipesModule.html":{},"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TerminusLogger.html":{},"injectables/TransformInterceptor.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{}}}],["imports",{"_index":134,"title":{},"body":{"modules/AppModule.html":{},"modules/HealthModule.html":{},"modules/NestConfigModule.html":{},"modules/NestPinoModule.html":{},"modules/PostModule.html":{},"modules/UserModule.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"interfaces/Cat.html":{},"controllers/CatsController.html":{},"injectables/CatsService.html":{},"interfaces/Config.html":{},"classes/CreateCatDto.html":{},"classes/CustomHttpException.html":{},"classes/DateScalar.html":{},"injectables/ExceptionInterceptor.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/HealthController.html":{},"classes/HttpError.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"classes/NewRecipeInput.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"classes/Recipe.html":{},"classes/RecipesArgs.html":{},"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TerminusLogger.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["index(@res",{"_index":84,"title":{},"body":{"controllers/AppController.html":{}}}],["index(res",{"_index":48,"title":{},"body":{"controllers/AppController.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"interfaces/Cat.html":{},"controllers/CatsController.html":{},"modules/CatsModule.html":{},"injectables/CatsService.html":{},"interfaces/Config.html":{},"modules/CoreModule.html":{},"classes/CreateCatDto.html":{},"classes/CustomHttpException.html":{},"classes/DateScalar.html":{},"injectables/ExceptionInterceptor.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/HttpError.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"modules/NestConfigModule.html":{},"modules/NestPinoModule.html":{},"classes/NewRecipeInput.html":{},"injectables/ParseIntPipe.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Recipe.html":{},"classes/RecipesArgs.html":{},"modules/RecipesModule.html":{},"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TerminusLogger.html":{},"injectables/TransformInterceptor.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{}}}],["ingredients",{"_index":559,"title":{},"body":{"classes/NewRecipeInput.html":{},"classes/Recipe.html":{}}}],["inject",{"_index":515,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["injectable",{"_index":155,"title":{"injectables/AppService.html":{},"injectables/CatsService.html":{},"injectables/ExceptionInterceptor.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"injectables/RecipesService.html":{},"injectables/TerminusLogger.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{}},"body":{"injectables/AppService.html":{},"injectables/CatsService.html":{},"injectables/ExceptionInterceptor.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"injectables/RecipesService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TerminusLogger.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["injectables",{"_index":156,"title":{},"body":{"injectables/AppService.html":{},"injectables/CatsService.html":{},"injectables/ExceptionInterceptor.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"injectables/RecipesService.html":{},"injectables/TerminusLogger.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"overview.html":{}}}],["inputtype",{"_index":569,"title":{},"body":{"classes/NewRecipeInput.html":{}}}],["installation",{"_index":925,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":928,"title":{},"body":{"index.html":{}}}],["instance",{"_index":910,"title":{},"body":{"miscellaneous/functions.html":{}}}],["instanceof",{"_index":362,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["int",{"_index":659,"title":{},"body":{"classes/RecipesArgs.html":{}}}],["int)@min(0",{"_index":653,"title":{},"body":{"classes/RecipesArgs.html":{}}}],["int)@min(1)@max(50",{"_index":656,"title":{},"body":{"classes/RecipesArgs.html":{}}}],["int.pipe",{"_index":191,"title":{},"body":{"controllers/CatsController.html":{}}}],["int.pipe.ts",{"_index":577,"title":{},"body":{"injectables/ParseIntPipe.html":{},"coverage.html":{}}}],["int.pipe.ts:6",{"_index":582,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["intercept",{"_index":309,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["intercept(context",{"_index":310,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["interceptor",{"_index":326,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["interceptors/logging.interceptor",{"_index":230,"title":{},"body":{"modules/CoreModule.html":{}}}],["interceptors/transform.interceptor",{"_index":232,"title":{},"body":{"modules/CoreModule.html":{}}}],["interface",{"_index":161,"title":{"interfaces/Cat.html":{},"interfaces/Config.html":{},"interfaces/Response.html":{}},"body":{"interfaces/Cat.html":{},"interfaces/Config.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["interfaces",{"_index":163,"title":{},"body":{"interfaces/Cat.html":{},"interfaces/Config.html":{},"interfaces/Response.html":{},"overview.html":{}}}],["interfaces/cat.interface",{"_index":196,"title":{},"body":{"controllers/CatsController.html":{},"injectables/CatsService.html":{}}}],["internal",{"_index":374,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["internal_server_error",{"_index":902,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["isdev",{"_index":1053,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isglobal",{"_index":488,"title":{},"body":{"modules/NestConfigModule.html":{}}}],["isint",{"_index":238,"title":{},"body":{"classes/CreateCatDto.html":{}}}],["isnan(val",{"_index":588,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["isoptional",{"_index":570,"title":{},"body":{"classes/NewRecipeInput.html":{}}}],["isprod",{"_index":1063,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isstring",{"_index":240,"title":{},"body":{"classes/CreateCatDto.html":{}}}],["item",{"_index":759,"title":{},"body":{"guards/RolesGuard.html":{}}}],["joi",{"_index":479,"title":{},"body":{"modules/NestConfigModule.html":{},"dependencies.html":{}}}],["joi.number().port().required",{"_index":1015,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.object",{"_index":491,"title":{},"body":{"modules/NestConfigModule.html":{}}}],["joi.string",{"_index":1011,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.string().optional",{"_index":1027,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.string().required",{"_index":1024,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.string().required().pattern(/^v\\d+/).required().messages",{"_index":1019,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.string().uri().required",{"_index":1017,"title":{},"body":{"miscellaneous/variables.html":{}}}],["join",{"_index":954,"title":{},"body":{"index.html":{}}}],["kamil",{"_index":960,"title":{},"body":{"index.html":{}}}],["kind",{"_index":296,"title":{},"body":{"classes/DateScalar.html":{}}}],["kind.int",{"_index":304,"title":{},"body":{"classes/DateScalar.html":{}}}],["left",{"_index":730,"title":{},"body":{"injectables/RecipesService.html":{}}}],["legend",{"_index":114,"title":{},"body":{"modules/AppModule.html":{},"modules/CatsModule.html":{},"modules/HealthModule.html":{},"modules/NestConfigModule.html":{},"modules/PostModule.html":{},"modules/PrismaModule.html":{},"modules/RecipesModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["length",{"_index":571,"title":{},"body":{"classes/NewRecipeInput.html":{}}}],["length(30",{"_index":575,"title":{},"body":{"classes/NewRecipeInput.html":{}}}],["level",{"_index":541,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["license",{"_index":966,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":944,"title":{},"body":{"index.html":{}}}],["literal",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"classes/HttpError.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"miscellaneous/typealiases.html":{}}}],["load",{"_index":486,"title":{},"body":{"modules/NestConfigModule.html":{}}}],["log",{"_index":547,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["logerror",{"_index":335,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["logerror(exception",{"_index":345,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["logged",{"_index":776,"title":{},"body":{"injectables/TerminusLogger.html":{}}}],["logger",{"_index":332,"title":{},"body":{"classes/GlobalExceptionFilter.html":{},"modules/HealthModule.html":{},"miscellaneous/functions.html":{}}}],["logger(globalexceptionfilter.name",{"_index":339,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["logger.service",{"_index":436,"title":{},"body":{"modules/HealthModule.html":{}}}],["logger.service.ts",{"_index":763,"title":{},"body":{"injectables/TerminusLogger.html":{},"coverage.html":{}}}],["logger.service.ts:5",{"_index":766,"title":{},"body":{"injectables/TerminusLogger.html":{}}}],["logger.service.ts:6",{"_index":769,"title":{},"body":{"injectables/TerminusLogger.html":{}}}],["logger.service.ts:7",{"_index":771,"title":{},"body":{"injectables/TerminusLogger.html":{}}}],["loggermiddleware",{"_index":455,"title":{"injectables/LoggerMiddleware.html":{}},"body":{"injectables/LoggerMiddleware.html":{},"coverage.html":{}}}],["loggermodule",{"_index":499,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["loggermodule.forrootasync",{"_index":514,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["logginginterceptor",{"_index":229,"title":{"injectables/LoggingInterceptor.html":{}},"body":{"modules/CoreModule.html":{},"injectables/LoggingInterceptor.html":{},"coverage.html":{}}}],["logic",{"_index":206,"title":{},"body":{"controllers/CatsController.html":{},"injectables/RecipesService.html":{}}}],["logs",{"_index":504,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["logs/error.log",{"_index":548,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["logs/info.log",{"_index":544,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["map",{"_index":741,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["matching",{"_index":109,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"interfaces/Cat.html":{},"controllers/CatsController.html":{},"modules/CatsModule.html":{},"injectables/CatsService.html":{},"interfaces/Config.html":{},"modules/CoreModule.html":{},"classes/CreateCatDto.html":{},"classes/CustomHttpException.html":{},"classes/DateScalar.html":{},"injectables/ExceptionInterceptor.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/HttpError.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"modules/NestConfigModule.html":{},"modules/NestPinoModule.html":{},"classes/NewRecipeInput.html":{},"injectables/ParseIntPipe.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Recipe.html":{},"classes/RecipesArgs.html":{},"modules/RecipesModule.html":{},"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TerminusLogger.html":{},"injectables/TransformInterceptor.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["max",{"_index":660,"title":{},"body":{"classes/RecipesArgs.html":{}}}],["max(50",{"_index":664,"title":{},"body":{"classes/RecipesArgs.html":{}}}],["maxlength",{"_index":572,"title":{},"body":{"classes/NewRecipeInput.html":{}}}],["maxlength(30",{"_index":573,"title":{},"body":{"classes/NewRecipeInput.html":{}}}],["memory",{"_index":400,"title":{},"body":{"controllers/HealthController.html":{}}}],["memoryhealthindicator",{"_index":391,"title":{},"body":{"controllers/HealthController.html":{}}}],["mercurius",{"_index":700,"title":{},"body":{"classes/RecipesResolver.html":{},"dependencies.html":{}}}],["mercuriusdriver",{"_index":142,"title":{},"body":{"modules/AppModule.html":{}}}],["mercuriusdriverconfig",{"_index":143,"title":{},"body":{"modules/AppModule.html":{}}}],["mercuriusjs/gateway",{"_index":865,"title":{},"body":{"dependencies.html":{}}}],["message",{"_index":252,"title":{},"body":{"classes/CustomHttpException.html":{},"injectables/ExceptionInterceptor.html":{},"classes/GlobalExceptionFilter.html":{},"classes/HttpError.html":{},"injectables/TerminusLogger.html":{}}}],["messages",{"_index":775,"title":{},"body":{"injectables/TerminusLogger.html":{}}}],["metadata",{"_index":580,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{}}}],["metatype",{"_index":816,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["method",{"_index":553,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/CatsController.html":{},"injectables/CatsService.html":{},"classes/DateScalar.html":{},"injectables/ExceptionInterceptor.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/HealthController.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{},"guards/RolesGuard.html":{},"injectables/TerminusLogger.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{}}}],["min",{"_index":661,"title":{},"body":{"classes/RecipesArgs.html":{}}}],["min(0",{"_index":662,"title":{},"body":{"classes/RecipesArgs.html":{}}}],["min(1",{"_index":663,"title":{},"body":{"classes/RecipesArgs.html":{}}}],["miscellaneous",{"_index":892,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":943,"title":{},"body":{"index.html":{}}}],["mkdir",{"_index":545,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["mock",{"_index":726,"title":{},"body":{"injectables/RecipesService.html":{}}}],["mode",{"_index":933,"title":{},"body":{"index.html":{}}}],["models/recipe.model",{"_index":704,"title":{},"body":{"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{}}}],["module",{"_index":110,"title":{"modules/AppModule.html":{},"modules/CatsModule.html":{},"modules/CoreModule.html":{},"modules/HealthModule.html":{},"modules/NestConfigModule.html":{},"modules/NestPinoModule.html":{},"modules/PostModule.html":{},"modules/PrismaModule.html":{},"modules/RecipesModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CatsModule.html":{},"modules/CoreModule.html":{},"modules/HealthModule.html":{},"modules/NestConfigModule.html":{},"modules/NestPinoModule.html":{},"modules/PostModule.html":{},"modules/PrismaModule.html":{},"modules/RecipesModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["modules",{"_index":112,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/CatsModule.html":{},"modules/CoreModule.html":{},"modules/HealthModule.html":{},"modules/NestConfigModule.html":{},"modules/NestPinoModule.html":{},"modules/PostModule.html":{},"modules/PrismaModule.html":{},"modules/RecipesModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":957,"title":{},"body":{"index.html":{}}}],["mutation",{"_index":697,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["mutation(returns",{"_index":682,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["myśliwiec",{"_index":961,"title":{},"body":{"index.html":{}}}],["name",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"interfaces/Cat.html":{},"controllers/CatsController.html":{},"injectables/CatsService.html":{},"classes/CreateCatDto.html":{},"classes/CustomHttpException.html":{},"classes/DateScalar.html":{},"injectables/ExceptionInterceptor.html":{},"classes/GlobalExceptionFilter.html":{},"classes/HttpError.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"modules/NestPinoModule.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostService.html":{},"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{},"guards/RolesGuard.html":{},"injectables/TerminusLogger.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["nest",{"_index":921,"title":{},"body":{"index.html":{}}}],["nestconfigmodule",{"_index":125,"title":{"modules/NestConfigModule.html":{}},"body":{"modules/AppModule.html":{},"modules/NestConfigModule.html":{},"modules.html":{},"overview.html":{}}}],["nestframework",{"_index":965,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":317,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["nestjs",{"_index":500,"title":{},"body":{"modules/NestPinoModule.html":{},"dependencies.html":{}}}],["nestjs/axios",{"_index":431,"title":{},"body":{"modules/HealthModule.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":66,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/CatsController.html":{},"modules/CatsModule.html":{},"injectables/CatsService.html":{},"modules/CoreModule.html":{},"classes/CustomHttpException.html":{},"injectables/ExceptionInterceptor.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"modules/NestConfigModule.html":{},"modules/NestPinoModule.html":{},"injectables/ParseIntPipe.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/RecipesModule.html":{},"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TerminusLogger.html":{},"injectables/TransformInterceptor.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":224,"title":{},"body":{"interfaces/Config.html":{},"classes/GlobalExceptionFilter.html":{},"modules/NestConfigModule.html":{},"modules/NestPinoModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":228,"title":{},"body":{"modules/CoreModule.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/graphql",{"_index":141,"title":{},"body":{"modules/AppModule.html":{},"classes/DateScalar.html":{},"classes/NewRecipeInput.html":{},"classes/Recipe.html":{},"classes/RecipesArgs.html":{},"classes/RecipesResolver.html":{},"dependencies.html":{}}}],["nestjs/mercurius",{"_index":144,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":871,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":873,"title":{},"body":{"dependencies.html":{}}}],["nestjs/terminus",{"_index":392,"title":{},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"dependencies.html":{}}}],["nestmiddleware",{"_index":462,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["nestpinomodule",{"_index":126,"title":{"modules/NestPinoModule.html":{}},"body":{"modules/AppModule.html":{},"modules/NestPinoModule.html":{},"modules.html":{},"overview.html":{}}}],["new",{"_index":205,"title":{},"body":{"controllers/CatsController.html":{},"classes/DateScalar.html":{},"injectables/ExceptionInterceptor.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/ParseIntPipe.html":{},"classes/RecipesResolver.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["newrecipedata",{"_index":684,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["newrecipeinput",{"_index":556,"title":{"classes/NewRecipeInput.html":{}},"body":{"classes/NewRecipeInput.html":{},"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{},"coverage.html":{}}}],["next",{"_index":312,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["next.handle().pipe(map(data",{"_index":742,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["node.js",{"_index":914,"title":{},"body":{"index.html":{}}}],["node:process",{"_index":477,"title":{},"body":{"modules/NestConfigModule.html":{}}}],["node_env",{"_index":1010,"title":{},"body":{"miscellaneous/variables.html":{}}}],["not_found",{"_index":901,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["notfoundexception",{"_index":351,"title":{},"body":{"classes/GlobalExceptionFilter.html":{},"classes/RecipesResolver.html":{}}}],["notfoundexception(id",{"_index":708,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["now",{"_index":468,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["now}ms",{"_index":472,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["null",{"_index":306,"title":{},"body":{"classes/DateScalar.html":{}}}],["nullable",{"_index":574,"title":{},"body":{"classes/NewRecipeInput.html":{},"classes/Recipe.html":{}}}],["number",{"_index":168,"title":{},"body":{"interfaces/Cat.html":{},"controllers/CatsController.html":{},"classes/CreateCatDto.html":{},"classes/DateScalar.html":{},"classes/HttpError.html":{},"injectables/PostService.html":{},"classes/RecipesArgs.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["number(id",{"_index":88,"title":{},"body":{"controllers/AppController.html":{}}}],["object",{"_index":822,"title":{},"body":{"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["objecttype",{"_index":649,"title":{},"body":{"classes/Recipe.html":{}}}],["observable",{"_index":316,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["onmoduleinit",{"_index":637,"title":{},"body":{"injectables/PrismaService.html":{}}}],["open",{"_index":945,"title":{},"body":{"index.html":{}}}],["optional",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"controllers/CatsController.html":{},"injectables/CatsService.html":{},"classes/CustomHttpException.html":{},"classes/DateScalar.html":{},"injectables/ExceptionInterceptor.html":{},"classes/GlobalExceptionFilter.html":{},"classes/HttpError.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"classes/NewRecipeInput.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostService.html":{},"classes/Recipe.html":{},"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{},"guards/RolesGuard.html":{},"injectables/TerminusLogger.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{}}}],["optionalparams",{"_index":768,"title":{},"body":{"injectables/TerminusLogger.html":{}}}],["options",{"_index":542,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["orderby",{"_index":623,"title":{},"body":{"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["otherwise",{"_index":1058,"title":{},"body":{"miscellaneous/variables.html":{}}}],["out",{"_index":132,"title":{},"body":{"modules/AppModule.html":{},"modules/CatsModule.html":{},"modules/HealthModule.html":{},"modules/NestConfigModule.html":{},"modules/PostModule.html":{},"modules/PrismaModule.html":{},"modules/RecipesModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overview",{"_index":972,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["overwrite",{"_index":774,"title":{},"body":{"injectables/TerminusLogger.html":{}}}],["package",{"_index":860,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":61,"title":{},"body":{"controllers/AppController.html":{},"controllers/CatsController.html":{}}}],["param('id",{"_index":204,"title":{},"body":{"controllers/CatsController.html":{}}}],["param('searchstring",{"_index":92,"title":{},"body":{"controllers/AppController.html":{}}}],["parameters",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"controllers/CatsController.html":{},"injectables/CatsService.html":{},"classes/CustomHttpException.html":{},"classes/DateScalar.html":{},"injectables/ExceptionInterceptor.html":{},"classes/GlobalExceptionFilter.html":{},"classes/HttpError.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostService.html":{},"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{},"guards/RolesGuard.html":{},"injectables/TerminusLogger.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{}}}],["params",{"_index":615,"title":{},"body":{"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["parseint(value",{"_index":586,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["parseintpipe",{"_index":189,"title":{"injectables/ParseIntPipe.html":{}},"body":{"controllers/CatsController.html":{},"injectables/ParseIntPipe.html":{},"coverage.html":{}}}],["parseliteral",{"_index":281,"title":{},"body":{"classes/DateScalar.html":{}}}],["parseliteral(ast",{"_index":288,"title":{},"body":{"classes/DateScalar.html":{}}}],["parsevalue",{"_index":282,"title":{},"body":{"classes/DateScalar.html":{}}}],["parsevalue(value",{"_index":292,"title":{},"body":{"classes/DateScalar.html":{}}}],["path",{"_index":414,"title":{},"body":{"controllers/HealthController.html":{},"modules/NestPinoModule.html":{}}}],["paths",{"_index":533,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["payload",{"_index":716,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["pid,hostname",{"_index":512,"title":{},"body":{"modules/NestPinoModule.html":{},"miscellaneous/variables.html":{}}}],["pino",{"_index":501,"title":{},"body":{"modules/NestPinoModule.html":{},"dependencies.html":{}}}],["pino/file",{"_index":540,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["pinohttp",{"_index":518,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["pipe",{"_index":323,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["pipe(tap",{"_index":470,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["pipetransform",{"_index":584,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["plaintoclass",{"_index":818,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["plaintoclass(metatype",{"_index":823,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["please",{"_index":955,"title":{},"body":{"index.html":{}}}],["port",{"_index":992,"title":{},"body":{"miscellaneous/variables.html":{}}}],["post",{"_index":62,"title":{},"body":{"controllers/AppController.html":{},"controllers/CatsController.html":{},"injectables/PostService.html":{}}}],["post('post",{"_index":23,"title":{},"body":{"controllers/AppController.html":{}}}],["post('user",{"_index":57,"title":{},"body":{"controllers/AppController.html":{}}}],["post()@roles('admin",{"_index":178,"title":{},"body":{"controllers/CatsController.html":{}}}],["post(postwhereuniqueinput",{"_index":610,"title":{},"body":{"injectables/PostService.html":{}}}],["post.service",{"_index":597,"title":{},"body":{"modules/PostModule.html":{}}}],["post/post.module",{"_index":138,"title":{},"body":{"modules/AppModule.html":{}}}],["post/post.service",{"_index":72,"title":{},"body":{"controllers/AppController.html":{}}}],["postdata",{"_index":29,"title":{},"body":{"controllers/AppController.html":{}}}],["postmodel",{"_index":75,"title":{},"body":{"controllers/AppController.html":{}}}],["postmodule",{"_index":127,"title":{"modules/PostModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostModule.html":{},"modules.html":{},"overview.html":{}}}],["posts",{"_index":600,"title":{},"body":{"injectables/PostService.html":{}}}],["posts(params",{"_index":613,"title":{},"body":{"injectables/PostService.html":{}}}],["posts/:searchstring",{"_index":39,"title":{},"body":{"controllers/AppController.html":{}}}],["postservice",{"_index":71,"title":{"injectables/PostService.html":{}},"body":{"controllers/AppController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"coverage.html":{},"overview.html":{}}}],["postwhereuniqueinput",{"_index":612,"title":{},"body":{"injectables/PostService.html":{}}}],["prefix",{"_index":171,"title":{},"body":{"controllers/CatsController.html":{},"controllers/HealthController.html":{},"miscellaneous/variables.html":{}}}],["pretty",{"_index":440,"title":{},"body":{"modules/HealthModule.html":{},"modules/NestPinoModule.html":{},"dependencies.html":{}}}],["prisma",{"_index":398,"title":{},"body":{"controllers/HealthController.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["prisma.postcreateinput",{"_index":605,"title":{},"body":{"injectables/PostService.html":{}}}],["prisma.postorderbywithrelationinput",{"_index":624,"title":{},"body":{"injectables/PostService.html":{}}}],["prisma.postupdateinput",{"_index":627,"title":{},"body":{"injectables/PostService.html":{}}}],["prisma.postwhereinput",{"_index":622,"title":{},"body":{"injectables/PostService.html":{}}}],["prisma.postwhereuniqueinput",{"_index":608,"title":{},"body":{"injectables/PostService.html":{}}}],["prisma.service",{"_index":634,"title":{},"body":{"modules/PrismaModule.html":{}}}],["prisma.usercreateinput",{"_index":791,"title":{},"body":{"injectables/UserService.html":{}}}],["prisma.userorderbywithrelationinput",{"_index":805,"title":{},"body":{"injectables/UserService.html":{}}}],["prisma.userupdateinput",{"_index":808,"title":{},"body":{"injectables/UserService.html":{}}}],["prisma.userwhereinput",{"_index":804,"title":{},"body":{"injectables/UserService.html":{}}}],["prisma.userwhereuniqueinput",{"_index":794,"title":{},"body":{"injectables/UserService.html":{}}}],["prisma/client",{"_index":76,"title":{},"body":{"controllers/AppController.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["prisma/prisma.module",{"_index":433,"title":{},"body":{"modules/HealthModule.html":{},"modules/PostModule.html":{},"modules/UserModule.html":{}}}],["prisma/prisma.service",{"_index":394,"title":{},"body":{"controllers/HealthController.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["prismaclient",{"_index":636,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismahealth",{"_index":397,"title":{},"body":{"controllers/HealthController.html":{}}}],["prismahealthindicator",{"_index":389,"title":{},"body":{"controllers/HealthController.html":{}}}],["prismamodule",{"_index":427,"title":{"modules/PrismaModule.html":{}},"body":{"modules/HealthModule.html":{},"modules/PostModule.html":{},"modules/PrismaModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["prismaservice",{"_index":393,"title":{"injectables/PrismaService.html":{}},"body":{"controllers/HealthController.html":{},"injectables/PostService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["private",{"_index":80,"title":{},"body":{"controllers/AppController.html":{},"injectables/CatsService.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/HealthController.html":{},"injectables/ValidationPipe.html":{}}}],["process",{"_index":476,"title":{},"body":{"modules/NestConfigModule.html":{}}}],["process.cwd()}/env/.env.${process.env.node_env",{"_index":1052,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.allowed_origins",{"_index":1002,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.allowed_origins.split",{"_index":1003,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.api_url",{"_index":997,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.app_name",{"_index":998,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.app_port",{"_index":993,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.app_prefix",{"_index":994,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.client_url",{"_index":1000,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.node_env",{"_index":996,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.node_env.startswith('dev",{"_index":1062,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.node_env.startswith('prod",{"_index":1064,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.sentry_dsn",{"_index":1005,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.swagger_password",{"_index":1009,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.swagger_user",{"_index":1007,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prod",{"_index":1034,"title":{},"body":{"miscellaneous/variables.html":{}}}],["production",{"_index":935,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["progressive",{"_index":913,"title":{},"body":{"index.html":{}}}],["project",{"_index":946,"title":{},"body":{"index.html":{}}}],["promise",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"controllers/CatsController.html":{},"injectables/PostService.html":{},"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["properties",{"_index":165,"title":{"properties.html":{}},"body":{"interfaces/Cat.html":{},"injectables/CatsService.html":{},"interfaces/Config.html":{},"classes/CreateCatDto.html":{},"classes/CustomHttpException.html":{},"classes/DateScalar.html":{},"classes/GlobalExceptionFilter.html":{},"classes/HttpError.html":{},"classes/NewRecipeInput.html":{},"classes/Recipe.html":{},"classes/RecipesArgs.html":{},"interfaces/Response.html":{},"properties.html":{}}}],["protected",{"_index":334,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["provide",{"_index":233,"title":{},"body":{"modules/CoreModule.html":{}}}],["providers",{"_index":117,"title":{},"body":{"modules/AppModule.html":{},"modules/CatsModule.html":{},"modules/CoreModule.html":{},"modules/HealthModule.html":{},"modules/NestConfigModule.html":{},"modules/PostModule.html":{},"modules/PrismaModule.html":{},"modules/RecipesModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["published",{"_index":90,"title":{},"body":{"controllers/AppController.html":{}}}],["publishpost",{"_index":16,"title":{},"body":{"controllers/AppController.html":{}}}],["publishpost(@param('id",{"_index":103,"title":{},"body":{"controllers/AppController.html":{}}}],["publishpost(id",{"_index":53,"title":{},"body":{"controllers/AppController.html":{}}}],["pubsub",{"_index":681,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["pubsub.publish",{"_index":714,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["pubsub.subscribe('recipeadded",{"_index":720,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["purposes",{"_index":732,"title":{},"body":{"injectables/RecipesService.html":{}}}],["put",{"_index":64,"title":{},"body":{"controllers/AppController.html":{},"injectables/RecipesService.html":{}}}],["put('publish/:id",{"_index":54,"title":{},"body":{"controllers/AppController.html":{}}}],["query",{"_index":698,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["query(returns",{"_index":686,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["raw",{"_index":530,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["read",{"_index":956,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":81,"title":{},"body":{"controllers/AppController.html":{},"interfaces/Cat.html":{},"controllers/CatsController.html":{},"injectables/CatsService.html":{},"classes/CreateCatDto.html":{},"classes/GlobalExceptionFilter.html":{},"classes/RecipesResolver.html":{},"guards/RolesGuard.html":{}}}],["real",{"_index":727,"title":{},"body":{"injectables/RecipesService.html":{}}}],["recipe",{"_index":641,"title":{"classes/Recipe.html":{}},"body":{"classes/Recipe.html":{},"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{},"coverage.html":{}}}],["recipe(@args('id",{"_index":706,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["recipe(id",{"_index":685,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["recipe.input",{"_index":702,"title":{},"body":{"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{}}}],["recipe.input.ts",{"_index":558,"title":{},"body":{"classes/NewRecipeInput.html":{},"coverage.html":{}}}],["recipe.input.ts:13",{"_index":563,"title":{},"body":{"classes/NewRecipeInput.html":{}}}],["recipe.input.ts:16",{"_index":565,"title":{},"body":{"classes/NewRecipeInput.html":{}}}],["recipe.input.ts:8",{"_index":567,"title":{},"body":{"classes/NewRecipeInput.html":{}}}],["recipeadded",{"_index":675,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["recipeadded(@context('pubsub",{"_index":719,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["recipeadded(pubsub",{"_index":688,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["recipes",{"_index":676,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["recipes(@args",{"_index":709,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["recipes(recipesargs",{"_index":691,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["recipes.resolver",{"_index":671,"title":{},"body":{"modules/RecipesModule.html":{}}}],["recipes.service",{"_index":672,"title":{},"body":{"modules/RecipesModule.html":{},"classes/RecipesResolver.html":{}}}],["recipes/recipes.module",{"_index":145,"title":{},"body":{"modules/AppModule.html":{}}}],["recipesargs",{"_index":650,"title":{"classes/RecipesArgs.html":{}},"body":{"classes/RecipesArgs.html":{},"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{},"coverage.html":{}}}],["recipesmodule",{"_index":128,"title":{"modules/RecipesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/RecipesModule.html":{},"modules.html":{},"overview.html":{}}}],["recipesresolver",{"_index":670,"title":{"classes/RecipesResolver.html":{}},"body":{"modules/RecipesModule.html":{},"classes/RecipesResolver.html":{},"coverage.html":{}}}],["recipesservice",{"_index":667,"title":{"injectables/RecipesService.html":{}},"body":{"modules/RecipesModule.html":{},"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{},"coverage.html":{},"overview.html":{}}}],["record",{"_index":529,"title":{},"body":{"modules/NestPinoModule.html":{},"miscellaneous/variables.html":{}}}],["redact",{"_index":503,"title":{},"body":{"modules/NestPinoModule.html":{},"miscellaneous/variables.html":{}}}],["redactfields",{"_index":505,"title":{},"body":{"modules/NestPinoModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["reflect",{"_index":889,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":748,"title":{},"body":{"guards/RolesGuard.html":{}}}],["registeras('app",{"_index":991,"title":{},"body":{"miscellaneous/variables.html":{}}}],["remove",{"_index":723,"title":{},"body":{"injectables/RecipesService.html":{}}}],["remove(id",{"_index":737,"title":{},"body":{"injectables/RecipesService.html":{}}}],["removerecipe",{"_index":677,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["removerecipe(@args('id",{"_index":717,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["removerecipe(id",{"_index":693,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["repository",{"_index":924,"title":{},"body":{"index.html":{}}}],["req",{"_index":460,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["req(request",{"_index":528,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["req.body.confirmpassword",{"_index":508,"title":{},"body":{"modules/NestPinoModule.html":{},"miscellaneous/variables.html":{}}}],["req.body.password",{"_index":507,"title":{},"body":{"modules/NestPinoModule.html":{},"miscellaneous/variables.html":{}}}],["req.headers.authorization",{"_index":506,"title":{},"body":{"modules/NestPinoModule.html":{},"miscellaneous/variables.html":{}}}],["request",{"_index":346,"title":{},"body":{"classes/GlobalExceptionFilter.html":{},"modules/NestPinoModule.html":{},"guards/RolesGuard.html":{}}}],["request.body",{"_index":531,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["request.raw.body",{"_index":532,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["request.user",{"_index":755,"title":{},"body":{"guards/RolesGuard.html":{}}}],["request?.url",{"_index":378,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["requestmethod",{"_index":498,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["requestmethod.all",{"_index":554,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["required",{"_index":1013,"title":{},"body":{"miscellaneous/variables.html":{}}}],["res",{"_index":51,"title":{},"body":{"controllers/AppController.html":{},"injectables/LoggerMiddleware.html":{}}}],["res.status(302).redirect('/login",{"_index":85,"title":{},"body":{"controllers/AppController.html":{}}}],["reset",{"_index":131,"title":{},"body":{"modules/AppModule.html":{},"modules/CatsModule.html":{},"modules/HealthModule.html":{},"modules/NestConfigModule.html":{},"modules/PostModule.html":{},"modules/PrismaModule.html":{},"modules/RecipesModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["resolver",{"_index":699,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["resolver(of",{"_index":705,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["response",{"_index":359,"title":{"interfaces/Response.html":{}},"body":{"classes/GlobalExceptionFilter.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["response.status(httpstatus.internal_server_error).send",{"_index":373,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["response.status(status).send",{"_index":366,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["response.types",{"_index":452,"title":{},"body":{"classes/HttpError.html":{}}}],["response.types.ts",{"_index":895,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["rest",{"_index":770,"title":{},"body":{"injectables/TerminusLogger.html":{}}}],["restricted_resource",{"_index":900,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["results",{"_index":108,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"interfaces/Cat.html":{},"controllers/CatsController.html":{},"modules/CatsModule.html":{},"injectables/CatsService.html":{},"interfaces/Config.html":{},"modules/CoreModule.html":{},"classes/CreateCatDto.html":{},"classes/CustomHttpException.html":{},"classes/DateScalar.html":{},"injectables/ExceptionInterceptor.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/HttpError.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"modules/NestConfigModule.html":{},"modules/NestPinoModule.html":{},"classes/NewRecipeInput.html":{},"injectables/ParseIntPipe.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Recipe.html":{},"classes/RecipesArgs.html":{},"modules/RecipesModule.html":{},"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TerminusLogger.html":{},"injectables/TransformInterceptor.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":82,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/CatsController.html":{},"injectables/CatsService.html":{},"classes/CustomHttpException.html":{},"classes/DateScalar.html":{},"injectables/ExceptionInterceptor.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/HealthController.html":{},"injectables/LoggingInterceptor.html":{},"modules/NestPinoModule.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostService.html":{},"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/CatsController.html":{},"injectables/CatsService.html":{},"classes/DateScalar.html":{},"injectables/ExceptionInterceptor.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/HealthController.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{},"guards/RolesGuard.html":{},"injectables/TerminusLogger.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["role",{"_index":760,"title":{},"body":{"guards/RolesGuard.html":{}}}],["roles",{"_index":185,"title":{},"body":{"controllers/CatsController.html":{},"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles('admin",{"_index":200,"title":{},"body":{"controllers/CatsController.html":{}}}],["roles.find(item",{"_index":758,"title":{},"body":{"guards/RolesGuard.html":{}}}],["rolesguard",{"_index":187,"title":{"guards/RolesGuard.html":{}},"body":{"controllers/CatsController.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["run",{"_index":930,"title":{},"body":{"index.html":{}}}],["running",{"_index":1061,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rxjs",{"_index":319,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":321,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["scalable",{"_index":918,"title":{},"body":{"index.html":{}}}],["scalar",{"_index":286,"title":{},"body":{"classes/DateScalar.html":{}}}],["scalar('date",{"_index":298,"title":{},"body":{"classes/DateScalar.html":{}}}],["schema.gql",{"_index":152,"title":{},"body":{"modules/AppModule.html":{}}}],["scope",{"_index":772,"title":{},"body":{"injectables/TerminusLogger.html":{}}}],["scope.transient",{"_index":773,"title":{},"body":{"injectables/TerminusLogger.html":{}}}],["searchstring",{"_index":41,"title":{},"body":{"controllers/AppController.html":{}}}],["send",{"_index":371,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["sent",{"_index":302,"title":{},"body":{"classes/DateScalar.html":{}}}],["sentrydsn",{"_index":1004,"title":{},"body":{"miscellaneous/variables.html":{}}}],["serialize",{"_index":283,"title":{},"body":{"classes/DateScalar.html":{}}}],["serialize(value",{"_index":294,"title":{},"body":{"classes/DateScalar.html":{}}}],["serializers",{"_index":527,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["server",{"_index":375,"title":{},"body":{"classes/GlobalExceptionFilter.html":{},"index.html":{}}}],["set",{"_index":1057,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata('roles",{"_index":1065,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shutdown",{"_index":442,"title":{},"body":{"modules/HealthModule.html":{}}}],["side",{"_index":919,"title":{},"body":{"index.html":{}}}],["signupuser",{"_index":17,"title":{},"body":{"controllers/AppController.html":{}}}],["signupuser(userdata",{"_index":56,"title":{},"body":{"controllers/AppController.html":{}}}],["singleline",{"_index":513,"title":{},"body":{"modules/NestPinoModule.html":{},"miscellaneous/variables.html":{}}}],["size",{"_index":410,"title":{},"body":{"controllers/HealthController.html":{}}}],["skip",{"_index":619,"title":{},"body":{"injectables/PostService.html":{},"classes/RecipesArgs.html":{},"injectables/UserService.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"interfaces/Cat.html":{},"controllers/CatsController.html":{},"modules/CatsModule.html":{},"injectables/CatsService.html":{},"interfaces/Config.html":{},"modules/CoreModule.html":{},"classes/CreateCatDto.html":{},"classes/CustomHttpException.html":{},"classes/DateScalar.html":{},"injectables/ExceptionInterceptor.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/HttpError.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"modules/NestConfigModule.html":{},"modules/NestPinoModule.html":{},"classes/NewRecipeInput.html":{},"injectables/ParseIntPipe.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Recipe.html":{},"classes/RecipesArgs.html":{},"modules/RecipesModule.html":{},"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TerminusLogger.html":{},"injectables/TransformInterceptor.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"index.html":{}}}],["sponsors",{"_index":949,"title":{},"body":{"index.html":{}}}],["src/.../app.config.ts",{"_index":983,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../app.logger.ts",{"_index":908,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../app.utils.ts",{"_index":985,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../constant.ts",{"_index":987,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../custom.exception.ts",{"_index":988,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../helpers.utils.ts",{"_index":989,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../http",{"_index":894,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../index.ts",{"_index":984,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":907,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../pino.module.ts",{"_index":986,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../roles.decorator.ts",{"_index":990,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:25",{"_index":42,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:30",{"_index":50,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:35",{"_index":45,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:40",{"_index":47,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:47",{"_index":40,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:65",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:79",{"_index":58,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:86",{"_index":55,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:94",{"_index":35,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":133,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":157,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":158,"title":{},"body":{"injectables/AppService.html":{}}}],["src/cats/cats.controller.ts",{"_index":170,"title":{},"body":{"controllers/CatsController.html":{},"coverage.html":{}}}],["src/cats/cats.controller.ts:16",{"_index":179,"title":{},"body":{"controllers/CatsController.html":{}}}],["src/cats/cats.controller.ts:21",{"_index":180,"title":{},"body":{"controllers/CatsController.html":{}}}],["src/cats/cats.controller.ts:26",{"_index":183,"title":{},"body":{"controllers/CatsController.html":{}}}],["src/cats/cats.module.ts",{"_index":209,"title":{},"body":{"modules/CatsModule.html":{}}}],["src/cats/cats.service.ts",{"_index":211,"title":{},"body":{"injectables/CatsService.html":{},"coverage.html":{}}}],["src/cats/cats.service.ts:12",{"_index":214,"title":{},"body":{"injectables/CatsService.html":{}}}],["src/cats/cats.service.ts:6",{"_index":217,"title":{},"body":{"injectables/CatsService.html":{}}}],["src/cats/cats.service.ts:8",{"_index":213,"title":{},"body":{"injectables/CatsService.html":{}}}],["src/cats/dto/create",{"_index":236,"title":{},"body":{"classes/CreateCatDto.html":{},"coverage.html":{}}}],["src/cats/interfaces/cat.interface.ts",{"_index":164,"title":{},"body":{"interfaces/Cat.html":{},"coverage.html":{}}}],["src/common/constant/index.ts",{"_index":836,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/decorators/roles.decorator.ts",{"_index":841,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/errors/constant.ts",{"_index":842,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/errors/http",{"_index":896,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/common/errors/http.error.ts",{"_index":447,"title":{},"body":{"classes/HttpError.html":{},"coverage.html":{}}}],["src/common/errors/http.error.ts:5",{"_index":451,"title":{},"body":{"classes/HttpError.html":{}}}],["src/common/errors/http.error.ts:6",{"_index":450,"title":{},"body":{"classes/HttpError.html":{}}}],["src/common/exception/custom.exception.ts",{"_index":245,"title":{},"body":{"classes/CustomHttpException.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/exception/custom.exception.ts:5",{"_index":251,"title":{},"body":{"classes/CustomHttpException.html":{}}}],["src/common/guards/roles.guard.ts",{"_index":745,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/common/guards/roles.guard.ts:5",{"_index":749,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/common/guards/roles.guard.ts:8",{"_index":751,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/common/helpers/app.utils.ts",{"_index":844,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/helpers/helpers.utils.ts",{"_index":846,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/interceptors/exception.interceptor.ts",{"_index":308,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"coverage.html":{}}}],["src/common/interceptors/exception.interceptor.ts:14",{"_index":314,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["src/common/middleware/logger.middleware.ts",{"_index":456,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"coverage.html":{}}}],["src/common/middleware/logger.middleware.ts:5",{"_index":459,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["src/common/pipes/parse",{"_index":576,"title":{},"body":{"injectables/ParseIntPipe.html":{},"coverage.html":{}}}],["src/common/pipes/validation.pipe.ts",{"_index":812,"title":{},"body":{"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["src/common/pipes/validation.pipe.ts:13",{"_index":817,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["src/common/pipes/validation.pipe.ts:26",{"_index":815,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["src/common/scalars/date.scalar.ts",{"_index":277,"title":{},"body":{"classes/DateScalar.html":{},"coverage.html":{}}}],["src/common/scalars/date.scalar.ts:12",{"_index":295,"title":{},"body":{"classes/DateScalar.html":{}}}],["src/common/scalars/date.scalar.ts:16",{"_index":290,"title":{},"body":{"classes/DateScalar.html":{}}}],["src/common/scalars/date.scalar.ts:6",{"_index":287,"title":{},"body":{"classes/DateScalar.html":{}}}],["src/common/scalars/date.scalar.ts:8",{"_index":293,"title":{},"body":{"classes/DateScalar.html":{}}}],["src/core/config/app.config.ts",{"_index":848,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/config/config.interface.ts",{"_index":221,"title":{},"body":{"interfaces/Config.html":{},"coverage.html":{}}}],["src/core/config/config.module.ts",{"_index":475,"title":{},"body":{"modules/NestConfigModule.html":{}}}],["src/core/core.module.ts",{"_index":226,"title":{},"body":{"modules/CoreModule.html":{}}}],["src/core/filters/global",{"_index":329,"title":{},"body":{"classes/GlobalExceptionFilter.html":{},"coverage.html":{}}}],["src/core/interceptors/logging.interceptor.ts",{"_index":464,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"coverage.html":{}}}],["src/core/interceptors/logging.interceptor.ts:12",{"_index":465,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["src/core/interceptors/transform.interceptor.ts",{"_index":739,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["src/core/interceptors/transform.interceptor.ts:18",{"_index":777,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["src/core/pino/app.logger.ts",{"_index":849,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/core/pino/pino.module.ts",{"_index":497,"title":{},"body":{"modules/NestPinoModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/health/health.controller.ts",{"_index":381,"title":{},"body":{"controllers/HealthController.html":{},"coverage.html":{}}}],["src/health/health.controller.ts:18",{"_index":385,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.module.ts",{"_index":428,"title":{},"body":{"modules/HealthModule.html":{}}}],["src/health/terminus",{"_index":762,"title":{},"body":{"injectables/TerminusLogger.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":853,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/post/post.module.ts",{"_index":596,"title":{},"body":{"modules/PostModule.html":{}}}],["src/post/post.service.ts",{"_index":598,"title":{},"body":{"injectables/PostService.html":{},"coverage.html":{}}}],["src/post/post.service.ts:17",{"_index":614,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:34",{"_index":606,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:40",{"_index":617,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:51",{"_index":609,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:6",{"_index":603,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:9",{"_index":611,"title":{},"body":{"injectables/PostService.html":{}}}],["src/prisma/prisma.module.ts",{"_index":633,"title":{},"body":{"modules/PrismaModule.html":{}}}],["src/prisma/prisma.service.ts",{"_index":635,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/prisma/prisma.service.ts:6",{"_index":638,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/recipes/dto/new",{"_index":557,"title":{},"body":{"classes/NewRecipeInput.html":{},"coverage.html":{}}}],["src/recipes/dto/recipes.args.ts",{"_index":651,"title":{},"body":{"classes/RecipesArgs.html":{},"coverage.html":{}}}],["src/recipes/dto/recipes.args.ts:13",{"_index":657,"title":{},"body":{"classes/RecipesArgs.html":{}}}],["src/recipes/dto/recipes.args.ts:8",{"_index":654,"title":{},"body":{"classes/RecipesArgs.html":{}}}],["src/recipes/models/recipe.model.ts",{"_index":642,"title":{},"body":{"classes/Recipe.html":{},"coverage.html":{}}}],["src/recipes/models/recipe.model.ts:12",{"_index":645,"title":{},"body":{"classes/Recipe.html":{}}}],["src/recipes/models/recipe.model.ts:15",{"_index":644,"title":{},"body":{"classes/Recipe.html":{}}}],["src/recipes/models/recipe.model.ts:18",{"_index":647,"title":{},"body":{"classes/Recipe.html":{}}}],["src/recipes/models/recipe.model.ts:6",{"_index":646,"title":{},"body":{"classes/Recipe.html":{}}}],["src/recipes/models/recipe.model.ts:9",{"_index":648,"title":{},"body":{"classes/Recipe.html":{}}}],["src/recipes/recipes.module.ts",{"_index":668,"title":{},"body":{"modules/RecipesModule.html":{}}}],["src/recipes/recipes.resolver.ts",{"_index":673,"title":{},"body":{"classes/RecipesResolver.html":{},"coverage.html":{}}}],["src/recipes/recipes.resolver.ts:17",{"_index":679,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["src/recipes/recipes.resolver.ts:21",{"_index":687,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["src/recipes/recipes.resolver.ts:30",{"_index":692,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["src/recipes/recipes.resolver.ts:35",{"_index":683,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["src/recipes/recipes.resolver.ts:45",{"_index":695,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["src/recipes/recipes.resolver.ts:50",{"_index":690,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["src/recipes/recipes.service.ts",{"_index":721,"title":{},"body":{"injectables/RecipesService.html":{},"coverage.html":{}}}],["src/recipes/recipes.service.ts:14",{"_index":725,"title":{},"body":{"injectables/RecipesService.html":{}}}],["src/recipes/recipes.service.ts:18",{"_index":736,"title":{},"body":{"injectables/RecipesService.html":{}}}],["src/recipes/recipes.service.ts:22",{"_index":734,"title":{},"body":{"injectables/RecipesService.html":{}}}],["src/recipes/recipes.service.ts:26",{"_index":738,"title":{},"body":{"injectables/RecipesService.html":{}}}],["src/user/user.module.ts",{"_index":782,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service.ts",{"_index":784,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:17",{"_index":802,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:34",{"_index":792,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:40",{"_index":797,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:51",{"_index":795,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:6",{"_index":789,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:9",{"_index":799,"title":{},"body":{"injectables/UserService.html":{}}}],["stack",{"_index":496,"title":{},"body":{"modules/NestConfigModule.html":{},"injectables/TerminusLogger.html":{}}}],["stage",{"_index":1031,"title":{},"body":{"miscellaneous/variables.html":{}}}],["staging",{"_index":1032,"title":{},"body":{"miscellaneous/variables.html":{}}}],["start",{"_index":931,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["start:dev",{"_index":934,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":936,"title":{},"body":{"index.html":{}}}],["started",{"_index":912,"title":{"index.html":{}},"body":{}}],["starter",{"_index":923,"title":{},"body":{"index.html":{}}}],["starts",{"_index":1056,"title":{},"body":{"miscellaneous/variables.html":{}}}],["statements",{"_index":832,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":260,"title":{},"body":{"classes/CustomHttpException.html":{},"classes/GlobalExceptionFilter.html":{},"classes/HttpError.html":{},"miscellaneous/variables.html":{}}}],["status(status",{"_index":370,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["stay",{"_index":958,"title":{},"body":{"index.html":{}}}],["stopatfirsterror",{"_index":1037,"title":{},"body":{"miscellaneous/variables.html":{}}}],["storage",{"_index":406,"title":{},"body":{"controllers/HealthController.html":{}}}],["string",{"_index":33,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"interfaces/Cat.html":{},"classes/CreateCatDto.html":{},"classes/CustomHttpException.html":{},"classes/DateScalar.html":{},"classes/HttpError.html":{},"classes/NewRecipeInput.html":{},"injectables/ParseIntPipe.html":{},"classes/Recipe.html":{},"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{},"injectables/TerminusLogger.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["string.pattern.base",{"_index":1020,"title":{},"body":{"miscellaneous/variables.html":{}}}],["subscription",{"_index":153,"title":{},"body":{"modules/AppModule.html":{},"classes/RecipesResolver.html":{}}}],["subscription(returns",{"_index":689,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["super(message",{"_index":256,"title":{},"body":{"classes/CustomHttpException.html":{},"classes/HttpError.html":{}}}],["support",{"_index":950,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":968,"title":{},"body":{"modules.html":{}}}],["swagger_api_endpoint",{"_index":840,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["swagger_password",{"_index":1029,"title":{},"body":{"miscellaneous/variables.html":{}}}],["swagger_user",{"_index":1028,"title":{},"body":{"miscellaneous/variables.html":{}}}],["swaggerpass",{"_index":1008,"title":{},"body":{"miscellaneous/variables.html":{}}}],["swaggeruser",{"_index":1006,"title":{},"body":{"miscellaneous/variables.html":{}}}],["switch",{"_index":261,"title":{},"body":{"classes/CustomHttpException.html":{},"miscellaneous/variables.html":{}}}],["sync",{"_index":546,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["t",{"_index":740,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["table",{"_index":859,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":858,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":620,"title":{},"body":{"injectables/PostService.html":{},"classes/RecipesArgs.html":{},"injectables/UserService.html":{}}}],["tap",{"_index":466,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["target",{"_index":539,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["targets",{"_index":538,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["terminus",{"_index":435,"title":{},"body":{"modules/HealthModule.html":{}}}],["terminuslogger",{"_index":434,"title":{"injectables/TerminusLogger.html":{}},"body":{"modules/HealthModule.html":{},"injectables/TerminusLogger.html":{},"coverage.html":{}}}],["terminusmodule",{"_index":429,"title":{},"body":{"modules/HealthModule.html":{}}}],["terminusmodule.forroot",{"_index":437,"title":{},"body":{"modules/HealthModule.html":{}}}],["test",{"_index":939,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["test:covsupport",{"_index":942,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":941,"title":{},"body":{"index.html":{}}}],["testing",{"_index":1033,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tests",{"_index":938,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":948,"title":{},"body":{"index.html":{}}}],["this.$connect",{"_index":640,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.appservice.gethello",{"_index":83,"title":{},"body":{"controllers/AppController.html":{}}}],["this.cats",{"_index":219,"title":{},"body":{"injectables/CatsService.html":{}}}],["this.cats.push(cat",{"_index":218,"title":{},"body":{"injectables/CatsService.html":{}}}],["this.catsservice.create(createcatdto",{"_index":202,"title":{},"body":{"controllers/CatsController.html":{}}}],["this.catsservice.findall",{"_index":203,"title":{},"body":{"controllers/CatsController.html":{}}}],["this.code",{"_index":258,"title":{},"body":{"classes/CustomHttpException.html":{},"classes/HttpError.html":{}}}],["this.disk.checkstorage('disk",{"_index":411,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.health.check",{"_index":401,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck('nestjs",{"_index":402,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.logerror(exception",{"_index":363,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["this.logger.error",{"_index":376,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["this.memory.checkheap('memory_heap",{"_index":419,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.memory.checkrss('memory_rss",{"_index":421,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.postservice.createpost",{"_index":98,"title":{},"body":{"controllers/AppController.html":{}}}],["this.postservice.deletepost",{"_index":107,"title":{},"body":{"controllers/AppController.html":{}}}],["this.postservice.post",{"_index":87,"title":{},"body":{"controllers/AppController.html":{}}}],["this.postservice.posts",{"_index":89,"title":{},"body":{"controllers/AppController.html":{}}}],["this.postservice.updatepost",{"_index":104,"title":{},"body":{"controllers/AppController.html":{}}}],["this.prisma",{"_index":424,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.prisma.post.create",{"_index":626,"title":{},"body":{"injectables/PostService.html":{}}}],["this.prisma.post.delete",{"_index":629,"title":{},"body":{"injectables/PostService.html":{}}}],["this.prisma.post.findmany",{"_index":625,"title":{},"body":{"injectables/PostService.html":{}}}],["this.prisma.post.findunique",{"_index":618,"title":{},"body":{"injectables/PostService.html":{}}}],["this.prisma.post.update",{"_index":628,"title":{},"body":{"injectables/PostService.html":{}}}],["this.prisma.user.create",{"_index":807,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma.user.delete",{"_index":810,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma.user.findmany",{"_index":806,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma.user.findunique",{"_index":803,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma.user.update",{"_index":809,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prismahealth.pingcheck('prisma",{"_index":423,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.recipesservice.create(newrecipedata",{"_index":713,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["this.recipesservice.findall(recipesargs",{"_index":710,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["this.recipesservice.findonebyid(id",{"_index":707,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["this.recipesservice.remove(id",{"_index":718,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["this.reflector.get('roles",{"_index":752,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.status",{"_index":454,"title":{},"body":{"classes/HttpError.html":{}}}],["this.tovalidate(metatype",{"_index":821,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["this.userservice.createuser(userdata",{"_index":102,"title":{},"body":{"controllers/AppController.html":{}}}],["threshold",{"_index":417,"title":{},"body":{"controllers/HealthController.html":{}}}],["thresholdpercent",{"_index":412,"title":{},"body":{"controllers/HealthController.html":{}}}],["throw",{"_index":589,"title":{},"body":{"injectables/ParseIntPipe.html":{},"classes/RecipesResolver.html":{},"injectables/ValidationPipe.html":{}}}],["throwerror",{"_index":318,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["timeout",{"_index":443,"title":{},"body":{"modules/HealthModule.html":{}}}],["timestamp",{"_index":519,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["timestamp\":\"${new",{"_index":520,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["title",{"_index":93,"title":{},"body":{"controllers/AppController.html":{},"classes/NewRecipeInput.html":{},"classes/Recipe.html":{}}}],["topic",{"_index":715,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["touch",{"_index":959,"title":{},"body":{"index.html":{}}}],["tovalidate",{"_index":813,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["tovalidate(metatype",{"_index":814,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["transform",{"_index":578,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["transform(value",{"_index":579,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["transformer",{"_index":819,"title":{},"body":{"injectables/ValidationPipe.html":{},"dependencies.html":{}}}],["transforminterceptor",{"_index":231,"title":{"injectables/TransformInterceptor.html":{}},"body":{"modules/CoreModule.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["translatetime",{"_index":510,"title":{},"body":{"modules/NestPinoModule.html":{},"miscellaneous/variables.html":{}}}],["transport",{"_index":537,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["true",{"_index":91,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/NestConfigModule.html":{},"modules/NestPinoModule.html":{},"classes/NewRecipeInput.html":{},"classes/Recipe.html":{},"injectables/RecipesService.html":{},"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["true})@isoptional()@length(30",{"_index":561,"title":{},"body":{"classes/NewRecipeInput.html":{}}}],["twitter",{"_index":964,"title":{},"body":{"index.html":{}}}],["type",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"interfaces/Cat.html":{},"controllers/CatsController.html":{},"injectables/CatsService.html":{},"interfaces/Config.html":{},"classes/CreateCatDto.html":{},"classes/CustomHttpException.html":{},"classes/DateScalar.html":{},"injectables/ExceptionInterceptor.html":{},"classes/GlobalExceptionFilter.html":{},"classes/HttpError.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"classes/NewRecipeInput.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostService.html":{},"classes/Recipe.html":{},"classes/RecipesArgs.html":{},"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TerminusLogger.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":980,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":453,"title":{},"body":{"classes/HttpError.html":{}}}],["types",{"_index":826,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["types.find(type",{"_index":828,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["typescript",{"_index":922,"title":{},"body":{"index.html":{}}}],["unauthorized",{"_index":898,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["unauthorized_share",{"_index":899,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["unauthorizedexception",{"_index":352,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["unit",{"_index":937,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":583,"title":{},"body":{"injectables/ParseIntPipe.html":{},"classes/RecipesResolver.html":{},"injectables/TerminusLogger.html":{},"injectables/ValidationPipe.html":{}}}],["unknown_error_code",{"_index":905,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["unlicensed",{"_index":979,"title":{},"body":{"properties.html":{}}}],["updatepost",{"_index":601,"title":{},"body":{"injectables/PostService.html":{}}}],["updatepost(params",{"_index":616,"title":{},"body":{"injectables/PostService.html":{}}}],["updateuser",{"_index":787,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuser(params",{"_index":796,"title":{},"body":{"injectables/UserService.html":{}}}],["url",{"_index":377,"title":{},"body":{"classes/GlobalExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["use",{"_index":457,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["use(req",{"_index":458,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["useclass",{"_index":234,"title":{},"body":{"modules/CoreModule.html":{}}}],["used",{"_index":405,"title":{},"body":{"controllers/HealthController.html":{},"miscellaneous/variables.html":{}}}],["usefactory",{"_index":516,"title":{},"body":{"modules/NestPinoModule.html":{}}}],["useguards",{"_index":184,"title":{},"body":{"controllers/CatsController.html":{}}}],["useguards(rolesguard",{"_index":197,"title":{},"body":{"controllers/CatsController.html":{}}}],["user",{"_index":73,"title":{},"body":{"controllers/AppController.html":{},"guards/RolesGuard.html":{},"injectables/UserService.html":{}}}],["user(userwhereuniqueinput",{"_index":798,"title":{},"body":{"injectables/UserService.html":{}}}],["user.roles",{"_index":761,"title":{},"body":{"guards/RolesGuard.html":{}}}],["user.roles.find(role",{"_index":757,"title":{},"body":{"guards/RolesGuard.html":{}}}],["user.service",{"_index":783,"title":{},"body":{"modules/UserModule.html":{}}}],["user/user.module",{"_index":139,"title":{},"body":{"modules/AppModule.html":{}}}],["user/user.service",{"_index":70,"title":{},"body":{"controllers/AppController.html":{}}}],["userdata",{"_index":59,"title":{},"body":{"controllers/AppController.html":{}}}],["usermodel",{"_index":74,"title":{},"body":{"controllers/AppController.html":{}}}],["usermodule",{"_index":129,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["users",{"_index":788,"title":{},"body":{"injectables/UserService.html":{}}}],["users(params",{"_index":801,"title":{},"body":{"injectables/UserService.html":{}}}],["userservice",{"_index":69,"title":{"injectables/UserService.html":{}},"body":{"controllers/AppController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["userwhereuniqueinput",{"_index":800,"title":{},"body":{"injectables/UserService.html":{}}}],["v",{"_index":1021,"title":{},"body":{"miscellaneous/variables.html":{}}}],["val",{"_index":585,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["valid(...app_environments",{"_index":1012,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validate",{"_index":820,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["validate(object",{"_index":824,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["validatecustomdecorators",{"_index":1039,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validation_error",{"_index":897,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["validationoptions",{"_index":492,"title":{},"body":{"modules/NestConfigModule.html":{}}}],["validationpipe",{"_index":811,"title":{"injectables/ValidationPipe.html":{}},"body":{"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["validationpipeoptions",{"_index":1035,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validationschema",{"_index":490,"title":{},"body":{"modules/NestConfigModule.html":{}}}],["validator",{"_index":243,"title":{},"body":{"classes/CreateCatDto.html":{},"classes/NewRecipeInput.html":{},"classes/RecipesArgs.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{}}}],["value",{"_index":216,"title":{},"body":{"injectables/CatsService.html":{},"classes/DateScalar.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/ParseIntPipe.html":{},"classes/RecipesArgs.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["value.gettime",{"_index":301,"title":{},"body":{"classes/DateScalar.html":{}}}],["valuenode",{"_index":289,"title":{},"body":{"classes/DateScalar.html":{}}}],["variable",{"_index":837,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["variables",{"_index":982,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":977,"title":{},"body":{"properties.html":{},"miscellaneous/variables.html":{}}}],["void",{"_index":52,"title":{},"body":{"controllers/AppController.html":{},"controllers/CatsController.html":{},"injectables/CatsService.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"injectables/TerminusLogger.html":{}}}],["watch",{"_index":932,"title":{},"body":{"index.html":{}}}],["website",{"_index":962,"title":{},"body":{"index.html":{}}}],["whitelist",{"_index":1036,"title":{},"body":{"miscellaneous/variables.html":{}}}],["world",{"_index":160,"title":{},"body":{"injectables/AppService.html":{}}}],["yarn",{"_index":927,"title":{},"body":{"index.html":{}}}],["yes",{"_index":767,"title":{},"body":{"injectables/TerminusLogger.html":{}}}],["you'd",{"_index":953,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":130,"title":{},"body":{"modules/AppModule.html":{},"modules/CatsModule.html":{},"modules/HealthModule.html":{},"modules/NestConfigModule.html":{},"modules/PostModule.html":{},"modules/PrismaModule.html":{},"modules/RecipesModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                createDraft\n                            \n                            \n                                    \n                                    Async\n                                deletePost\n                            \n                            \n                                    \n                                    Async\n                                getFilteredPosts\n                            \n                            \n                                    \n                                getHello\n                            \n                            \n                                    \n                                    Async\n                                getPostById\n                            \n                            \n                                    \n                                    Async\n                                getPublishedPosts\n                            \n                            \n                                    \n                                index\n                            \n                            \n                                    \n                                    Async\n                                publishPost\n                            \n                            \n                                    \n                                    Async\n                                signupUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        createDraft\n                        \n                    \n                \n            \n            \n                \n                        \n                    createDraft(postData: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('post')\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:65\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                postData\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    deletePost(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('post/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:94\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getFilteredPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getFilteredPosts(searchString: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('filtered-posts/:searchString')\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                searchString\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:25\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getPostById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPostById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('post/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getPublishedPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublishedPosts()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('feed')\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:40\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        index\n                        \n                    \n                \n            \n            \n                \n                        \n                    index(res: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/res')\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        publishPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    publishPost(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('publish/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:86\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        signupUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    signupUser(userData: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('user')\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:79\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userData\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Param,\n  Post,\n  Body,\n  Put,\n  Delete,\n  Res,\n} from '@nestjs/common';\nimport { AppService } from './app.service';\nimport { UserService } from './user/user.service';\nimport { PostService } from './post/post.service';\nimport { User as UserModel, Post as PostModel } from '@prisma/client';\n\n@Controller()\nexport class AppController {\n  constructor(\n    private readonly appService: AppService,\n    private readonly userService: UserService,\n    private readonly postService: PostService,\n  ) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n\n  @Get('/res')\n  index(@Res() res: any) {\n    res.status(302).redirect('/login');\n  }\n\n  @Get('post/:id')\n  async getPostById(@Param('id') id: string): Promise {\n    return this.postService.post({ id: Number(id) });\n  }\n\n  @Get('feed')\n  async getPublishedPosts(): Promise {\n    return this.postService.posts({\n      where: { published: true },\n    });\n  }\n\n  @Get('filtered-posts/:searchString')\n  async getFilteredPosts(\n    @Param('searchString') searchString: string,\n  ): Promise {\n    return this.postService.posts({\n      where: {\n        OR: [\n          {\n            title: { contains: searchString },\n          },\n          {\n            content: { contains: searchString },\n          },\n        ],\n      },\n    });\n  }\n\n  @Post('post')\n  async createDraft(\n    @Body() postData: { title: string; content?: string; authorEmail: string },\n  ): Promise {\n    const { title, content, authorEmail } = postData;\n    return this.postService.createPost({\n      title,\n      content,\n      author: {\n        connect: { email: authorEmail },\n      },\n    });\n  }\n\n  @Post('user')\n  async signupUser(\n    @Body() userData: { name?: string; email: string },\n  ): Promise {\n    return this.userService.createUser(userData);\n  }\n\n  @Put('publish/:id')\n  async publishPost(@Param('id') id: string): Promise {\n    return this.postService.updatePost({\n      where: { id: Number(id) },\n      data: { published: true },\n    });\n  }\n\n  @Delete('post/:id')\n  async deletePost(@Param('id') id: string): Promise {\n    return this.postService.deletePost({ id: Number(id) });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nCatsModule\n\nCatsModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nCatsModule->AppModule\n\n\n\n\n\nCoreModule\n\nCoreModule\n\nAppModule -->\n\nCoreModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nNestConfigModule\n\nNestConfigModule\n\nAppModule -->\n\nNestConfigModule->AppModule\n\n\n\n\n\nNestPinoModule\n\nNestPinoModule\n\nAppModule -->\n\nNestPinoModule->AppModule\n\n\n\n\n\nPostModule\n\nPostModule\n\nAppModule -->\n\nPostModule->AppModule\n\n\n\n\n\nRecipesModule\n\nRecipesModule\n\nAppModule -->\n\nRecipesModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CatsModule\n                        \n                        \n                            CoreModule\n                        \n                        \n                            HealthModule\n                        \n                        \n                            NestConfigModule\n                        \n                        \n                            NestPinoModule\n                        \n                        \n                            PostModule\n                        \n                        \n                            RecipesModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { CoreModule } from './core/core.module';\nimport { CatsModule } from './cats/cats.module';\nimport { PostModule } from './post/post.module';\nimport { UserModule } from './user/user.module';\nimport { GraphQLModule } from '@nestjs/graphql';\nimport { MercuriusDriver, MercuriusDriverConfig } from '@nestjs/mercurius';\nimport { RecipesModule } from './recipes/recipes.module';\nimport { HealthModule } from './health/health.module';\nimport { NestConfigModule } from '@core/config';\nimport { NestPinoModule } from '@core/pino';\n\n@Module({\n  imports: [\n    NestConfigModule,\n    NestPinoModule,\n    CoreModule,\n    GraphQLModule.forRoot({\n      driver: MercuriusDriver,\n      autoSchemaFile: 'schema.gql',\n      subscription: true,\n      graphiql: true,\n    }),\n    RecipesModule,\n    CatsModule,\n    UserModule,\n    PostModule,\n    HealthModule\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Cat.html":{"url":"interfaces/Cat.html","title":"interface - Cat","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Cat\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cats/interfaces/cat.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            age\n                                        \n                                \n                                \n                                        \n                                            breed\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        age\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        age:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        breed\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        breed:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Cat {\n  readonly name: string;\n  readonly age: number;\n  readonly breed: string;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CatsController.html":{"url":"controllers/CatsController.html","title":"controller - CatsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CatsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cats/cats.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                cats\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createCatDto: CreateCatDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@Roles('admin')\n                \n            \n\n                    \n                        \n                            Defined in src/cats/cats.controller.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createCatDto\n                                            \n                                                            CreateCatDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/cats/cats.controller.ts:21\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/cats/cats.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Param, Post, UseGuards } from '@nestjs/common';\nimport { Roles } from '../common/decorators/roles.decorator';\nimport { RolesGuard } from '../common/guards/roles.guard';\nimport { ParseIntPipe } from '../common/pipes/parse-int.pipe';\nimport { CatsService } from './cats.service';\nimport { CreateCatDto } from './dto/create-cat.dto';\nimport { Cat } from './interfaces/cat.interface';\n\n@UseGuards(RolesGuard)\n@Controller('cats')\nexport class CatsController {\n  constructor(private readonly catsService: CatsService) {}\n\n  @Post()\n  @Roles('admin')\n  async create(@Body() createCatDto: CreateCatDto) {\n    this.catsService.create(createCatDto);\n  }\n\n  @Get()\n  async findAll(): Promise {\n    return this.catsService.findAll();\n  }\n\n  @Get(':id')\n  findOne(\n    @Param('id', new ParseIntPipe())\n    id: number,\n  ) {\n    // get by ID logic\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CatsModule.html":{"url":"modules/CatsModule.html","title":"module - CatsModule","body":"\n                   \n\n\n\n\n    Modules\n    CatsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CatsModule\n\n\n\ncluster_CatsModule_providers\n\n\n\n\nCatsService\n\nCatsService\n\n\n\nCatsModule\n\nCatsModule\n\nCatsModule -->\n\nCatsService->CatsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/cats/cats.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CatsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CatsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CatsController } from './cats.controller';\nimport { CatsService } from './cats.service';\n\n@Module({\n  controllers: [CatsController],\n  providers: [CatsService],\n})\nexport class CatsModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CatsService.html":{"url":"injectables/CatsService.html","title":"injectable - CatsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CatsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cats/cats.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                cats\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(cat: Cat)\n                \n            \n\n\n                    \n                        \n                            Defined in src/cats/cats.service.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                cat\n                                            \n                                                            Cat\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/cats/cats.service.ts:12\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Cat[]\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        cats\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Cat[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/cats/cats.service.ts:6\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Cat } from './interfaces/cat.interface';\n\n@Injectable()\nexport class CatsService {\n  private readonly cats: Cat[] = [];\n\n  create(cat: Cat) {\n    this.cats.push(cat);\n  }\n\n  findAll(): Cat[] {\n    return this.cats;\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Config.html":{"url":"interfaces/Config.html","title":"interface - Config","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Config\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/config/config.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            app\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        app\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        app:         ConfigType<>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ConfigType<>\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ConfigType } from \"@nestjs/config\";\nimport { app } from \"./app.config\";\n\nexport interface Config {\n  app: ConfigType;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CoreModule.html":{"url":"modules/CoreModule.html","title":"module - CoreModule","body":"\n                   \n\n\n\n\n    Modules\n    CoreModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/core.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { APP_INTERCEPTOR } from '@nestjs/core';\nimport { LoggingInterceptor } from './interceptors/logging.interceptor';\nimport { TransformInterceptor } from './interceptors/transform.interceptor';\n\n@Module({\n  providers: [\n    { provide: APP_INTERCEPTOR, useClass: TransformInterceptor },\n    { provide: APP_INTERCEPTOR, useClass: LoggingInterceptor },\n  ],\n})\nexport class CoreModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCatDto.html":{"url":"classes/CreateCatDto.html","title":"class - CreateCatDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCatDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cats/dto/create-cat.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Readonly\n                                age\n                            \n                            \n                                    \n                                    Readonly\n                                breed\n                            \n                            \n                                    \n                                    Readonly\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        age\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/cats/dto/create-cat.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        breed\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/cats/dto/create-cat.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/cats/dto/create-cat.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, IsString } from 'class-validator';\n\nexport class CreateCatDto {\n  @IsString()\n  readonly name: string;\n\n  @IsInt()\n  readonly age: number;\n\n  @IsString()\n  readonly breed: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CustomHttpException.html":{"url":"classes/CustomHttpException.html","title":"class - CustomHttpException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CustomHttpException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/exception/custom.exception.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        HttpException\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string, code: HttpErrorCode)\n                    \n                \n                        \n                            \n                                Defined in src/common/exception/custom.exception.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        code\n                                                  \n                                                        \n                                                                        HttpErrorCode\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/common/exception/custom.exception.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpException, HttpStatus } from '@nestjs/common';\nimport { ErrorCodeToStatusMap, HttpErrorCode } from '../errors';\n\nexport class CustomHttpException extends HttpException {\n  code: string;\n\n  constructor(message: string, code: HttpErrorCode) {\n    super(message, ErrorCodeToStatusMap[code]);\n    this.code = code;\n  }\n}\n\nexport const getDefaultCodeByStatus = (status: HttpStatus) => {\n  switch (status) {\n    case HttpStatus.BAD_REQUEST:\n      return HttpErrorCode.VALIDATION_ERROR;\n    case HttpStatus.UNAUTHORIZED:\n      return HttpErrorCode.UNAUTHORIZED;\n    case HttpStatus.FORBIDDEN:\n      return HttpErrorCode.RESTRICTED_RESOURCE;\n    case HttpStatus.NOT_FOUND:\n      return HttpErrorCode.NOT_FOUND;\n    case HttpStatus.INTERNAL_SERVER_ERROR:\n      return HttpErrorCode.INTERNAL_SERVER_ERROR;\n    case HttpStatus.SERVICE_UNAVAILABLE:\n      return HttpErrorCode.DATABASE_CONNECTION_UNAVAILABLE;\n    default:\n      return HttpErrorCode.UNKNOWN_ERROR_CODE;\n  }\n};\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DateScalar.html":{"url":"classes/DateScalar.html","title":"class - DateScalar","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DateScalar\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/scalars/date.scalar.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        CustomScalar\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                parseLiteral\n                            \n                            \n                                parseValue\n                            \n                            \n                                serialize\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'Date custom scalar type'\n                    \n                \n                    \n                        \n                                Defined in src/common/scalars/date.scalar.ts:6\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        parseLiteral\n                        \n                    \n                \n            \n            \n                \nparseLiteral(ast: ValueNode)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/scalars/date.scalar.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                ast\n                                            \n                                                        ValueNode\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Date\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parseValue\n                        \n                    \n                \n            \n            \n                \nparseValue(value: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/scalars/date.scalar.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Date\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serialize\n                        \n                    \n                \n            \n            \n                \nserialize(value: Date)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/scalars/date.scalar.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { CustomScalar, Scalar } from '@nestjs/graphql';\nimport { Kind, ValueNode } from 'graphql';\n\n@Scalar('Date', type => Date)\nexport class DateScalar implements CustomScalar {\n  description = 'Date custom scalar type';\n\n  parseValue(value: number): Date {\n    return new Date(value); // value from the client\n  }\n\n  serialize(value: Date): number {\n    return value.getTime(); // value sent to the client\n  }\n\n  parseLiteral(ast: ValueNode): Date {\n    if (ast.kind === Kind.INT) {\n      return new Date(ast.value);\n    }\n    return null;\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExceptionInterceptor.html":{"url":"injectables/ExceptionInterceptor.html","title":"injectable - ExceptionInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ExceptionInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/exception.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/interceptors/exception.interceptor.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  HttpException,\n  HttpStatus,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\n@Injectable()\nexport class ExceptionInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    return next\n      .handle()\n      .pipe(\n        catchError(err =>\n          throwError(\n            () =>\n              new HttpException(\n                'Exception interceptor message',\n                HttpStatus.BAD_GATEWAY,\n              ),\n          ),\n        ),\n      );\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GlobalExceptionFilter.html":{"url":"classes/GlobalExceptionFilter.html","title":"class - GlobalExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GlobalExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/global-exception.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                            \n                                    Protected\n                                logError\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/core/filters/global-exception.filter.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(GlobalExceptionFilter.name)\n                    \n                \n                    \n                        \n                                Defined in src/core/filters/global-exception.filter.ts:19\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: Error | HttpException, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/filters/global-exception.filter.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                        Error | HttpException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        logError\n                        \n                    \n                \n            \n            \n                \n                        \n                    logError(exception: Error, request: FastifyRequest)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/filters/global-exception.filter.ts:63\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                        Error\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                request\n                                            \n                                                        FastifyRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import type { ArgumentsHost, ExceptionFilter } from '@nestjs/common';\nimport {\n  BadRequestException,\n  Catch,\n  ForbiddenException,\n  HttpException,\n  HttpStatus,\n  Logger,\n  NotFoundException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { CustomHttpException, getDefaultCodeByStatus } from '@common/exception';\nimport { HttpErrorCode } from '@common/errors';\nimport type { FastifyReply, FastifyRequest } from 'fastify';\n\n@Catch()\nexport class GlobalExceptionFilter implements ExceptionFilter {\n  private logger = new Logger(GlobalExceptionFilter.name);\n\n  constructor(private readonly configService: ConfigService) {}\n\n  catch(exception: Error | HttpException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n\n    if (\n      !(\n        exception instanceof BadRequestException ||\n        exception instanceof UnauthorizedException ||\n        exception instanceof ForbiddenException ||\n        exception instanceof NotFoundException\n      )\n    ) {\n      this.logError(exception, request);\n    }\n\n    if (exception instanceof CustomHttpException) {\n      const customException = exception as CustomHttpException;\n      const status = customException.getStatus();\n      return response.status(status).send({\n        message: exception.message,\n        status: status,\n        code: customException.code,\n      });\n    }\n\n    if (exception instanceof HttpException) {\n      const status = exception.getStatus();\n      return response\n        .status(status)\n        .send({ message: exception.message, status, code: getDefaultCodeByStatus(status) });\n    }\n\n    response.status(HttpStatus.INTERNAL_SERVER_ERROR).send({\n      message: 'Internal Server Error',\n      status: HttpStatus.INTERNAL_SERVER_ERROR,\n      code: HttpErrorCode.INTERNAL_SERVER_ERROR,\n    });\n  }\n\n  protected logError(exception: Error, request: FastifyRequest) {\n    this.logger.error(\n      {\n        url: request?.url,\n        message: exception.message,\n      },\n      exception.stack\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HealthController.html":{"url":"controllers/HealthController.html","title":"controller - HealthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HealthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health/health.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                health\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                check\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        check\n                        \n                    \n                \n            \n            \n                \n                        \n                    check()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HealthCheck()\n                \n            \n\n                    \n                        \n                            Defined in src/health/health.controller.ts:18\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { HealthCheckService, HttpHealthIndicator, HealthCheck, PrismaHealthIndicator, DiskHealthIndicator, MemoryHealthIndicator } from '@nestjs/terminus';\nimport { PrismaService } from '../prisma/prisma.service';\n\n@Controller('health')\nexport class HealthController {\n  constructor(\n    private health: HealthCheckService,\n    private http: HttpHealthIndicator,\n    private prismaHealth: PrismaHealthIndicator,\n    private prisma: PrismaService,\n    private disk: DiskHealthIndicator,\n    private memory: MemoryHealthIndicator,\n  ) {}\n\n  @Get()\n  @HealthCheck()\n  check() {\n    return this.health.check([\n      () => this.http.pingCheck('nestjs-docs', 'https://docs.nestjs.com'),\n      // The used disk storage should not exceed 50% of the full disk size\n      () =>\n        this.disk.checkStorage('disk health', {\n          thresholdPercent: 0.5,\n          path: '/',\n        }),\n      // The used disk storage should not exceed 250 GB\n      () =>\n        this.disk.checkStorage('disk health', {\n          threshold: 250 * 1024 * 1024 * 1024,\n          path: '/',\n        }),\n\n      () => this.memory.checkHeap('memory_heap', 200 * 1024 * 1024),\n      () => this.memory.checkRSS('memory_rss', 3000 * 1024 * 1024),\n      // prisma\n      () => this.prismaHealth.pingCheck('prisma', this.prisma),\n    ]);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HealthModule.html":{"url":"modules/HealthModule.html","title":"module - HealthModule","body":"\n                   \n\n\n\n\n    Modules\n    HealthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_HealthModule\n\n\n\ncluster_HealthModule_imports\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nHealthModule\n\nHealthModule\n\nHealthModule -->\n\nPrismaModule->HealthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/health/health.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            HealthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TerminusModule } from '@nestjs/terminus';\nimport { HttpModule } from '@nestjs/axios';\nimport { HealthController } from './health.controller';\nimport { PrismaModule } from '../prisma/prisma.module';\nimport { TerminusLogger } from './terminus-logger.service';\n\n@Module({\n  imports: [\n    TerminusModule.forRoot({\n      logger: TerminusLogger,\n    }),\n    TerminusModule.forRoot({\n      logger: false,\n      errorLogStyle: 'pretty',\n      // https://docs.nestjs.com/recipes/terminus#graceful-shutdown-timeout\n      gracefulShutdownTimeoutMs: 1000,\n    }),\n    HttpModule,\n    PrismaModule\n  ],\n  controllers: [HealthController],\n})\nexport class HealthModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpError.html":{"url":"classes/HttpError.html","title":"class - HttpError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/errors/http.error.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Error\n            \n\n            \n                Implements\n            \n            \n                            IHttpError\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                            \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(error: string | literal type, status: number)\n                    \n                \n                        \n                            \n                                Defined in src/common/errors/http.error.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        error\n                                                  \n                                                        \n                                                                    string | literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        status\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         HttpErrorCode\n\n                    \n                \n                    \n                        \n                                Defined in src/common/errors/http.error.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/common/errors/http.error.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import type { IHttpError } from './http-response.types';\nimport { HttpErrorCode } from './http-response.types';\n\nexport class HttpError extends Error implements IHttpError {\n  status: number;\n  code: HttpErrorCode;\n\n  constructor(error: string | { message?: string; code?: HttpErrorCode }, status: number) {\n    const { message = 'Error', code = HttpErrorCode.INTERNAL_SERVER_ERROR } =\n      typeof error === 'string' ? { message: error } : error;\n    super(message);\n    this.status = status;\n    this.code = code;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggerMiddleware.html":{"url":"injectables/LoggerMiddleware.html","title":"injectable - LoggerMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggerMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/middleware/logger.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(req: any, res: any, next: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/middleware/logger.middleware.ts:5\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware } from '@nestjs/common';\n\n@Injectable()\nexport class LoggerMiddleware implements NestMiddleware {\n  use(req: any, res: any, next: () => void) {\n    console.log(`Request...`);\n    next();\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggingInterceptor.html":{"url":"injectables/LoggingInterceptor.html","title":"injectable - LoggingInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggingInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/logging.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/interceptors/logging.interceptor.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable()\nexport class LoggingInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    console.log('Before...');\n\n    const now = Date.now();\n    return next\n      .handle()\n      .pipe(tap(() => console.log(`After... ${Date.now() - now}ms`)));\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/NestConfigModule.html":{"url":"modules/NestConfigModule.html","title":"module - NestConfigModule","body":"\n                   \n\n\n\n\n    Modules\n    NestConfigModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_NestConfigModule\n\n\n\ncluster_NestConfigModule_exports\n\n\n\n\nConfigService \n\nConfigService \n\n\n\nNestConfigModule\n\nNestConfigModule\n\nConfigService  -->\n\nNestConfigModule->ConfigService \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/config/config.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Exports\n                    \n                        \n                            ConfigService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import process from 'node:process';\nimport { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport Joi from 'joi';\nimport { HelperService } from '@common/helpers';\nimport { app, appConfigValidationSchema } from './app.config';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      envFilePath: [HelperService.getEnvFile()],\n      load: [\n        app,\n      ],\n      cache: true,\n      isGlobal: true,\n      expandVariables: true,\n      validationSchema: Joi.object({\n        ...appConfigValidationSchema,\n      }),\n      validationOptions: {\n        abortEarly: true,\n        cache: !HelperService.isProd(),\n        debug: !HelperService.isProd(),\n        stack: !HelperService.isProd(),\n      },\n    }),\n  ],\n  providers: [ConfigService],\n  exports: [ConfigService],\n})\nexport class NestConfigModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/NestPinoModule.html":{"url":"modules/NestPinoModule.html","title":"module - NestPinoModule","body":"\n                   \n\n\n\n\n    Modules\n    NestPinoModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/pino/pino.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { HelperService } from '@common/helpers';\nimport { Module, RequestMethod } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { LoggerModule } from 'nestjs-pino';\n\n// Fields to redact from logs\nconst redactFields = [\n  'req.headers.authorization',\n  'req.body.password',\n  'req.body.confirmPassword',\n];\nconst basePinoOptions = {\n  translateTime: true,\n  ignore: 'pid,hostname',\n  singleLine: true,\n  redact: redactFields,\n};\n\n@Module({\n  imports: [\n    LoggerModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (_configService: ConfigService) => ({\n        pinoHttp: {\n          timestamp: () =>\n            `,\"timestamp\":\"${new Date(Date.now()).toISOString()}\"`,\n          name: 'backend-api',\n          customProps: (_request: any, _response: any) => ({\n            context: 'HTTP',\n          }),\n          serializers: {\n            req(request: {\n              body: Record;\n              raw: {\n                body: Record;\n              };\n            }) {\n              request.body = request.raw.body;\n\n              return request;\n            },\n          },\n          redact: {\n            paths: redactFields,\n            censor: '**GDPR COMPLIANT**',\n          },\n          transport: HelperService.isProd()\n            ? {\n                targets: [\n                  {\n                    target: 'pino/file',\n                    level: 'info',\n                    options: {\n                      ...basePinoOptions,\n                      destination: 'logs/info.log',\n                      mkdir: true,\n                      sync: false,\n                    },\n                  },\n                  {\n                    target: 'pino/file',\n                    level: 'error', // log only errors to file\n                    options: {\n                      ...basePinoOptions,\n                      destination: 'logs/error.log',\n                      mkdir: true,\n                      sync: false,\n                    },\n                  },\n                ],\n              }\n            : {\n                targets: [\n                  {\n                    target: 'pino-pretty',\n                    level: 'info', // log only info and above to console\n                    options: {\n                      ...basePinoOptions,\n                      colorize: true,\n                    },\n                  },\n                  {\n                    target: 'pino/file',\n                    level: 'error',\n                    options: {\n                      ...basePinoOptions,\n                      destination: 'logs/error.log',\n                      mkdir: true,\n                      sync: false,\n                    },\n                  },\n                ],\n              },\n        },\n        exclude: [{ method: RequestMethod.ALL, path: 'doc' }],\n      }),\n    }),\n  ],\n  exports: [LoggerModule],\n})\nexport class NestPinoModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NewRecipeInput.html":{"url":"classes/NewRecipeInput.html","title":"class - NewRecipeInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NewRecipeInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/recipes/dto/new-recipe.input.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                ingredients\n                            \n                            \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({nullable: true})@IsOptional()@Length(30, 255)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipes/dto/new-recipe.input.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        ingredients\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(type => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipes/dto/new-recipe.input.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()@MaxLength(30)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipes/dto/new-recipe.input.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, InputType } from '@nestjs/graphql';\nimport { IsOptional, Length, MaxLength } from 'class-validator';\n\n@InputType()\nexport class NewRecipeInput {\n  @Field()\n  @MaxLength(30)\n  title: string;\n\n  @Field({ nullable: true })\n  @IsOptional()\n  @Length(30, 255)\n  description?: string;\n\n  @Field(type => [String])\n  ingredients: string[];\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ParseIntPipe.html":{"url":"injectables/ParseIntPipe.html","title":"injectable - ParseIntPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ParseIntPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pipes/parse-int.pipe.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        transform\n                        \n                    \n                \n            \n            \n                \n                        \n                    transform(value: string, metadata: ArgumentMetadata)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/pipes/parse-int.pipe.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                metadata\n                                            \n                                                        ArgumentMetadata\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException } from '@nestjs/common';\nimport { PipeTransform, Injectable, ArgumentMetadata } from '@nestjs/common';\n\n@Injectable()\nexport class ParseIntPipe implements PipeTransform {\n  async transform(value: string, metadata: ArgumentMetadata) {\n    const val = parseInt(value, 10);\n    if (isNaN(val)) {\n      throw new BadRequestException('Validation failed');\n    }\n    return val;\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostModule.html":{"url":"modules/PostModule.html","title":"module - PostModule","body":"\n                   \n\n\n\n\n    Modules\n    PostModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostModule\n\n\n\ncluster_PostModule_imports\n\n\n\ncluster_PostModule_exports\n\n\n\ncluster_PostModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nPostModule\n\nPostModule\n\nPostModule -->\n\nPrismaModule->PostModule\n\n\n\n\n\nPostService \n\nPostService \n\nPostService  -->\n\nPostModule->PostService \n\n\n\n\n\nPostService\n\nPostService\n\nPostModule -->\n\nPostService->PostModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/post/post.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PostService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostService } from './post.service';\nimport { PrismaModule } from '../prisma/prisma.module';\n\n@Module({\n  providers: [PostService],\n  imports: [PrismaModule],\n  exports: [PostService],\n})\nexport class PostModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostService.html":{"url":"injectables/PostService.html","title":"injectable - PostService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createPost\n                            \n                            \n                                    Async\n                                deletePost\n                            \n                            \n                                    Async\n                                post\n                            \n                            \n                                    Async\n                                posts\n                            \n                            \n                                    Async\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/post/post.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(data: Prisma.PostCreateInput)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        Prisma.PostCreateInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    deletePost(where: Prisma.PostWhereUniqueInput)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:51\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                where\n                                            \n                                                        Prisma.PostWhereUniqueInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        post\n                        \n                    \n                \n            \n            \n                \n                        \n                    post(postWhereUniqueInput: Prisma.PostWhereUniqueInput)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                postWhereUniqueInput\n                                            \n                                                        Prisma.PostWhereUniqueInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        posts\n                        \n                    \n                \n            \n            \n                \n                        \n                    posts(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PrismaService } from '../prisma/prisma.service';\nimport { Post, Prisma } from '@prisma/client';\n\n@Injectable()\nexport class PostService {\n  constructor(private prisma: PrismaService) {}\n\n  async post(\n    postWhereUniqueInput: Prisma.PostWhereUniqueInput,\n  ): Promise {\n    return this.prisma.post.findUnique({\n      where: postWhereUniqueInput,\n    });\n  }\n\n  async posts(params: {\n    skip?: number;\n    take?: number;\n    cursor?: Prisma.PostWhereUniqueInput;\n    where?: Prisma.PostWhereInput;\n    orderBy?: Prisma.PostOrderByWithRelationInput;\n  }): Promise {\n    const { skip, take, cursor, where, orderBy } = params;\n    return this.prisma.post.findMany({\n      skip,\n      take,\n      cursor,\n      where,\n      orderBy,\n    });\n  }\n\n  async createPost(data: Prisma.PostCreateInput): Promise {\n    return this.prisma.post.create({\n      data,\n    });\n  }\n\n  async updatePost(params: {\n    where: Prisma.PostWhereUniqueInput;\n    data: Prisma.PostUpdateInput;\n  }): Promise {\n    const { data, where } = params;\n    return this.prisma.post.update({\n      data,\n      where,\n    });\n  }\n\n  async deletePost(where: Prisma.PostWhereUniqueInput): Promise {\n    return this.prisma.post.delete({\n      where,\n    });\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PrismaModule.html":{"url":"modules/PrismaModule.html","title":"module - PrismaModule","body":"\n                   \n\n\n\n\n    Modules\n    PrismaModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\n\nPrismaService \n\nPrismaService \n\n\n\nPrismaModule\n\nPrismaModule\n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/prisma/prisma.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PrismaService } from './prisma.service';\n\n@Module({\n  providers: [PrismaService],\n  exports: [PrismaService],\n})\nexport class PrismaModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/prisma/prisma.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/prisma/prisma.service.ts:6\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnModuleInit } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n@Injectable()\nexport class PrismaService extends PrismaClient implements OnModuleInit {\n  async onModuleInit() {\n    await this.$connect();\n  }\n  \n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Recipe.html":{"url":"classes/Recipe.html","title":"class - Recipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Recipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/recipes/models/recipe.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                creationDate\n                            \n                            \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                ingredients\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        creationDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipes/models/recipe.model.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipes/models/recipe.model.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(type => ID)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipes/models/recipe.model.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        ingredients\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(type => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipes/models/recipe.model.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipes/models/recipe.model.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, ID, ObjectType } from '@nestjs/graphql';\n\n@ObjectType({ description: 'recipe ' })\nexport class Recipe {\n  @Field(type => ID)\n  id: string;\n\n  @Field()\n  title: string;\n\n  @Field({ nullable: true })\n  description?: string;\n\n  @Field()\n  creationDate: Date;\n\n  @Field(type => [String])\n  ingredients: string[];\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RecipesArgs.html":{"url":"classes/RecipesArgs.html","title":"class - RecipesArgs","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RecipesArgs\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/recipes/dto/recipes.args.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                skip\n                            \n                            \n                                    \n                                    \n                                    \n                                take\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        skip\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(type => Int)@Min(0)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipes/dto/recipes.args.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        take\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 25\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(type => Int)@Min(1)@Max(50)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipes/dto/recipes.args.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ArgsType, Field, Int } from '@nestjs/graphql';\nimport { Max, Min } from 'class-validator';\n\n@ArgsType()\nexport class RecipesArgs {\n  @Field(type => Int)\n  @Min(0)\n  skip = 0;\n\n  @Field(type => Int)\n  @Min(1)\n  @Max(50)\n  take = 25;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RecipesModule.html":{"url":"modules/RecipesModule.html","title":"module - RecipesModule","body":"\n                   \n\n\n\n\n    Modules\n    RecipesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RecipesModule\n\n\n\ncluster_RecipesModule_providers\n\n\n\n\nRecipesService\n\nRecipesService\n\n\n\nRecipesModule\n\nRecipesModule\n\nRecipesModule -->\n\nRecipesService->RecipesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/recipes/recipes.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RecipesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { DateScalar } from '../common/scalars/date.scalar';\nimport { RecipesResolver } from './recipes.resolver';\nimport { RecipesService } from './recipes.service';\n\n@Module({\n  providers: [RecipesResolver, RecipesService, DateScalar],\n})\nexport class RecipesModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RecipesResolver.html":{"url":"classes/RecipesResolver.html","title":"class - RecipesResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RecipesResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/recipes/recipes.resolver.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                addRecipe\n                            \n                            \n                                    \n                                    Async\n                                recipe\n                            \n                            \n                                    \n                                recipeAdded\n                            \n                            \n                                    \n                                recipes\n                            \n                            \n                                    \n                                    Async\n                                removeRecipe\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(recipesService: RecipesService)\n                    \n                \n                        \n                            \n                                Defined in src/recipes/recipes.resolver.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        recipesService\n                                                  \n                                                        \n                                                                        RecipesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        addRecipe\n                        \n                    \n                \n            \n            \n                \n                        \n                    addRecipe(newRecipeData: NewRecipeInput, pubSub: PubSub)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(returns => Recipe)\n                \n            \n\n                    \n                        \n                            Defined in src/recipes/recipes.resolver.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                newRecipeData\n                                            \n                                                            NewRecipeInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                pubSub\n                                            \n                                                        PubSub\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        recipe\n                        \n                    \n                \n            \n            \n                \n                        \n                    recipe(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query(returns => Recipe)\n                \n            \n\n                    \n                        \n                            Defined in src/recipes/recipes.resolver.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        recipeAdded\n                        \n                    \n                \n            \n            \n                \n                        \n                    recipeAdded(pubSub: PubSub)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Subscription(returns => Recipe)\n                \n            \n\n                    \n                        \n                            Defined in src/recipes/recipes.resolver.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                pubSub\n                                            \n                                                        PubSub\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        recipes\n                        \n                    \n                \n            \n            \n                \n                        \n                    recipes(recipesArgs: RecipesArgs)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query(returns => )\n                \n            \n\n                    \n                        \n                            Defined in src/recipes/recipes.resolver.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                recipesArgs\n                                            \n                                                            RecipesArgs\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        removeRecipe\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeRecipe(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(returns => Boolean)\n                \n            \n\n                    \n                        \n                            Defined in src/recipes/recipes.resolver.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { NotFoundException } from '@nestjs/common';\nimport {\n  Args,\n  Context,\n  Mutation,\n  Query,\n  Resolver,\n  Subscription,\n} from '@nestjs/graphql';\nimport { PubSub } from 'mercurius';\nimport { NewRecipeInput } from './dto/new-recipe.input';\nimport { RecipesArgs } from './dto/recipes.args';\nimport { Recipe } from './models/recipe.model';\nimport { RecipesService } from './recipes.service';\n\n@Resolver(of => Recipe)\nexport class RecipesResolver {\n  constructor(private readonly recipesService: RecipesService) {}\n\n  @Query(returns => Recipe)\n  async recipe(@Args('id') id: string): Promise {\n    const recipe = await this.recipesService.findOneById(id);\n    if (!recipe) {\n      throw new NotFoundException(id);\n    }\n    return recipe;\n  }\n\n  @Query(returns => [Recipe])\n  recipes(@Args() recipesArgs: RecipesArgs): Promise {\n    return this.recipesService.findAll(recipesArgs);\n  }\n\n  @Mutation(returns => Recipe)\n  async addRecipe(\n    @Args('newRecipeData') newRecipeData: NewRecipeInput,\n    @Context('pubsub') pubSub: PubSub,\n  ): Promise {\n    const recipe = await this.recipesService.create(newRecipeData);\n    pubSub.publish({ topic: 'recipeAdded', payload: { recipeAdded: recipe } });\n    return recipe;\n  }\n\n  @Mutation(returns => Boolean)\n  async removeRecipe(@Args('id') id: string) {\n    return this.recipesService.remove(id);\n  }\n\n  @Subscription(returns => Recipe)\n  recipeAdded(@Context('pubsub') pubSub: PubSub) {\n    return pubSub.subscribe('recipeAdded');\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RecipesService.html":{"url":"injectables/RecipesService.html","title":"injectable - RecipesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RecipesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/recipes/recipes.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                remove\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(data: NewRecipeInput)\n                \n            \n\n\n                    \n                        \n                            Defined in src/recipes/recipes.service.ts:14\n                        \n                    \n\n\n            \n                \n                        MOCK\nPut some real business logic here\nLeft for demonstration purposes\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            NewRecipeInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(recipesArgs: RecipesArgs)\n                \n            \n\n\n                    \n                        \n                            Defined in src/recipes/recipes.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                recipesArgs\n                                            \n                                                            RecipesArgs\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/recipes/recipes.service.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/recipes/recipes.service.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { NewRecipeInput } from './dto/new-recipe.input';\nimport { RecipesArgs } from './dto/recipes.args';\nimport { Recipe } from './models/recipe.model';\n\n@Injectable()\nexport class RecipesService {\n  /**\n   * MOCK\n   * Put some real business logic here\n   * Left for demonstration purposes\n   */\n\n  async create(data: NewRecipeInput): Promise {\n    return {} as any;\n  }\n\n  async findOneById(id: string): Promise {\n    return {} as any;\n  }\n\n  async findAll(recipesArgs: RecipesArgs): Promise {\n    return [] as Recipe[];\n  }\n\n  async remove(id: string): Promise {\n    return true;\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Response.html":{"url":"interfaces/Response.html","title":"interface - Response","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Response\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/transform.interceptor.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport interface Response {\n  data: T;\n}\n\n@Injectable()\nexport class TransformInterceptor\n  implements NestInterceptor>\n{\n  intercept(\n    context: ExecutionContext,\n    next: CallHandler,\n  ): Observable> {\n    return next.handle().pipe(map(data => ({ data })));\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/common/guards/roles.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/common/guards/roles.guard.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/guards/roles.guard.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private readonly reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const roles = this.reflector.get('roles', context.getHandler());\n    if (!roles) {\n      return true;\n    }\n    const request = context.switchToHttp().getRequest();\n    const user = request.user;\n    const hasRole = () =>\n      !!user.roles.find(role => !!roles.find(item => item === role));\n\n    return user && user.roles && hasRole();\n  }\n}\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TerminusLogger.html":{"url":"injectables/TerminusLogger.html","title":"injectable - TerminusLogger","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TerminusLogger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health/terminus-logger.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ConsoleLogger\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                error\n                            \n                            \n                                error\n                            \n                            \n                                error\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n            \n                \nerror(message: any, stack?: string, context?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/health/terminus-logger.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                stack\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                context\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n            \n                \nerror(message: any, ...optionalParams: any[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/health/terminus-logger.service.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                optionalParams\n                                            \n                                                        any[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n            \n                \nerror(message, stack?, context?, ...rest: [])\n                \n            \n\n\n                    \n                        \n                            Defined in src/health/terminus-logger.service.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                stack\n                                            \n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                context\n                                            \n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                rest\n                                            \n                                                        []\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Scope, ConsoleLogger } from '@nestjs/common';\n\n@Injectable({ scope: Scope.TRANSIENT })\nexport class TerminusLogger extends ConsoleLogger {\n  error(message: any, stack?: string, context?: string): void;\n  error(message: any, ...optionalParams: any[]): void;\n  error(\n    message: unknown,\n    stack?: unknown,\n    context?: unknown,\n    ...rest: unknown[]\n  ): void {\n    // Overwrite here how error messages should be logged\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TransformInterceptor.html":{"url":"injectables/TransformInterceptor.html","title":"injectable - TransformInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TransformInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/transform.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/interceptors/transform.interceptor.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport interface Response {\n  data: T;\n}\n\n@Injectable()\nexport class TransformInterceptor\n  implements NestInterceptor>\n{\n  intercept(\n    context: ExecutionContext,\n    next: CallHandler,\n  ): Observable> {\n    return next.handle().pipe(map(data => ({ data })));\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserModule_imports\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nPrismaModule->UserModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { PrismaModule } from '../prisma/prisma.module';\n\n@Module({\n  providers: [UserService],\n  imports: [PrismaModule],\n  exports: [UserService],\n})\nexport class UserModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                deleteUser\n                            \n                            \n                                    Async\n                                updateUser\n                            \n                            \n                                    Async\n                                user\n                            \n                            \n                                    Async\n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(data: Prisma.UserCreateInput)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        Prisma.UserCreateInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteUser(where: Prisma.UserWhereUniqueInput)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:51\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                where\n                                            \n                                                        Prisma.UserWhereUniqueInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUser(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        user\n                        \n                    \n                \n            \n            \n                \n                        \n                    user(userWhereUniqueInput: Prisma.UserWhereUniqueInput)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userWhereUniqueInput\n                                            \n                                                        Prisma.UserWhereUniqueInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        users\n                        \n                    \n                \n            \n            \n                \n                        \n                    users(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PrismaService } from '../prisma/prisma.service';\nimport { User, Prisma } from '@prisma/client';\n\n@Injectable()\nexport class UserService {\n  constructor(private prisma: PrismaService) {}\n\n  async user(\n    userWhereUniqueInput: Prisma.UserWhereUniqueInput,\n  ): Promise {\n    return this.prisma.user.findUnique({\n      where: userWhereUniqueInput,\n    });\n  }\n\n  async users(params: {\n    skip?: number;\n    take?: number;\n    cursor?: Prisma.UserWhereUniqueInput;\n    where?: Prisma.UserWhereInput;\n    orderBy?: Prisma.UserOrderByWithRelationInput;\n  }): Promise {\n    const { skip, take, cursor, where, orderBy } = params;\n    return this.prisma.user.findMany({\n      skip,\n      take,\n      cursor,\n      where,\n      orderBy,\n    });\n  }\n\n  async createUser(data: Prisma.UserCreateInput): Promise {\n    return this.prisma.user.create({\n      data,\n    });\n  }\n\n  async updateUser(params: {\n    where: Prisma.UserWhereUniqueInput;\n    data: Prisma.UserUpdateInput;\n  }): Promise {\n    const { where, data } = params;\n    return this.prisma.user.update({\n      data,\n      where,\n    });\n  }\n\n  async deleteUser(where: Prisma.UserWhereUniqueInput): Promise {\n    return this.prisma.user.delete({\n      where,\n    });\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ValidationPipe.html":{"url":"injectables/ValidationPipe.html","title":"injectable - ValidationPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ValidationPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pipes/validation.pipe.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                toValidate\n                            \n                            \n                                    Async\n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        toValidate\n                        \n                    \n                \n            \n            \n                \n                        \n                    toValidate(metatype: Type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/pipes/validation.pipe.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                metatype\n                                            \n                                                        Type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        transform\n                        \n                    \n                \n            \n            \n                \n                        \n                    transform(value: any, metadata: ArgumentMetadata)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/pipes/validation.pipe.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                metadata\n                                            \n                                                        ArgumentMetadata\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ArgumentMetadata,\n  BadRequestException,\n  Injectable,\n  PipeTransform,\n  Type,\n} from '@nestjs/common';\nimport { plainToClass } from 'class-transformer';\nimport { validate } from 'class-validator';\n\n@Injectable()\nexport class ValidationPipe implements PipeTransform {\n  async transform(value: any, metadata: ArgumentMetadata) {\n    const { metatype } = metadata;\n    if (!metatype || !this.toValidate(metatype)) {\n      return value;\n    }\n    const object = plainToClass(metatype, value);\n    const errors = await validate(object);\n    if (errors.length > 0) {\n      throw new BadRequestException('Validation failed');\n    }\n    return value;\n  }\n\n  private toValidate(metatype: Type): boolean {\n    const types = [String, Boolean, Number, Array, Object];\n    return !types.find(type => metatype === type);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/cats/cats.controller.ts\n            \n            controller\n            CatsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/cats/cats.service.ts\n            \n            injectable\n            CatsService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/cats/dto/create-cat.dto.ts\n            \n            class\n            CreateCatDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/cats/interfaces/cat.interface.ts\n            \n            interface\n            Cat\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/constant/index.ts\n            \n            variable\n            APP_ENVIRONMENTS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/constant/index.ts\n            \n            variable\n            SWAGGER_API_ENDPOINT\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/decorators/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/errors/constant.ts\n            \n            variable\n            ErrorCodeToStatusMap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/errors/http.error.ts\n            \n            class\n            HttpError\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/exception/custom.exception.ts\n            \n            class\n            CustomHttpException\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/exception/custom.exception.ts\n            \n            variable\n            getDefaultCodeByStatus\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/guards/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/helpers/app.utils.ts\n            \n            variable\n            AppUtils\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/helpers/helpers.utils.ts\n            \n            variable\n            HelperService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/interceptors/exception.interceptor.ts\n            \n            injectable\n            ExceptionInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/middleware/logger.middleware.ts\n            \n            injectable\n            LoggerMiddleware\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/pipes/parse-int.pipe.ts\n            \n            injectable\n            ParseIntPipe\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/pipes/validation.pipe.ts\n            \n            injectable\n            ValidationPipe\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/scalars/date.scalar.ts\n            \n            class\n            DateScalar\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/core/config/app.config.ts\n            \n            variable\n            app\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/config/app.config.ts\n            \n            variable\n            appConfigValidationSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/config/config.interface.ts\n            \n            interface\n            Config\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/filters/global-exception.filter.ts\n            \n            class\n            GlobalExceptionFilter\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/core/interceptors/logging.interceptor.ts\n            \n            injectable\n            LoggingInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/interceptors/transform.interceptor.ts\n            \n            injectable\n            TransformInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/interceptors/transform.interceptor.ts\n            \n            interface\n            Response\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/pino/app.logger.ts\n            \n            function\n            createLogger\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/pino/pino.module.ts\n            \n            variable\n            basePinoOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/pino/pino.module.ts\n            \n            variable\n            redactFields\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/health/health.controller.ts\n            \n            controller\n            HealthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/health/terminus-logger.service.ts\n            \n            injectable\n            TerminusLogger\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/post/post.service.ts\n            \n            injectable\n            PostService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/prisma/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/recipes/dto/new-recipe.input.ts\n            \n            class\n            NewRecipeInput\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/recipes/dto/recipes.args.ts\n            \n            class\n            RecipesArgs\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/recipes/models/recipe.model.ts\n            \n            class\n            Recipe\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/recipes/recipes.resolver.ts\n            \n            class\n            RecipesResolver\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/recipes/recipes.service.ts\n            \n            injectable\n            RecipesService\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/7)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @fastify/helmet : ^11.1.1\n        \n            @fastify/static : ^7.0.2\n        \n            @mercuriusjs/gateway : ^3.0.0\n        \n            @nestjs/axios : ^3.0.2\n        \n            @nestjs/common : ^10.3.7\n        \n            @nestjs/config : ^3.2.1\n        \n            @nestjs/core : ^10.3.7\n        \n            @nestjs/graphql : ^12.1.1\n        \n            @nestjs/mercurius : ^12.1.1\n        \n            @nestjs/platform-express : ^10.3.7\n        \n            @nestjs/platform-fastify : ^10.3.7\n        \n            @nestjs/swagger : ^7.3.1\n        \n            @nestjs/terminus : ^10.2.3\n        \n            @prisma/client : ^5.11.0\n        \n            axios : ^1.6.8\n        \n            chalk : 4.1.2\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            graphql : ^16.8.1\n        \n            joi : ^17.12.2\n        \n            mercurius : ^14.0.0\n        \n            nestjs-pino : ^4.0.0\n        \n            pino-http : ^9.0.0\n        \n            pino-pretty : ^11.0.0\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            HttpErrorCode   (src/.../http-response.types.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/errors/http-response.types.ts\n    \n        \n            \n                \n                    \n                        \n                        HttpErrorCode\n                    \n                \n                        \n                            \n                                 VALIDATION_ERROR\n                            \n                        \n                        \n                            \n                                Value : validation_error\n                            \n                        \n                        \n                            \n                                 UNAUTHORIZED\n                            \n                        \n                        \n                            \n                                Value : unauthorized\n                            \n                        \n                        \n                            \n                                 UNAUTHORIZED_SHARE\n                            \n                        \n                        \n                            \n                                Value : unauthorized_share\n                            \n                        \n                        \n                            \n                                 RESTRICTED_RESOURCE\n                            \n                        \n                        \n                            \n                                Value : restricted_resource\n                            \n                        \n                        \n                            \n                                 NOT_FOUND\n                            \n                        \n                        \n                            \n                                Value : not_found\n                            \n                        \n                        \n                            \n                                 INTERNAL_SERVER_ERROR\n                            \n                        \n                        \n                            \n                                Value : internal_server_error\n                            \n                        \n                        \n                            \n                                 DATABASE_CONNECTION_UNAVAILABLE\n                            \n                        \n                        \n                            \n                                Value : database_connection_unavailable\n                            \n                        \n                        \n                            \n                                 GATEWAY_TIMEOUT\n                            \n                        \n                        \n                            \n                                Value : gateway_timeout\n                            \n                        \n                        \n                            \n                                 UNKNOWN_ERROR_CODE\n                            \n                        \n                        \n                            \n                                Value : unknown_error_code\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            createLogger   (src/.../app.logger.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/core/pino/app.logger.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createLogger\n                        \n                    \n                \n            \n            \n                \ncreateLogger()\n                \n            \n\n\n\n\n            \n                \n                        Creates a logger instance\n\n\n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promise of a Logger instance\n\n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nExample :$ yarn installRunning the app\nExample :# development\n$ yarn run start\n\n# watch mode\n$ yarn run start:dev\n\n# production mode\n$ yarn run start:prodTest\nExample :# unit tests\n$ yarn run test\n\n# e2e tests\n$ yarn run test:e2e\n\n# test coverage\n$ yarn run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CatsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CoreModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HealthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        NestConfigModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        NestPinoModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PrismaModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RecipesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_CatsModule\n\n\n\ncluster_CatsModule_providers\n\n\n\ncluster_HealthModule\n\n\n\ncluster_HealthModule_imports\n\n\n\ncluster_NestConfigModule\n\n\n\ncluster_NestConfigModule_exports\n\n\n\ncluster_PostModule\n\n\n\ncluster_PostModule_exports\n\n\n\ncluster_PostModule_providers\n\n\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\ncluster_RecipesModule\n\n\n\ncluster_RecipesModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nCatsModule\n\nCatsModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nCatsModule->AppModule\n\n\n\n\n\nCoreModule\n\nCoreModule\n\nAppModule -->\n\nCoreModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nNestConfigModule\n\nNestConfigModule\n\nAppModule -->\n\nNestConfigModule->AppModule\n\n\n\n\n\nConfigService \n\nConfigService \n\nConfigService  -->\n\nNestConfigModule->ConfigService \n\n\n\n\n\nNestPinoModule\n\nNestPinoModule\n\nAppModule -->\n\nNestPinoModule->AppModule\n\n\n\n\n\nPostModule\n\nPostModule\n\nAppModule -->\n\nPostModule->AppModule\n\n\n\n\n\nPostService \n\nPostService \n\nPostService  -->\n\nPostModule->PostService \n\n\n\n\n\nRecipesModule\n\nRecipesModule\n\nAppModule -->\n\nRecipesModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nCatsService\n\nCatsService\n\nCatsModule -->\n\nCatsService->CatsModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nHealthModule -->\n\nPrismaModule->HealthModule\n\n\n\nPostModule -->\n\nPrismaModule->PostModule\n\n\n\nUserModule -->\n\nPrismaModule->UserModule\n\n\n\n\n\nPrismaService \n\nPrismaService \n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nPostService\n\nPostService\n\nPostModule -->\n\nPostService->PostModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\nRecipesService\n\nRecipesService\n\nRecipesModule -->\n\nRecipesService->RecipesModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        10 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    13 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    9 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            IHttpError   (src/.../http-response.types.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/errors/http-response.types.ts\n    \n    \n        \n            \n                \n                    \n                    IHttpError\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            app   (src/.../app.config.ts)\n                        \n                        \n                            APP_ENVIRONMENTS   (src/.../index.ts)\n                        \n                        \n                            appConfigValidationSchema   (src/.../app.config.ts)\n                        \n                        \n                            AppUtils   (src/.../app.utils.ts)\n                        \n                        \n                            basePinoOptions   (src/.../pino.module.ts)\n                        \n                        \n                            ErrorCodeToStatusMap   (src/.../constant.ts)\n                        \n                        \n                            getDefaultCodeByStatus   (src/.../custom.exception.ts)\n                        \n                        \n                            HelperService   (src/.../helpers.utils.ts)\n                        \n                        \n                            redactFields   (src/.../pino.module.ts)\n                        \n                        \n                            Roles   (src/.../roles.decorator.ts)\n                        \n                        \n                            SWAGGER_API_ENDPOINT   (src/.../index.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/core/config/app.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        app\n                        \n                    \n                \n            \n                \n                    \n                        Default value : registerAs('app', () => ({\n  port: process.env.APP_PORT,\n  prefix: process.env.APP_PREFIX,\n  env: process.env.NODE_ENV,\n  url: process.env.API_URL,\n  name: process.env.APP_NAME,\n  clientUrl: process.env.CLIENT_URL,\n  allowedOrigins: process.env.ALLOWED_ORIGINS\n    ? process.env.ALLOWED_ORIGINS.split(',')\n    : '*',\n  sentryDsn: process.env.SENTRY_DSN,\n  swaggerUser: process.env.SWAGGER_USER,\n  swaggerPass: process.env.SWAGGER_PASSWORD,\n}))\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        appConfigValidationSchema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  NODE_ENV: Joi.string()\n    .valid(...APP_ENVIRONMENTS)\n    .required(),\n  APP_PORT: Joi.number().port().required(),\n  API_URL: Joi.string().uri().required(),\n  APP_PREFIX: Joi.string().required().pattern(/^v\\d+/).required().messages({\n    'string.pattern.base': 'Version must start with \"v\" followed by a number.',\n  }),\n  APP_NAME: Joi.string().required(),\n  CLIENT_URL: Joi.string().uri().required(),\n  ALLOWED_HOSTS: Joi.string().optional(),\n  SWAGGER_USER: Joi.string().required(),\n  SWAGGER_PASSWORD: Joi.string().required(),\n}\n                    \n                \n\n\n        \n    \n\n    src/common/constant/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        APP_ENVIRONMENTS\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n  'dev',\n  'development',\n  'stage',\n  'staging',\n  'test',\n  'testing',\n  'prod',\n  'production',\n]\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SWAGGER_API_ENDPOINT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'doc'\n                    \n                \n\n\n        \n    \n\n    src/common/helpers/app.utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AppUtils\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  validationPipeOptions(): ValidationPipeOptions {\n    return {\n      whitelist: true,\n      transform: true,\n      stopAtFirstError: true,\n      forbidUnknownValues: false,\n      validateCustomDecorators: true,\n      enableDebugMessages: HelperService.isDev(),\n    };\n  },\n}\n                    \n                \n\n\n        \n    \n\n    src/core/pino/pino.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        basePinoOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  translateTime: true,\n  ignore: 'pid,hostname',\n  singleLine: true,\n  redact: redactFields,\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        redactFields\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n  'req.headers.authorization',\n  'req.body.password',\n  'req.body.confirmPassword',\n]\n                    \n                \n\n\n        \n    \n\n    src/common/errors/constant.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ErrorCodeToStatusMap\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Record\n\n                    \n                \n                \n                    \n                        Default value : {\n  [HttpErrorCode.VALIDATION_ERROR]: 400,\n  [HttpErrorCode.UNAUTHORIZED]: 401,\n  [HttpErrorCode.RESTRICTED_RESOURCE]: 403,\n  [HttpErrorCode.UNAUTHORIZED_SHARE]: 403,\n  [HttpErrorCode.NOT_FOUND]: 404,\n  [HttpErrorCode.INTERNAL_SERVER_ERROR]: 500,\n  [HttpErrorCode.DATABASE_CONNECTION_UNAVAILABLE]: 503,\n  [HttpErrorCode.GATEWAY_TIMEOUT]: 504,\n  [HttpErrorCode.UNKNOWN_ERROR_CODE]: 500,\n}\n                    \n                \n\n\n        \n    \n\n    src/common/exception/custom.exception.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getDefaultCodeByStatus\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (status: HttpStatus) => {\n  switch (status) {\n    case HttpStatus.BAD_REQUEST:\n      return HttpErrorCode.VALIDATION_ERROR;\n    case HttpStatus.UNAUTHORIZED:\n      return HttpErrorCode.UNAUTHORIZED;\n    case HttpStatus.FORBIDDEN:\n      return HttpErrorCode.RESTRICTED_RESOURCE;\n    case HttpStatus.NOT_FOUND:\n      return HttpErrorCode.NOT_FOUND;\n    case HttpStatus.INTERNAL_SERVER_ERROR:\n      return HttpErrorCode.INTERNAL_SERVER_ERROR;\n    case HttpStatus.SERVICE_UNAVAILABLE:\n      return HttpErrorCode.DATABASE_CONNECTION_UNAVAILABLE;\n    default:\n      return HttpErrorCode.UNKNOWN_ERROR_CODE;\n  }\n}\n                    \n                \n\n\n        \n    \n\n    src/common/helpers/helpers.utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        HelperService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  getEnvFile() {\n    return `${process.cwd()}/env/.env.${process.env.NODE_ENV}`;\n  },\n\n  /* The `isDev()` function is checking if the value of the `NODE_ENV` environment variable starts with\n  the string \"dev\". It returns `true` if the environment is set to development, and `false` otherwise.\n  This function is used to determine if the application is running in a development environment. */\n  isDev(): boolean {\n    return process.env.NODE_ENV.startsWith('dev');\n  },\n\n  /* The `isProd()` function is checking if the value of the `NODE_ENV` environment variable starts with\n  the string \"prod\". It returns `true` if the environment is set to production, and `false` otherwise.\n  This function is used to determine if the application is running in a production environment. */\n  isProd(): boolean {\n    return process.env.NODE_ENV.startsWith('prod');\n  },\n}\n                    \n                \n\n\n        \n    \n\n    src/common/decorators/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: string[]) => SetMetadata('roles', roles)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
